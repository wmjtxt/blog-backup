{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME.bak","path":"CNAME.bak","modified":0,"renderable":0},{"_id":"source/images/YouCompleteMe.JPG","path":"images/YouCompleteMe.JPG","modified":0,"renderable":0},{"_id":"source/images/404-southpark.jpg","path":"images/404-southpark.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar-icon.png","path":"images/avatar-icon.png","modified":0,"renderable":0},{"_id":"source/images/bgimage.png","path":"images/bgimage.png","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/favicon_hello_world.ico","path":"images/favicon_hello_world.ico","modified":0,"renderable":0},{"_id":"source/images/fb4.png","path":"images/fb4.png","modified":0,"renderable":0},{"_id":"source/images/fbn.png","path":"images/fbn.png","modified":0,"renderable":0},{"_id":"source/images/fibonacci.jpg","path":"images/fibonacci.jpg","modified":0,"renderable":0},{"_id":"source/images/fibonacci_matrix.png","path":"images/fibonacci_matrix.png","modified":0,"renderable":0},{"_id":"source/images/fibonacci_result40.png","path":"images/fibonacci_result40.png","modified":0,"renderable":0},{"_id":"source/images/fibonacci_result90.png","path":"images/fibonacci_result90.png","modified":0,"renderable":0},{"_id":"source/images/hello_world.jpeg","path":"images/hello_world.jpeg","modified":0,"renderable":0},{"_id":"source/images/keyboard.png","path":"images/keyboard.png","modified":0,"renderable":0},{"_id":"source/images/lpa1.png","path":"images/lpa1.png","modified":0,"renderable":0},{"_id":"source/images/lpa2.png","path":"images/lpa2.png","modified":0,"renderable":0},{"_id":"source/images/screenshot2.png","path":"images/screenshot2.png","modified":0,"renderable":0},{"_id":"source/images/screenshot3.png","path":"images/screenshot3.png","modified":0,"renderable":0},{"_id":"source/images/wx.png","path":"images/wx.png","modified":0,"renderable":0},{"_id":"source/images/zfb.png","path":"images/zfb.png","modified":0,"renderable":0},{"_id":"source/myPhoto/1岁.jpg","path":"myPhoto/1岁.jpg","modified":0,"renderable":0},{"_id":"source/myPhoto/file.txt","path":"myPhoto/file.txt","modified":0,"renderable":0},{"_id":"source/images/lion_favicon.ico","path":"images/lion_favicon.ico","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"source/images/color.jpg","path":"images/color.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"source/images/avatar_lion.png","path":"images/avatar_lion.png","modified":0,"renderable":0},{"_id":"source/myPhoto/20140930_115321.jpg","path":"myPhoto/20140930_115321.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/images/home.jpg","path":"images/home.jpg","modified":0,"renderable":0},{"_id":"source/images/home.png","path":"images/home.png","modified":0,"renderable":0},{"_id":"source/images/alien.png","path":"images/alien.png","modified":0,"renderable":0},{"_id":"source/images/path.jpg","path":"images/path.jpg","modified":0,"renderable":0},{"_id":"source/images/solar.jpg","path":"images/solar.jpg","modified":0,"renderable":0},{"_id":"source/images/wmj.png","path":"images/wmj.png","modified":0,"renderable":0},{"_id":"source/images/earth_lights_lrg.jpg","path":"images/earth_lights_lrg.jpg","modified":0,"renderable":0},{"_id":"source/images/earth_night.jpg","path":"images/earth_night.jpg","modified":0,"renderable":0},{"_id":"source/myPhoto/IMG20150626016.jpg","path":"myPhoto/IMG20150626016.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/screenshot1.png","path":"images/screenshot1.png","modified":0,"renderable":0},{"_id":"source/images/snowfield.jpg","path":"images/snowfield.jpg","modified":0,"renderable":0},{"_id":"source/images/install-steps.gif","path":"images/install-steps.gif","modified":0,"renderable":0},{"_id":"source/images/lightning.jpg","path":"images/lightning.jpg","modified":0,"renderable":0},{"_id":"source/images/greatewall.jpg","path":"images/greatewall.jpg","modified":0,"renderable":0},{"_id":"source/images/sunset.jpg","path":"images/sunset.jpg","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC00487.JPG","path":"myPhoto/DSC00487.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC00486.JPG","path":"myPhoto/DSC00486.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC00484.JPG","path":"myPhoto/DSC00484.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC00483.JPG","path":"myPhoto/DSC00483.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC00485.JPG","path":"myPhoto/DSC00485.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC_0255.JPG","path":"myPhoto/DSC_0255.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC_0274.JPG","path":"myPhoto/DSC_0274.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC_0248.JPG","path":"myPhoto/DSC_0248.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC_0240.JPG","path":"myPhoto/DSC_0240.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC_0134.JPG","path":"myPhoto/DSC_0134.JPG","modified":0,"renderable":0},{"_id":"source/myPhoto/DSC_0254.JPG","path":"myPhoto/DSC_0254.JPG","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME.bak","hash":"86303d277d38dd4c917c12c18fc2b2749a3fbbe5","modified":1554723130043},{"_id":"source/baidu_verify_tu58Olau3c.html","hash":"49d8245201c1a82e4cf889e1263a505f03d6cc38","modified":1554877178832},{"_id":"source/reset-1.html","hash":"ec478b0db05bca717181f9bf54297fc43b56b4d4","modified":1554712157856},{"_id":"source/reset.html","hash":"ec478b0db05bca717181f9bf54297fc43b56b4d4","modified":1554711761119},{"_id":"source/verify-1.html","hash":"ec770230b08efe20a156b4fa778144d4efd3d213","modified":1554712137744},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1553826951990},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1553826951994},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1553826951990},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1553826951994},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1553826951994},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1553826951994},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1553826951994},{"_id":"source/verify.html","hash":"ec770230b08efe20a156b4fa778144d4efd3d213","modified":1554711753139},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1553826952010},{"_id":"themes/yilia/_config.yml","hash":"2eb0eb46455c743cceeeb590385bfbadff2976f9","modified":1556013459259},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1553826952038},{"_id":"source/_posts/2018-04-11-WMJTXT.md","hash":"cab8591f167f5dd8cda343ae0668c5ee54e1412d","modified":1553951592920},{"_id":"source/_posts/2018-05-01-学习爬虫.md","hash":"dcfdaa66c9451295349f024228bae59df8db5a4a","modified":1554857786443},{"_id":"source/_posts/2018-05-03-chvt.md","hash":"18f0e0a77c12187a2c762f96b276c7e77dc27a46","modified":1553847419989},{"_id":"source/_posts/2018-05-03-wmj-auto.sh.md","hash":"45e950d064fb2c8c8d0dde184d90b106c174ad06","modified":1553846464191},{"_id":"source/_posts/2018-09-28-Community-Detection-values.md","hash":"0e2c452f9a0b40572376749fb76be8ee56d25a96","modified":1553846181061},{"_id":"source/_posts/2018-09-19-配置win10.md","hash":"736fe7f04a09a1116e1842db885bc9bce3ac5e8a","modified":1553846163711},{"_id":"source/_posts/2018-09-29-myDeepin.md","hash":"ac42436453b093f1ef9c91dc3889f9564f1d7395","modified":1553846199051},{"_id":"source/_posts/2018-10-28-somethinkings.md","hash":"1476266cdfb8caf108b5d5ab3565f9937cd6f6d4","modified":1553951626486},{"_id":"source/_posts/2018-10-17-importDatatoMySQL.md","hash":"c2b104aa08cb52b01818a8c696bb0847982dcabd","modified":1554857865228},{"_id":"source/_posts/2018-05-14-在deepin上安装YouCompleteMe.md","hash":"a4dcf18663f013d138456e1dee6605286105ece6","modified":1553847481166},{"_id":"source/_posts/2018-11-12-lpa算法c++实现及模块度计算.md","hash":"02e3a0b7859ea772452fed1fcb8ac7c5f31ba855","modified":1557998091587},{"_id":"source/_posts/2018-12-26-three_method_of_fibonacci.md","hash":"fa3de48ebf0bdca565e805cc77e543361454db1c","modified":1554857936608},{"_id":"source/_posts/2019-03-06-LeedCode_438.md","hash":"47756520944fbd44ff8e91a2de70a8ee7b40ebe3","modified":1554857807564},{"_id":"source/_posts/2019-03-07-LeedCode_37_Sudoku_Solver.md","hash":"b6931aadafc0f358d3b9aa3bb0babcb1602b71f3","modified":1554857833072},{"_id":"source/_posts/2019-03-09-epoll.md","hash":"459ef1a7b0c329fc28cc5bb4f712a7658bd7bc27","modified":1554857883188},{"_id":"source/_posts/2019-03-18-linux_command.md","hash":"ddfcb643ab3ee0423750951054448ddd18a19e82","modified":1558349596731},{"_id":"source/_posts/2019-03-25-find_wc.md","hash":"ad1421d71c4e5caf175765242b758ce4034688b4","modified":1553847296233},{"_id":"source/_posts/2019-03-25-gdb_make.md","hash":"85cdf6fa73d90c3fc39ee8cc55a313e1aa3b5c87","modified":1554857966936},{"_id":"source/_posts/2019-03-29-blog-transfer-to-Hexo.md","hash":"c63d640c40bdbddcb2935e44366f645a7f3262c1","modified":1553939640237},{"_id":"source/_posts/2019-03-30-oldPhotos.md","hash":"dbd6a6cab79f1040c3b273a27d513b6ec9e3dc09","modified":1553995908852},{"_id":"source/_posts/2019-03-30-reading.md","hash":"95d1bf3c54b239cd49e5127432c8e8d0609de189","modified":1553955487920},{"_id":"source/_posts/2019-04-23-命名空间namespace数据成员重复定义问题.md","hash":"b7d266673442ef84f8c13c07d723e231d55e90f0","modified":1556027310637},{"_id":"source/_posts/2019-03-31-drink.md","hash":"091f9a5bdd129d94d938514f7dc9ca0fdb684a7c","modified":1554041323388},{"_id":"source/_posts/2019-04-10-mjpoet.md","hash":"187ff81e656b00c900d3df572d02ec43ef9ba7bd","modified":1554862799622},{"_id":"source/images/YouCompleteMe.JPG","hash":"a5fbaea3b2d48ef993275baceddefe8072215f53","modified":1553828943578},{"_id":"source/images/404-southpark.jpg","hash":"3d621448c1f5286af7ca239d24c68c0285dbdd4a","modified":1553828943578},{"_id":"source/images/avatar-icon.png","hash":"d015f105aa4c440ada4114d6dfb867cac410154f","modified":1553828943578},{"_id":"source/images/baidu_verify_W1hQJrC8Kt.html","hash":"330e3aa66bd9b6deeed337267007cbb77b862b65","modified":1554342223677},{"_id":"source/images/bgimage.png","hash":"6ded5f0b66c9c2a3b5ecadd5b66f6b5f75a1f092","modified":1553828943590},{"_id":"source/images/favicon.ico","hash":"55bc0e46470007865a5c506a41ef4b3a32391105","modified":1553828943610},{"_id":"source/images/favicon_hello_world.ico","hash":"42ed92562a354337bf49a3bb30911a6c23e24bad","modified":1553828943610},{"_id":"source/images/fb4.png","hash":"9b566c5d62f9e4296b08c5b1176fa546afb08405","modified":1553828943562},{"_id":"source/images/fbn.png","hash":"50f56d0f6ee2397eeca0642f2b48285156278397","modified":1553828943566},{"_id":"source/images/fibonacci.jpg","hash":"98b39f9d3a49dd4522c0434d0b719840581aa7c9","modified":1553828943570},{"_id":"source/images/fibonacci_matrix.png","hash":"fc354adbc793dc3356bca407e7e48b39a1b19e22","modified":1553828943574},{"_id":"source/images/fibonacci_result40.png","hash":"a9cef3198d4f2eea45de1c95910c24187cc8a001","modified":1553828943562},{"_id":"source/images/fibonacci_result90.png","hash":"0002d7ffbdb9f0530da516b3d5f27b91fae94fd1","modified":1553828943570},{"_id":"source/images/hello_world.jpeg","hash":"41f2e7cfa38533c05d0585e4d9577f2431764cee","modified":1553828943590},{"_id":"source/images/keyboard.png","hash":"9135ad837cf3a8a091436bf57148a475c2434532","modified":1553828943562},{"_id":"source/_posts/2018-11-06-deepin-lockscreen.md","hash":"ab4c7e03e39ae0133c4055288b7f34a329ec8d1c","modified":1553846392798},{"_id":"source/images/lpa1.png","hash":"ac5021328448e2bd053ec62f0c0096c247a6688b","modified":1553828943566},{"_id":"source/images/lpa2.png","hash":"3c6a16585a6b6dd35817af9952fca6bb5ea778c6","modified":1553828943570},{"_id":"source/images/screenshot2.png","hash":"6f7ea8e33fad9822239cf22f94a208146735f0d1","modified":1553828943606},{"_id":"source/images/screenshot3.png","hash":"12dc3c9d9923b26a7fc85ef227e5fdc1300c335d","modified":1553828943606},{"_id":"source/images/wx.png","hash":"d91906d7954d77b41e5aebf4d8b1233887d33c25","modified":1553934859925},{"_id":"source/images/zfb.png","hash":"4213aacdb210658961f616b50c18cf1519d43bff","modified":1553934833311},{"_id":"source/myPhoto/1岁.jpg","hash":"ed99389b703f4ce9d07efb17d23b7d1213e9ed8a","modified":1539567801000},{"_id":"source/myPhoto/file.txt","hash":"c3eeb97a518eb0c34b116336ecae5b79a85babde","modified":1553954578008},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1553826951994},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1553826951994},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1553826951998},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1553826951998},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1553826951998},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1553826951998},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1553826952010},{"_id":"source/images/lion_favicon.ico","hash":"fa55b5416f5b05299ffb2b0adfb90e5cc5cc78c6","modified":1553828943618},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1553826952010},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1553826952010},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1553826952010},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1553826951998},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1553826952010},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1553826952010},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1553826952034},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1553826952038},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1553826952010},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1553826952030},{"_id":"source/images/color.jpg","hash":"9281ef300cf266776e28e2ff1038e7c216cdda49","modified":1554086854598},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1553826952010},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553826952010},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1553826952034},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1553826952034},{"_id":"source/images/avatar_lion.png","hash":"0a55eecbe5a0337e141fc71db8f0763924ed527f","modified":1553828943586},{"_id":"source/myPhoto/20140930_115321.jpg","hash":"ffaeb009b1bf5c69e7b5d895e7a8082cbd9757cc","modified":1529410306000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1553826951998},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1553826951998},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1553826951998},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1553826951998},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1553826952010},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1553826952010},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7802b5f9abde77ccc353a2851ceae5a9ce033a88","modified":1554877428690},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"156a71e68cc331906f554a6230997f12c5d1d66b","modified":1554719957040},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1553826952030},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1553826952030},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1553826952030},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1553826952030},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1553826952030},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1553826952030},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1553826952034},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1553826952034},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1553826952034},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1553826952002},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1553826952014},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1553826952014},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1554731595515},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1553826952014},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1553826952014},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1553826952014},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1553826952014},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1553826952014},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1553826952014},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1553826952018},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1553826952018},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1553826952018},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1553826952022},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1553826952022},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1553826952018},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1553826952022},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1553826952022},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1553826952022},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1553826952022},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1553826952022},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1553826952022},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1553826952022},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1553826952022},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1553826952026},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1553826952022},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1553826952026},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1553826952026},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1553826952026},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1553826952026},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1553826952026},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1553826952026},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1553826952026},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1553826952026},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1553826952026},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1553826952026},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1553826952030},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1553826952030},{"_id":"source/images/home.jpg","hash":"e0206bf4020e27a2c7cd6f5f07469883cb3c9946","modified":1553828943610},{"_id":"source/images/home.png","hash":"e0206bf4020e27a2c7cd6f5f07469883cb3c9946","modified":1553828943574},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1553826952026},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1553826952018},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1553826952006},{"_id":"source/images/alien.png","hash":"f5e0fb49bf1a6af9090622a265f938ebd332536f","modified":1554084193487},{"_id":"source/images/path.jpg","hash":"8121f371143fc86644741c129367dc9608367fc0","modified":1553828943598},{"_id":"source/images/solar.jpg","hash":"443a1364c12e8eddb33f2c2fb1c1baa8b1c86963","modified":1554084294300},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1553826952006},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1553826952006},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1553826952002},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1553826952006},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1553826952006},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1553826952006},{"_id":"themes/yilia/layout/_partial/post/valine.ejs","hash":"7aa3f03d021bb2f4b17b93993c17ffc489a5a5ce","modified":1554709383941},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1553826952006},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1553826952006},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1553826952014},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1553826952014},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1553826952014},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1553826952018},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1553826952022},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1553826952022},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1553826952014},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1553826952018},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1553826952018},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1553826952018},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1553826952018},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1553826952018},{"_id":"source/images/wmj.png","hash":"8ac35219cc77faeb927c97771d8256076a2a9a62","modified":1553828943614},{"_id":"source/images/earth_lights_lrg.jpg","hash":"d1a3af1e9de2fda780d22a873742efee26c6fb59","modified":1554084294304},{"_id":"source/images/earth_night.jpg","hash":"d1a3af1e9de2fda780d22a873742efee26c6fb59","modified":1554084294304},{"_id":"source/myPhoto/IMG20150626016.jpg","hash":"b3d5868b1f47f48e975127b612fa2c24e806d83f","modified":1529409880000},{"_id":"source/images/avatar.png","hash":"86118b1f2ca68390f7d5b03cdf0e49c910835ae3","modified":1553828943586},{"_id":"source/images/screenshot1.png","hash":"5169071fb89916f6c570e4078e8d381ac07a56a4","modified":1553828943602},{"_id":"source/images/snowfield.jpg","hash":"fb1722f298463af76a5b69813ecb19112cc16fb7","modified":1554084218908},{"_id":"source/images/install-steps.gif","hash":"a1385dbe0048c38c6b91244f7d03a094e5874621","modified":1553828943594},{"_id":"source/images/lightning.jpg","hash":"cbefe7692b5f81e6ea83b8e5ec5c028736beff6f","modified":1554084176633},{"_id":"source/images/greatewall.jpg","hash":"2796e0ad3754cb8fe14816ac38542753bad51385","modified":1554084218904},{"_id":"source/images/sunset.jpg","hash":"459286b4e0658f7683ed565ffb9d016b5249773d","modified":1554203568000},{"_id":"source/myPhoto/DSC00487.JPG","hash":"12f2375fa3d6671dff8edcb875e160b440550170","modified":1529409891000},{"_id":"source/myPhoto/DSC00486.JPG","hash":"67819805ad2a6413306315e44ea591a6de03d362","modified":1529409891000},{"_id":"source/myPhoto/DSC00484.JPG","hash":"bf1f52247e2bc149d4e65007793f7543cfd915b5","modified":1529409891000},{"_id":"source/myPhoto/DSC00483.JPG","hash":"df6a42b598e70732ffdf89c80278793643daa117","modified":1529409891000},{"_id":"source/myPhoto/DSC00485.JPG","hash":"704876cd0b1d4144acc79685803450b6002eacab","modified":1529409891000},{"_id":"source/myPhoto/DSC_0255.JPG","hash":"e164ec6ce799dd90d0d82ab0a996da0babfefe58","modified":1529409984000},{"_id":"source/myPhoto/DSC_0274.JPG","hash":"bfb1bf9ed391be6d72a0f590926a54256103d4d9","modified":1529409955000},{"_id":"source/myPhoto/DSC_0248.JPG","hash":"01817a0756d61e244eb731da452a66ec74ba8d48","modified":1529409985000},{"_id":"source/myPhoto/DSC_0240.JPG","hash":"a443f033d97fb5b9481ff3f241a355e8ae3fbb4c","modified":1529409990000},{"_id":"source/myPhoto/DSC_0134.JPG","hash":"dde9e2095b567db255fe46ffd0e404d94ec48000","modified":1529410125000},{"_id":"source/myPhoto/DSC_0254.JPG","hash":"8ebfc97a8d44e367f45219b6efc11f35e58888e1","modified":1529409978000},{"_id":"public/atom.xml","hash":"175702dcaeea699cb8eb8f82206f402a6c9e81da","modified":1558607945588},{"_id":"public/content.json","hash":"7f692fe7e1b5d126f7d83b986f76911c43bba0a3","modified":1558062208269},{"_id":"public/baidu_verify_tu58Olau3c.html","hash":"e05927a4ff42c88306a7590357af852ce7f567f2","modified":1558607948031},{"_id":"public/reset-1.html","hash":"15f3b4920617d9d0ed4b5f8abb2639658b69070d","modified":1558607948032},{"_id":"public/reset.html","hash":"8b8431f5ee5eefc497aab659c56e998859a0d826","modified":1558607951392},{"_id":"public/verify-1.html","hash":"76df9d3a77fc6ca2b2d04e4e0032c258c44b4f4d","modified":1558607951393},{"_id":"public/verify.html","hash":"4198df8d9fc7615c778817e304e0d5c1228c211f","modified":1558607951470},{"_id":"public/images/baidu_verify_W1hQJrC8Kt.html","hash":"b3405f98c9ee229c2621f924686b77473cfe5a50","modified":1558607951470},{"_id":"public/2019/03/30/reading/index.html","hash":"8827b01c79a2fb2981b37c58cad2ac416ea36ca2","modified":1558607951484},{"_id":"public/2019/03/30/oldPhotos/index.html","hash":"5419a0d9afbd0861812c2efc85477661c61871d8","modified":1558607951484},{"_id":"public/2019/04/23/命名空间namespace数据成员重复定义问题/index.html","hash":"dfa7ed1246482957d98e160d092bff3052c8e098","modified":1558607951470},{"_id":"public/2019/04/10/mjpoet/index.html","hash":"a4bc3e5a0d90f7412776bf1f526936d16f96b314","modified":1558607951486},{"_id":"public/2019/03/31/drink/index.html","hash":"42bce5691188f059bb025c6a35e282632b2ef8f8","modified":1558607951484},{"_id":"public/2019/03/25/gdb_make/index.html","hash":"bfdcfdf9c00a84ad0c20d76ff432bf1c7da9d67e","modified":1558607951484},{"_id":"public/2019/03/25/find_wc/index.html","hash":"e2dd668e28ad66899f95f0301c3445955c2a42ba","modified":1558607951484},{"_id":"public/2019/03/09/epoll/index.html","hash":"66c462f8f9f4866cfec0b00f4e797fe473ac73fc","modified":1558607951485},{"_id":"public/2019/03/07/LeedCode_37_Sudoku_Solver/index.html","hash":"e4e502f438f6eae0ca3fca3d7a58336649526630","modified":1558607951487},{"_id":"public/2019/03/06/LeedCode_438/index.html","hash":"e6acb253c2fda77994598d331a1f9791a16181d0","modified":1558607951485},{"_id":"public/2018/12/26/three_method_of_fibonacci/index.html","hash":"823c34b9f7ac43f071ceac778c6fa48f931e53f5","modified":1558607951485},{"_id":"public/2018/11/12/lpa算法c++实现及模块度计算/index.html","hash":"5e9002443be1aa66252df24d1429452edc0eecd7","modified":1558607951485},{"_id":"public/2018/11/06/deepin-lockscreen/index.html","hash":"2154392588850b65330f82581f98ea4270617dd4","modified":1558607951486},{"_id":"public/2018/10/28/somethinkings/index.html","hash":"2386426fa07dbdb5657df8cf115e66453b717901","modified":1558607951486},{"_id":"public/2018/10/17/importDatatoMySQL/index.html","hash":"850723a27540a07eddfe69c7287ca6a57dcebf7b","modified":1558607951486},{"_id":"public/2018/09/28/Community-Detection-values/index.html","hash":"b168031287ccc969e7e432fa0d0586d5cb4a1ffe","modified":1558607951486},{"_id":"public/2018/09/29/myDeepin/index.html","hash":"4792624ae33bb0a3d319b47f9b73530409322546","modified":1558607951486},{"_id":"public/2018/09/19/配置win10/index.html","hash":"720cce8ae97755fdbe64d091729ff890bf84c676","modified":1558607951487},{"_id":"public/2018/05/14/在deepin上安装YouCompleteMe/index.html","hash":"7233bbc4a5d74ad274dca31d37010301c589e642","modified":1558607951487},{"_id":"public/2018/05/03/wmj-auto.sh/index.html","hash":"d8195cb30d60fe63f0c723298a9af6676168845c","modified":1558607951487},{"_id":"public/2018/05/03/chvt/index.html","hash":"4fb10eb3ce14385168f6568ef3ab36488acb0538","modified":1558607951488},{"_id":"public/2018/05/01/学习爬虫/index.html","hash":"288ff5db8a26cee3325de40ce6ebf546b6c810c4","modified":1558607951491},{"_id":"public/archives/index.html","hash":"b0b550107a12d00ed763250e54bb8ca2fdf7faec","modified":1558607951487},{"_id":"public/2018/04/11/WMJTXT/index.html","hash":"3dfab17e5403f319e1e3ec84759e21d22e39b3d2","modified":1558607951494},{"_id":"public/archives/page/2/index.html","hash":"b58269d91bd58bd35ba811433089550c2370cb54","modified":1558607951488},{"_id":"public/archives/page/3/index.html","hash":"37f6df14c8a73871db05751274a64bf5e127a263","modified":1558607951488},{"_id":"public/archives/2018/index.html","hash":"a936cb40963c3938011185c06b83d410bed1f156","modified":1558607951488},{"_id":"public/2019/03/29/blog-transfer-to-Hexo/index.html","hash":"f08b5bc5f521c7425eab00836b87ecc95e9f612b","modified":1558607951484},{"_id":"public/archives/2018/04/index.html","hash":"63ebe75eb058dc8aeceaea2a56aa74cefab60a24","modified":1558607951489},{"_id":"public/archives/2018/page/2/index.html","hash":"88b5cef420d4549f9000a1ecfea16e6f31285d51","modified":1558607951489},{"_id":"public/archives/2018/09/index.html","hash":"85fbb2c49cd193ebd78b08be34e0e7a2099c9842","modified":1558607951489},{"_id":"public/archives/2018/10/index.html","hash":"42473301a16d72aa0dca840e13f32986ad448b0b","modified":1558607951490},{"_id":"public/archives/2018/11/index.html","hash":"f07d10d5556820566f0817271d29538eddc864be","modified":1558607951490},{"_id":"public/archives/2018/12/index.html","hash":"6e3d55c81a993bc085be07746684713ade7874bf","modified":1558607951490},{"_id":"public/archives/2019/index.html","hash":"0ebe5b04979600553ec9aafb52fb79ba852ce796","modified":1558607951490},{"_id":"public/2019/03/18/linux_command/index.html","hash":"04c4128473515ce61073835ea8f0b8a22c96d942","modified":1558607951485},{"_id":"public/archives/2019/03/index.html","hash":"7f03f1e586267fff292600e3c59013353f28085b","modified":1558607951491},{"_id":"public/index.html","hash":"0b4c10876b76e27904f2d7fd2fdc6e37bbd6ea35","modified":1558607951495},{"_id":"public/archives/2019/page/2/index.html","hash":"2776d7d8f696df84cd2f6eee59a14d9230df09c6","modified":1558607951491},{"_id":"public/archives/2018/05/index.html","hash":"a863d4b9a436409c56de9bf2770a6775a2f71555","modified":1558607951489},{"_id":"public/page/3/index.html","hash":"d99ca2ee5025c36ef06768e7f6a6d590a72a8c99","modified":1558607951496},{"_id":"public/page/2/index.html","hash":"ea133c08b646b5616a2fc46e952b40501245e2a1","modified":1558607951496},{"_id":"public/page/5/index.html","hash":"58954b1423b6efb0b4e0a6b385e9684faf748a85","modified":1558607951496},{"_id":"public/archives/2019/04/index.html","hash":"ab3144fe6eaeafb78b47e3e7e0a63681a7c0e0eb","modified":1558607951491},{"_id":"public/tags/Linux/index.html","hash":"980b2dc541eb09818b0eefc0923a3e9006a58607","modified":1558607951492},{"_id":"public/tags/爬虫/index.html","hash":"b13a98797f529c890c5dabe1db8ae2c959870c31","modified":1558607951493},{"_id":"public/tags/技术/index.html","hash":"72793eaac6ba90814ce6e87c9a83930bda361d6c","modified":1558607951492},{"_id":"public/tags/随笔/index.html","hash":"24e47255f6924645ab464429572084f365f000b7","modified":1558607951492},{"_id":"public/tags/shell/index.html","hash":"b21afcfcbf416ef6e471c74ba3e8aa78bd4d7b3f","modified":1558607951493},{"_id":"public/tags/Deepin/index.html","hash":"af19e0c97ed51d41f26a7e58110ad06718b1ad57","modified":1558607951492},{"_id":"public/tags/复杂网络/index.html","hash":"e1783f2bd077ff79de6ec2edaafad9fb050a41a5","modified":1558607951493},{"_id":"public/tags/windows/index.html","hash":"98f9d6731410a0ad110ea8865f747c562ba2969a","modified":1558607951493},{"_id":"public/tags/mysql/index.html","hash":"d816c65b569c525644c16211fd172f1f02617ede","modified":1558607951494},{"_id":"public/tags/LPA/index.html","hash":"d9983441aa0741590788ad35621ebac53445bae6","modified":1558607951495},{"_id":"public/tags/vim/index.html","hash":"1b250d105d6e8565036cbc1d0648bda7cc823252","modified":1558607951495},{"_id":"public/tags/斐波那契/index.html","hash":"926d19d67ddd8141e11ac25777f5be01bf14d0ce","modified":1558607951494},{"_id":"public/tags/LeetCode/index.html","hash":"278aaa6ab23fa262f8e210d9a8880671ea538dd9","modified":1558607951494},{"_id":"public/tags/刷题/index.html","hash":"d0e35d714ec013f157699d8cbc9cba366f8dc980","modified":1558607951494},{"_id":"public/tags/Socket/index.html","hash":"459ac5c186c8bb9d5334f6c37adffcddf2bfbf4a","modified":1558607951495},{"_id":"public/tags/c/index.html","hash":"efd30cc16ab29e8e7980077ec5779e61bad168dc","modified":1558607951496},{"_id":"public/tags/linux/index.html","hash":"e677063c3cabf88c1aa6399ec910e3fc55afbd2c","modified":1558607951495},{"_id":"public/tags/笔记/index.html","hash":"26c8dab30843923c9a9eed6cf8dcceae53e6ffdd","modified":1558607951496},{"_id":"public/tags/照片/index.html","hash":"47467d28216881f63c461de7793412cd6043d7f2","modified":1558607951497},{"_id":"public/page/4/index.html","hash":"93ec8b3245ba6d0ae24e67f7ac0ecb06bb9f9366","modified":1558607951496},{"_id":"public/tags/诗歌/index.html","hash":"afa328e461935487147c9068c285ad934d265b42","modified":1558607951495},{"_id":"public/tags/C/index.html","hash":"5aeaf3d0cf440ca4e3e62b5114110758775caa2f","modified":1558607951494},{"_id":"public/CNAME.bak","hash":"86303d277d38dd4c917c12c18fc2b2749a3fbbe5","modified":1556027329178},{"_id":"public/images/404-southpark.jpg","hash":"3d621448c1f5286af7ca239d24c68c0285dbdd4a","modified":1556027329178},{"_id":"public/images/YouCompleteMe.JPG","hash":"a5fbaea3b2d48ef993275baceddefe8072215f53","modified":1556027329178},{"_id":"public/images/favicon.ico","hash":"55bc0e46470007865a5c506a41ef4b3a32391105","modified":1556027329178},{"_id":"public/images/avatar-icon.png","hash":"d015f105aa4c440ada4114d6dfb867cac410154f","modified":1556027329179},{"_id":"public/images/favicon_hello_world.ico","hash":"42ed92562a354337bf49a3bb30911a6c23e24bad","modified":1556027329179},{"_id":"public/images/fb4.png","hash":"9b566c5d62f9e4296b08c5b1176fa546afb08405","modified":1556027329179},{"_id":"public/images/fbn.png","hash":"50f56d0f6ee2397eeca0642f2b48285156278397","modified":1556027329179},{"_id":"public/images/fibonacci.jpg","hash":"98b39f9d3a49dd4522c0434d0b719840581aa7c9","modified":1556027329179},{"_id":"public/images/fibonacci_matrix.png","hash":"fc354adbc793dc3356bca407e7e48b39a1b19e22","modified":1556027329179},{"_id":"public/images/fibonacci_result40.png","hash":"a9cef3198d4f2eea45de1c95910c24187cc8a001","modified":1556027329180},{"_id":"public/images/fibonacci_result90.png","hash":"0002d7ffbdb9f0530da516b3d5f27b91fae94fd1","modified":1556027329180},{"_id":"public/images/hello_world.jpeg","hash":"41f2e7cfa38533c05d0585e4d9577f2431764cee","modified":1556027329180},{"_id":"public/images/keyboard.png","hash":"9135ad837cf3a8a091436bf57148a475c2434532","modified":1556027329180},{"_id":"public/images/lpa1.png","hash":"ac5021328448e2bd053ec62f0c0096c247a6688b","modified":1556027329180},{"_id":"public/images/lpa2.png","hash":"3c6a16585a6b6dd35817af9952fca6bb5ea778c6","modified":1556027329181},{"_id":"public/images/bgimage.png","hash":"6ded5f0b66c9c2a3b5ecadd5b66f6b5f75a1f092","modified":1556027329181},{"_id":"public/images/screenshot2.png","hash":"6f7ea8e33fad9822239cf22f94a208146735f0d1","modified":1556027329181},{"_id":"public/images/screenshot3.png","hash":"12dc3c9d9923b26a7fc85ef227e5fdc1300c335d","modified":1556027329181},{"_id":"public/images/wx.png","hash":"d91906d7954d77b41e5aebf4d8b1233887d33c25","modified":1556027329181},{"_id":"public/images/lion_favicon.ico","hash":"fa55b5416f5b05299ffb2b0adfb90e5cc5cc78c6","modified":1556027329182},{"_id":"public/myPhoto/file.txt","hash":"c3eeb97a518eb0c34b116336ecae5b79a85babde","modified":1556027329182},{"_id":"public/myPhoto/1岁.jpg","hash":"ed99389b703f4ce9d07efb17d23b7d1213e9ed8a","modified":1556027329182},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1556027329182},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1556027329182},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1556027329182},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1556027329183},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1556027329183},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1556027329183},{"_id":"public/images/zfb.png","hash":"4213aacdb210658961f616b50c18cf1519d43bff","modified":1556027329183},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1556027329183},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1556027329184},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1556027329184},{"_id":"public/images/color.jpg","hash":"9281ef300cf266776e28e2ff1038e7c216cdda49","modified":1556027329203},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1556027329224},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1556027329225},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1556027329225},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1556027329225},{"_id":"public/images/avatar_lion.png","hash":"0a55eecbe5a0337e141fc71db8f0763924ed527f","modified":1556027329225},{"_id":"public/myPhoto/20140930_115321.jpg","hash":"ffaeb009b1bf5c69e7b5d895e7a8082cbd9757cc","modified":1556027329225},{"_id":"public/images/home.jpg","hash":"e0206bf4020e27a2c7cd6f5f07469883cb3c9946","modified":1556027329313},{"_id":"public/images/home.png","hash":"e0206bf4020e27a2c7cd6f5f07469883cb3c9946","modified":1556027329313},{"_id":"public/images/alien.png","hash":"f5e0fb49bf1a6af9090622a265f938ebd332536f","modified":1556027329329},{"_id":"public/images/path.jpg","hash":"8121f371143fc86644741c129367dc9608367fc0","modified":1556027329329},{"_id":"public/images/solar.jpg","hash":"443a1364c12e8eddb33f2c2fb1c1baa8b1c86963","modified":1556027329330},{"_id":"public/images/wmj.png","hash":"8ac35219cc77faeb927c97771d8256076a2a9a62","modified":1556027329354},{"_id":"public/images/earth_lights_lrg.jpg","hash":"d1a3af1e9de2fda780d22a873742efee26c6fb59","modified":1556027329361},{"_id":"public/images/earth_night.jpg","hash":"d1a3af1e9de2fda780d22a873742efee26c6fb59","modified":1556027329361},{"_id":"public/myPhoto/IMG20150626016.jpg","hash":"b3d5868b1f47f48e975127b612fa2c24e806d83f","modified":1556027329367},{"_id":"public/images/screenshot1.png","hash":"5169071fb89916f6c570e4078e8d381ac07a56a4","modified":1556027329373},{"_id":"public/images/avatar.png","hash":"86118b1f2ca68390f7d5b03cdf0e49c910835ae3","modified":1556027329373},{"_id":"public/images/snowfield.jpg","hash":"fb1722f298463af76a5b69813ecb19112cc16fb7","modified":1556027329379},{"_id":"public/images/install-steps.gif","hash":"a1385dbe0048c38c6b91244f7d03a094e5874621","modified":1556027329386},{"_id":"public/images/lightning.jpg","hash":"cbefe7692b5f81e6ea83b8e5ec5c028736beff6f","modified":1556027329466},{"_id":"public/images/greatewall.jpg","hash":"2796e0ad3754cb8fe14816ac38542753bad51385","modified":1556027329476},{"_id":"public/images/sunset.jpg","hash":"459286b4e0658f7683ed565ffb9d016b5249773d","modified":1556027329515},{"_id":"public/myPhoto/DSC00487.JPG","hash":"12f2375fa3d6671dff8edcb875e160b440550170","modified":1556027329665},{"_id":"public/myPhoto/DSC00486.JPG","hash":"67819805ad2a6413306315e44ea591a6de03d362","modified":1556027329716},{"_id":"public/myPhoto/DSC00484.JPG","hash":"bf1f52247e2bc149d4e65007793f7543cfd915b5","modified":1556027329756},{"_id":"public/myPhoto/DSC00483.JPG","hash":"df6a42b598e70732ffdf89c80278793643daa117","modified":1556027329763},{"_id":"public/myPhoto/DSC00485.JPG","hash":"704876cd0b1d4144acc79685803450b6002eacab","modified":1556027329774},{"_id":"public/myPhoto/DSC_0255.JPG","hash":"e164ec6ce799dd90d0d82ab0a996da0babfefe58","modified":1556027329789},{"_id":"public/myPhoto/DSC_0274.JPG","hash":"bfb1bf9ed391be6d72a0f590926a54256103d4d9","modified":1556027329883},{"_id":"public/myPhoto/DSC_0248.JPG","hash":"01817a0756d61e244eb731da452a66ec74ba8d48","modified":1556027329908},{"_id":"public/myPhoto/DSC_0134.JPG","hash":"dde9e2095b567db255fe46ffd0e404d94ec48000","modified":1556027329935},{"_id":"public/myPhoto/DSC_0254.JPG","hash":"8ebfc97a8d44e367f45219b6efc11f35e58888e1","modified":1556027329948},{"_id":"public/myPhoto/DSC_0240.JPG","hash":"a443f033d97fb5b9481ff3f241a355e8ae3fbb4c","modified":1556027329957}],"Category":[],"Data":[],"Page":[{"_content":"tu58Olau3c","source":"baidu_verify_tu58Olau3c.html","raw":"tu58Olau3c","date":"2019-04-10T06:19:38.832Z","updated":"2019-04-10T06:19:38.832Z","path":"baidu_verify_tu58Olau3c.html","title":"","comments":1,"layout":"page","_id":"cjutuhpc20000ifin1j29ju8o","content":"tu58Olau3c","site":{"data":{}},"excerpt":"","more":"tu58Olau3c"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n<div class=\"container\">\n\n  <h3>重置密码</h3>\n  <hr>\n\n  <form class=\"form-horizontal form login-form\" name=\"resetform\" >\n    <!-- <legend>重置密码</legend> -->\n\n    <div class=\"alert\" style=\"display:none\" id=\"error\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputEmail\" >新密码</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"新密码\" name=\"password\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputPassword\" >重新输入</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"新密码\"  name=\"password1\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"reset\">重置</button>\n      </div>\n    </div>\n\n  </form>\n\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  //获得token\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  $(function(){\n    $(\"#reset\").click(function(){\n      var p = $(\"[name=password]\");\n      var p1 = $(\"[name=password1]\");\n      if(p.val()!=p1.val()){\n        $(\"#error\").show();\n        $(\"#error\").text(\"两次输入不一致\");//密码输入不一致提示\n      }\n      if(p.val()&&p1.val()&&p.val()==p1.val()){\n        $.jsonp({\n          url:\"/1/resetPassword/\"+token,//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/resetPassword/\"\n          data:{\"password\":p.val()},\n          callbackParameter: \"callback\",\n          cache: false,\n          success:function(result){\n            $(\"#error\").show();//成功和失败都会有提示信息, 共用 #error\n            if(result.error){\n              $(\"#error\").text(result.error);\n            }else{\n              $(\"#error\").text(\"密码重置成功\");\n            }\n          },\n          error:function(result,text){\n            $(\"#error\").text(\"服务器发生错误\");\n          }\n        });\n      }\n\n    });\n  });\n\n\n\n\n</script>\n  </body>\n  </html>\n","source":"reset-1.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n<div class=\"container\">\n\n  <h3>重置密码</h3>\n  <hr>\n\n  <form class=\"form-horizontal form login-form\" name=\"resetform\" >\n    <!-- <legend>重置密码</legend> -->\n\n    <div class=\"alert\" style=\"display:none\" id=\"error\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputEmail\" >新密码</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"新密码\" name=\"password\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputPassword\" >重新输入</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"新密码\"  name=\"password1\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"reset\">重置</button>\n      </div>\n    </div>\n\n  </form>\n\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  //获得token\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  $(function(){\n    $(\"#reset\").click(function(){\n      var p = $(\"[name=password]\");\n      var p1 = $(\"[name=password1]\");\n      if(p.val()!=p1.val()){\n        $(\"#error\").show();\n        $(\"#error\").text(\"两次输入不一致\");//密码输入不一致提示\n      }\n      if(p.val()&&p1.val()&&p.val()==p1.val()){\n        $.jsonp({\n          url:\"/1/resetPassword/\"+token,//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/resetPassword/\"\n          data:{\"password\":p.val()},\n          callbackParameter: \"callback\",\n          cache: false,\n          success:function(result){\n            $(\"#error\").show();//成功和失败都会有提示信息, 共用 #error\n            if(result.error){\n              $(\"#error\").text(result.error);\n            }else{\n              $(\"#error\").text(\"密码重置成功\");\n            }\n          },\n          error:function(result,text){\n            $(\"#error\").text(\"服务器发生错误\");\n          }\n        });\n      }\n\n    });\n  });\n\n\n\n\n</script>\n  </body>\n  </html>\n","date":"2019-04-08T08:29:32.187Z","updated":"2019-04-08T08:29:17.856Z","path":"reset-1.html","title":"","comments":1,"layout":"page","_id":"cjutuhpc50001ifin6ncxr8iu","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n<div class=\"container\">\n\n  <h3>重置密码</h3>\n  <hr>\n\n  <form class=\"form-horizontal form login-form\" name=\"resetform\">\n    <!-- <legend>重置密码</legend> -->\n\n    <div class=\"alert\" style=\"display:none\" id=\"error\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputEmail\">新密码</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"新密码\" name=\"password\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputPassword\">重新输入</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"新密码\" name=\"password1\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"reset\">重置</button>\n      </div>\n    </div>\n\n  </form>\n\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  //获得token\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  $(function(){\n    $(\"#reset\").click(function(){\n      var p = $(\"[name=password]\");\n      var p1 = $(\"[name=password1]\");\n      if(p.val()!=p1.val()){\n        $(\"#error\").show();\n        $(\"#error\").text(\"两次输入不一致\");//密码输入不一致提示\n      }\n      if(p.val()&&p1.val()&&p.val()==p1.val()){\n        $.jsonp({\n          url:\"/1/resetPassword/\"+token,//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/resetPassword/\"\n          data:{\"password\":p.val()},\n          callbackParameter: \"callback\",\n          cache: false,\n          success:function(result){\n            $(\"#error\").show();//成功和失败都会有提示信息, 共用 #error\n            if(result.error){\n              $(\"#error\").text(result.error);\n            }else{\n              $(\"#error\").text(\"密码重置成功\");\n            }\n          },\n          error:function(result,text){\n            $(\"#error\").text(\"服务器发生错误\");\n          }\n        });\n      }\n\n    });\n  });\n\n\n\n\n</script>\n  </body>\n  </html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n<div class=\"container\">\n\n  <h3>重置密码</h3>\n  <hr>\n\n  <form class=\"form-horizontal form login-form\" name=\"resetform\">\n    <!-- <legend>重置密码</legend> -->\n\n    <div class=\"alert\" style=\"display:none\" id=\"error\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputEmail\">新密码</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"新密码\" name=\"password\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputPassword\">重新输入</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"新密码\" name=\"password1\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"reset\">重置</button>\n      </div>\n    </div>\n\n  </form>\n\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  //获得token\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  $(function(){\n    $(\"#reset\").click(function(){\n      var p = $(\"[name=password]\");\n      var p1 = $(\"[name=password1]\");\n      if(p.val()!=p1.val()){\n        $(\"#error\").show();\n        $(\"#error\").text(\"两次输入不一致\");//密码输入不一致提示\n      }\n      if(p.val()&&p1.val()&&p.val()==p1.val()){\n        $.jsonp({\n          url:\"/1/resetPassword/\"+token,//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/resetPassword/\"\n          data:{\"password\":p.val()},\n          callbackParameter: \"callback\",\n          cache: false,\n          success:function(result){\n            $(\"#error\").show();//成功和失败都会有提示信息, 共用 #error\n            if(result.error){\n              $(\"#error\").text(result.error);\n            }else{\n              $(\"#error\").text(\"密码重置成功\");\n            }\n          },\n          error:function(result,text){\n            $(\"#error\").text(\"服务器发生错误\");\n          }\n        });\n      }\n\n    });\n  });\n\n\n\n\n</script>\n  </body>\n  </html>\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n<div class=\"container\">\n\n  <h3>重置密码</h3>\n  <hr>\n\n  <form class=\"form-horizontal form login-form\" name=\"resetform\" >\n    <!-- <legend>重置密码</legend> -->\n\n    <div class=\"alert\" style=\"display:none\" id=\"error\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputEmail\" >新密码</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"新密码\" name=\"password\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputPassword\" >重新输入</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"新密码\"  name=\"password1\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"reset\">重置</button>\n      </div>\n    </div>\n\n  </form>\n\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  //获得token\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  $(function(){\n    $(\"#reset\").click(function(){\n      var p = $(\"[name=password]\");\n      var p1 = $(\"[name=password1]\");\n      if(p.val()!=p1.val()){\n        $(\"#error\").show();\n        $(\"#error\").text(\"两次输入不一致\");//密码输入不一致提示\n      }\n      if(p.val()&&p1.val()&&p.val()==p1.val()){\n        $.jsonp({\n          url:\"/1/resetPassword/\"+token,//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/resetPassword/\"\n          data:{\"password\":p.val()},\n          callbackParameter: \"callback\",\n          cache: false,\n          success:function(result){\n            $(\"#error\").show();//成功和失败都会有提示信息, 共用 #error\n            if(result.error){\n              $(\"#error\").text(result.error);\n            }else{\n              $(\"#error\").text(\"密码重置成功\");\n            }\n          },\n          error:function(result,text){\n            $(\"#error\").text(\"服务器发生错误\");\n          }\n        });\n      }\n\n    });\n  });\n\n\n\n\n</script>\n  </body>\n  </html>\n","source":"reset.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n<div class=\"container\">\n\n  <h3>重置密码</h3>\n  <hr>\n\n  <form class=\"form-horizontal form login-form\" name=\"resetform\" >\n    <!-- <legend>重置密码</legend> -->\n\n    <div class=\"alert\" style=\"display:none\" id=\"error\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputEmail\" >新密码</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"新密码\" name=\"password\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputPassword\" >重新输入</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"新密码\"  name=\"password1\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"reset\">重置</button>\n      </div>\n    </div>\n\n  </form>\n\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  //获得token\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  $(function(){\n    $(\"#reset\").click(function(){\n      var p = $(\"[name=password]\");\n      var p1 = $(\"[name=password1]\");\n      if(p.val()!=p1.val()){\n        $(\"#error\").show();\n        $(\"#error\").text(\"两次输入不一致\");//密码输入不一致提示\n      }\n      if(p.val()&&p1.val()&&p.val()==p1.val()){\n        $.jsonp({\n          url:\"/1/resetPassword/\"+token,//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/resetPassword/\"\n          data:{\"password\":p.val()},\n          callbackParameter: \"callback\",\n          cache: false,\n          success:function(result){\n            $(\"#error\").show();//成功和失败都会有提示信息, 共用 #error\n            if(result.error){\n              $(\"#error\").text(result.error);\n            }else{\n              $(\"#error\").text(\"密码重置成功\");\n            }\n          },\n          error:function(result,text){\n            $(\"#error\").text(\"服务器发生错误\");\n          }\n        });\n      }\n\n    });\n  });\n\n\n\n\n</script>\n  </body>\n  </html>\n","date":"2019-04-08T08:23:24.016Z","updated":"2019-04-08T08:22:41.119Z","path":"reset.html","title":"","comments":1,"layout":"page","_id":"cjutuhpc70002ifinymsa0b67","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n<div class=\"container\">\n\n  <h3>重置密码</h3>\n  <hr>\n\n  <form class=\"form-horizontal form login-form\" name=\"resetform\">\n    <!-- <legend>重置密码</legend> -->\n\n    <div class=\"alert\" style=\"display:none\" id=\"error\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputEmail\">新密码</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"新密码\" name=\"password\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputPassword\">重新输入</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"新密码\" name=\"password1\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"reset\">重置</button>\n      </div>\n    </div>\n\n  </form>\n\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  //获得token\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  $(function(){\n    $(\"#reset\").click(function(){\n      var p = $(\"[name=password]\");\n      var p1 = $(\"[name=password1]\");\n      if(p.val()!=p1.val()){\n        $(\"#error\").show();\n        $(\"#error\").text(\"两次输入不一致\");//密码输入不一致提示\n      }\n      if(p.val()&&p1.val()&&p.val()==p1.val()){\n        $.jsonp({\n          url:\"/1/resetPassword/\"+token,//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/resetPassword/\"\n          data:{\"password\":p.val()},\n          callbackParameter: \"callback\",\n          cache: false,\n          success:function(result){\n            $(\"#error\").show();//成功和失败都会有提示信息, 共用 #error\n            if(result.error){\n              $(\"#error\").text(result.error);\n            }else{\n              $(\"#error\").text(\"密码重置成功\");\n            }\n          },\n          error:function(result,text){\n            $(\"#error\").text(\"服务器发生错误\");\n          }\n        });\n      }\n\n    });\n  });\n\n\n\n\n</script>\n  </body>\n  </html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n<div class=\"container\">\n\n  <h3>重置密码</h3>\n  <hr>\n\n  <form class=\"form-horizontal form login-form\" name=\"resetform\">\n    <!-- <legend>重置密码</legend> -->\n\n    <div class=\"alert\" style=\"display:none\" id=\"error\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputEmail\">新密码</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"新密码\" name=\"password\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"col-sm-2 control-label\" for=\"inputPassword\">重新输入</label>\n      <div class=\"col-sm-4\">\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"新密码\" name=\"password1\" required>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"reset\">重置</button>\n      </div>\n    </div>\n\n  </form>\n\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  //获得token\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  $(function(){\n    $(\"#reset\").click(function(){\n      var p = $(\"[name=password]\");\n      var p1 = $(\"[name=password1]\");\n      if(p.val()!=p1.val()){\n        $(\"#error\").show();\n        $(\"#error\").text(\"两次输入不一致\");//密码输入不一致提示\n      }\n      if(p.val()&&p1.val()&&p.val()==p1.val()){\n        $.jsonp({\n          url:\"/1/resetPassword/\"+token,//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/resetPassword/\"\n          data:{\"password\":p.val()},\n          callbackParameter: \"callback\",\n          cache: false,\n          success:function(result){\n            $(\"#error\").show();//成功和失败都会有提示信息, 共用 #error\n            if(result.error){\n              $(\"#error\").text(result.error);\n            }else{\n              $(\"#error\").text(\"密码重置成功\");\n            }\n          },\n          error:function(result,text){\n            $(\"#error\").text(\"服务器发生错误\");\n          }\n        });\n      }\n\n    });\n  });\n\n\n\n\n</script>\n  </body>\n  </html>\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n    h3 {\n      text-align: center;\n      margin-top: 50px;\n      font-weight: normal;\n    }\n    </style>\n  </head>\n  <body>\n\n<div class=\" container\">\n   <h3 id=\"tip\" style=\"display:none\"></h3>\n   <!-- <h3 id=\"tip\">Test</h3> -->\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  var url = \"/1/verifyEmail/\";//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/verifyEmail/\"\n  var tip_err =\"邮箱验证出错\"; //邮箱验证出错提示\n  var tip_success =\"邮箱验证成功\";//邮箱验证成功提示\n  function getParam() {\n    var prmstr = window.location.search.substr(1);\n    var prmarr = prmstr.split(\"&\");\n    var params = {};\n\n    for (var i = 0; i < prmarr.length; i++) {\n      var tmparr = prmarr[i].split(\"=\");\n      params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n  }\n\n  //获得token,以验证邮件合法性\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  function verify(){\n    if(!token){\n      return;\n    }\n    $.jsonp({\n        url:url+token,\n        callbackParameter: \"callback\",\n        cache: false,\n        success:function(result){\n          $(\"#tip\").show();\n          if(result.error){\n            $(\"#tip\").text(result.error);\n          }else{\n            $(\"#tip\").html(tip_success);\n          }\n        },\n        error:function(result,text){\n          $(\"#tip\").text(\"服务器发生错误\");\n        }\n      });\n  }\n\n  $(function(){\n    verify();\n  })\n\n</script>\n\n  </body>\n  </html>\n","source":"verify-1.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n    h3 {\n      text-align: center;\n      margin-top: 50px;\n      font-weight: normal;\n    }\n    </style>\n  </head>\n  <body>\n\n<div class=\" container\">\n   <h3 id=\"tip\" style=\"display:none\"></h3>\n   <!-- <h3 id=\"tip\">Test</h3> -->\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  var url = \"/1/verifyEmail/\";//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/verifyEmail/\"\n  var tip_err =\"邮箱验证出错\"; //邮箱验证出错提示\n  var tip_success =\"邮箱验证成功\";//邮箱验证成功提示\n  function getParam() {\n    var prmstr = window.location.search.substr(1);\n    var prmarr = prmstr.split(\"&\");\n    var params = {};\n\n    for (var i = 0; i < prmarr.length; i++) {\n      var tmparr = prmarr[i].split(\"=\");\n      params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n  }\n\n  //获得token,以验证邮件合法性\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  function verify(){\n    if(!token){\n      return;\n    }\n    $.jsonp({\n        url:url+token,\n        callbackParameter: \"callback\",\n        cache: false,\n        success:function(result){\n          $(\"#tip\").show();\n          if(result.error){\n            $(\"#tip\").text(result.error);\n          }else{\n            $(\"#tip\").html(tip_success);\n          }\n        },\n        error:function(result,text){\n          $(\"#tip\").text(\"服务器发生错误\");\n        }\n      });\n  }\n\n  $(function(){\n    verify();\n  })\n\n</script>\n\n  </body>\n  </html>\n","date":"2019-04-08T08:29:22.964Z","updated":"2019-04-08T08:28:57.744Z","path":"verify-1.html","title":"","comments":1,"layout":"page","_id":"cjutuhpc80003ifinkgzv62vg","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n    h3 {\n      text-align: center;\n      margin-top: 50px;\n      font-weight: normal;\n    }\n    </style>\n  </head>\n  <body>\n\n<div class=\" container\">\n   <h3 id=\"tip\" style=\"display:none\"></h3>\n   <!-- <h3 id=\"tip\">Test</h3> -->\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  var url = \"/1/verifyEmail/\";//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/verifyEmail/\"\n  var tip_err =\"邮箱验证出错\"; //邮箱验证出错提示\n  var tip_success =\"邮箱验证成功\";//邮箱验证成功提示\n  function getParam() {\n    var prmstr = window.location.search.substr(1);\n    var prmarr = prmstr.split(\"&\");\n    var params = {};\n\n    for (var i = 0; i < prmarr.length; i++) {\n      var tmparr = prmarr[i].split(\"=\");\n      params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n  }\n\n  //获得token,以验证邮件合法性\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  function verify(){\n    if(!token){\n      return;\n    }\n    $.jsonp({\n        url:url+token,\n        callbackParameter: \"callback\",\n        cache: false,\n        success:function(result){\n          $(\"#tip\").show();\n          if(result.error){\n            $(\"#tip\").text(result.error);\n          }else{\n            $(\"#tip\").html(tip_success);\n          }\n        },\n        error:function(result,text){\n          $(\"#tip\").text(\"服务器发生错误\");\n        }\n      });\n  }\n\n  $(function(){\n    verify();\n  })\n\n</script>\n\n  </body>\n  </html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n    h3 {\n      text-align: center;\n      margin-top: 50px;\n      font-weight: normal;\n    }\n    </style>\n  </head>\n  <body>\n\n<div class=\" container\">\n   <h3 id=\"tip\" style=\"display:none\"></h3>\n   <!-- <h3 id=\"tip\">Test</h3> -->\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  var url = \"/1/verifyEmail/\";//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/verifyEmail/\"\n  var tip_err =\"邮箱验证出错\"; //邮箱验证出错提示\n  var tip_success =\"邮箱验证成功\";//邮箱验证成功提示\n  function getParam() {\n    var prmstr = window.location.search.substr(1);\n    var prmarr = prmstr.split(\"&\");\n    var params = {};\n\n    for (var i = 0; i < prmarr.length; i++) {\n      var tmparr = prmarr[i].split(\"=\");\n      params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n  }\n\n  //获得token,以验证邮件合法性\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  function verify(){\n    if(!token){\n      return;\n    }\n    $.jsonp({\n        url:url+token,\n        callbackParameter: \"callback\",\n        cache: false,\n        success:function(result){\n          $(\"#tip\").show();\n          if(result.error){\n            $(\"#tip\").text(result.error);\n          }else{\n            $(\"#tip\").html(tip_success);\n          }\n        },\n        error:function(result,text){\n          $(\"#tip\").text(\"服务器发生错误\");\n        }\n      });\n  }\n\n  $(function(){\n    verify();\n  })\n\n</script>\n\n  </body>\n  </html>\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n    h3 {\n      text-align: center;\n      margin-top: 50px;\n      font-weight: normal;\n    }\n    </style>\n  </head>\n  <body>\n\n<div class=\" container\">\n   <h3 id=\"tip\" style=\"display:none\"></h3>\n   <!-- <h3 id=\"tip\">Test</h3> -->\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  var url = \"/1/verifyEmail/\";//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/verifyEmail/\"\n  var tip_err =\"邮箱验证出错\"; //邮箱验证出错提示\n  var tip_success =\"邮箱验证成功\";//邮箱验证成功提示\n  function getParam() {\n    var prmstr = window.location.search.substr(1);\n    var prmarr = prmstr.split(\"&\");\n    var params = {};\n\n    for (var i = 0; i < prmarr.length; i++) {\n      var tmparr = prmarr[i].split(\"=\");\n      params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n  }\n\n  //获得token,以验证邮件合法性\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  function verify(){\n    if(!token){\n      return;\n    }\n    $.jsonp({\n        url:url+token,\n        callbackParameter: \"callback\",\n        cache: false,\n        success:function(result){\n          $(\"#tip\").show();\n          if(result.error){\n            $(\"#tip\").text(result.error);\n          }else{\n            $(\"#tip\").html(tip_success);\n          }\n        },\n        error:function(result,text){\n          $(\"#tip\").text(\"服务器发生错误\");\n        }\n      });\n  }\n\n  $(function(){\n    verify();\n  })\n\n</script>\n\n  </body>\n  </html>\n","source":"verify.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n    h3 {\n      text-align: center;\n      margin-top: 50px;\n      font-weight: normal;\n    }\n    </style>\n  </head>\n  <body>\n\n<div class=\" container\">\n   <h3 id=\"tip\" style=\"display:none\"></h3>\n   <!-- <h3 id=\"tip\">Test</h3> -->\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  var url = \"/1/verifyEmail/\";//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/verifyEmail/\"\n  var tip_err =\"邮箱验证出错\"; //邮箱验证出错提示\n  var tip_success =\"邮箱验证成功\";//邮箱验证成功提示\n  function getParam() {\n    var prmstr = window.location.search.substr(1);\n    var prmarr = prmstr.split(\"&\");\n    var params = {};\n\n    for (var i = 0; i < prmarr.length; i++) {\n      var tmparr = prmarr[i].split(\"=\");\n      params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n  }\n\n  //获得token,以验证邮件合法性\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  function verify(){\n    if(!token){\n      return;\n    }\n    $.jsonp({\n        url:url+token,\n        callbackParameter: \"callback\",\n        cache: false,\n        success:function(result){\n          $(\"#tip\").show();\n          if(result.error){\n            $(\"#tip\").text(result.error);\n          }else{\n            $(\"#tip\").html(tip_success);\n          }\n        },\n        error:function(result,text){\n          $(\"#tip\").text(\"服务器发生错误\");\n        }\n      });\n  }\n\n  $(function(){\n    verify();\n  })\n\n</script>\n\n  </body>\n  </html>\n","date":"2019-04-08T08:22:44.775Z","updated":"2019-04-08T08:22:33.139Z","path":"verify.html","title":"","comments":1,"layout":"page","_id":"cjutuhpca0004ifinr50jx6g7","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n    h3 {\n      text-align: center;\n      margin-top: 50px;\n      font-weight: normal;\n    }\n    </style>\n  </head>\n  <body>\n\n<div class=\" container\">\n   <h3 id=\"tip\" style=\"display:none\"></h3>\n   <!-- <h3 id=\"tip\">Test</h3> -->\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  var url = \"/1/verifyEmail/\";//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/verifyEmail/\"\n  var tip_err =\"邮箱验证出错\"; //邮箱验证出错提示\n  var tip_success =\"邮箱验证成功\";//邮箱验证成功提示\n  function getParam() {\n    var prmstr = window.location.search.substr(1);\n    var prmarr = prmstr.split(\"&\");\n    var params = {};\n\n    for (var i = 0; i < prmarr.length; i++) {\n      var tmparr = prmarr[i].split(\"=\");\n      params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n  }\n\n  //获得token,以验证邮件合法性\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  function verify(){\n    if(!token){\n      return;\n    }\n    $.jsonp({\n        url:url+token,\n        callbackParameter: \"callback\",\n        cache: false,\n        success:function(result){\n          $(\"#tip\").show();\n          if(result.error){\n            $(\"#tip\").text(result.error);\n          }else{\n            $(\"#tip\").html(tip_success);\n          }\n        },\n        error:function(result,text){\n          $(\"#tip\").text(\"服务器发生错误\");\n        }\n      });\n  }\n\n  $(function(){\n    verify();\n  })\n\n</script>\n\n  </body>\n  </html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"utf-8\">\n    <title>LeanCloud</title>\n    <link href=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n    h3 {\n      text-align: center;\n      margin-top: 50px;\n      font-weight: normal;\n    }\n    </style>\n  </head>\n  <body>\n\n<div class=\" container\">\n   <h3 id=\"tip\" style=\"display:none\"></h3>\n   <!-- <h3 id=\"tip\">Test</h3> -->\n\n\n\n</div><!--end container-->\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.min.js\"></script>\n<script src=\"https://lc-avoscloud.cn-n1.lcfile.com/statics/jquery.jsonp.js\"></script>\n\n<script type=\"text/javascript\">\n  var url = \"/1/verifyEmail/\";//如果页面运行在自己的服务器，需要写定一个绝对 URL,类似 \"https://api.leancloud.cn/1.1/verifyEmail/\"\n  var tip_err =\"邮箱验证出错\"; //邮箱验证出错提示\n  var tip_success =\"邮箱验证成功\";//邮箱验证成功提示\n  function getParam() {\n    var prmstr = window.location.search.substr(1);\n    var prmarr = prmstr.split(\"&\");\n    var params = {};\n\n    for (var i = 0; i < prmarr.length; i++) {\n      var tmparr = prmarr[i].split(\"=\");\n      params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n  }\n\n  //获得token,以验证邮件合法性\n  var token = location.search.match(/token=(\\w*)/);\n  if(token&&token[1]){\n    token = token[1];\n  }\n  function verify(){\n    if(!token){\n      return;\n    }\n    $.jsonp({\n        url:url+token,\n        callbackParameter: \"callback\",\n        cache: false,\n        success:function(result){\n          $(\"#tip\").show();\n          if(result.error){\n            $(\"#tip\").text(result.error);\n          }else{\n            $(\"#tip\").html(tip_success);\n          }\n        },\n        error:function(result,text){\n          $(\"#tip\").text(\"服务器发生错误\");\n        }\n      });\n  }\n\n  $(function(){\n    verify();\n  })\n\n</script>\n\n  </body>\n  </html>\n"},{"_content":"W1hQJrC8Kt","source":"images/baidu_verify_W1hQJrC8Kt.html","raw":"W1hQJrC8Kt","date":"2019-04-04T01:43:46.416Z","updated":"2019-04-04T01:43:43.677Z","path":"images/baidu_verify_W1hQJrC8Kt.html","title":"","comments":1,"layout":"page","_id":"cjutuhpds0006ifinao416wh1","content":"W1hQJrC8Kt","site":{"data":{}},"excerpt":"","more":"W1hQJrC8Kt"}],"Post":[{"layout":"post","title":"Chvt-N","date":"2018-05-03T04:00:00.000Z","_content":"\n* 在deepin中\n\n|命令|效果|备注|\n|----------|-------|------------|\n|`chvt 1`|进入锁屏|这个界面可以用screenshot.sh截屏，截到的是锁屏界面，而以下几个截到的都是黑屏|\n<!-- more -->\n|`chvt 2`|隐藏任务栏||\n|`chvt 3-5`|进入命令行模式||\n|`chvt 6`|进入桌面|这个状态下截到的也是黑屏，不知道为啥|\n\n* 在ubuntu中\n\n|命令|效果|备注|\n|----------|-------------|----------|\n|`chvt 1-6`|进入命令行模式||\n|`chvt 7`|进入桌面|`chvt 7` 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）|\n\n![image](/images/screenshot1.png)\n\n`screenshot.sh`代码如下\n```shell\n#!/bin/sh\nchvt 1; #在ubuntu中为 chvt 7;\nsleep 5s;\nDISPLAY=:0 XAUTHORITY=/var/run/lightdm/root/:0 xwd -root -out ~/screenshot.xwd;\n\nconvert ~/screenshot.xwd /home/wmj/screenshot_$(date +%Y%m%d%H%M%S).png;\nrm ~/screenshot.xwd\n```\n\n并且，在deepin中，执行`screenshot.sh`需要```sudo /bin/sh screenshot.sh```\n而在ubuntu中只需要`/bin/sh screenshot.sh`就可以了。\n\n好吧，刚刚又发现，在deepin中需要sudo应该是权限不够。所以chmod改了权限后，就不用sudo了。\n但是截到的图依然不好，如下所示:\n\n![screenshot2](/images/screenshot2.png)\n\n\n为了保持可读性，上面的表格就放着（因为我之前操作确实是那样，也许deepin还在持续修改中，今天更新系统后，效果就变成下面的情况了），现在（2018-05-03-21-38）的效果如下表格所示：\n\n* 在deepin中\n\n|命令|效果|备注|\n|----------|-------|------------|\n|`chvt 1`|进入桌面|:0应该就是表示桌面|\n|`chvt 2-6`|进入命令行模式||\n\n![screenshot3](/images/screenshot3.png)\n* 在ubuntu中\n\n|命令|效果|备注|\n|----------|-------------|----------|\n|`chvt 1-6`|进入命令行模式||\n|`chvt 7`|进入桌面|`chvt 7` 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）|\n\n\n另外，目前我的deepin image viewer不能用。希望deepin越变越好。\n","source":"_posts/2018-05-03-chvt.md","raw":"---\nlayout: post\ntitle: chvt-N\ndate: 2018-05-03 12:00:00\ntags: [Deepin, Linux]\n\n---\n\n* 在deepin中\n\n|命令|效果|备注|\n|----------|-------|------------|\n|`chvt 1`|进入锁屏|这个界面可以用screenshot.sh截屏，截到的是锁屏界面，而以下几个截到的都是黑屏|\n<!-- more -->\n|`chvt 2`|隐藏任务栏||\n|`chvt 3-5`|进入命令行模式||\n|`chvt 6`|进入桌面|这个状态下截到的也是黑屏，不知道为啥|\n\n* 在ubuntu中\n\n|命令|效果|备注|\n|----------|-------------|----------|\n|`chvt 1-6`|进入命令行模式||\n|`chvt 7`|进入桌面|`chvt 7` 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）|\n\n![image](/images/screenshot1.png)\n\n`screenshot.sh`代码如下\n```shell\n#!/bin/sh\nchvt 1; #在ubuntu中为 chvt 7;\nsleep 5s;\nDISPLAY=:0 XAUTHORITY=/var/run/lightdm/root/:0 xwd -root -out ~/screenshot.xwd;\n\nconvert ~/screenshot.xwd /home/wmj/screenshot_$(date +%Y%m%d%H%M%S).png;\nrm ~/screenshot.xwd\n```\n\n并且，在deepin中，执行`screenshot.sh`需要```sudo /bin/sh screenshot.sh```\n而在ubuntu中只需要`/bin/sh screenshot.sh`就可以了。\n\n好吧，刚刚又发现，在deepin中需要sudo应该是权限不够。所以chmod改了权限后，就不用sudo了。\n但是截到的图依然不好，如下所示:\n\n![screenshot2](/images/screenshot2.png)\n\n\n为了保持可读性，上面的表格就放着（因为我之前操作确实是那样，也许deepin还在持续修改中，今天更新系统后，效果就变成下面的情况了），现在（2018-05-03-21-38）的效果如下表格所示：\n\n* 在deepin中\n\n|命令|效果|备注|\n|----------|-------|------------|\n|`chvt 1`|进入桌面|:0应该就是表示桌面|\n|`chvt 2-6`|进入命令行模式||\n\n![screenshot3](/images/screenshot3.png)\n* 在ubuntu中\n\n|命令|效果|备注|\n|----------|-------------|----------|\n|`chvt 1-6`|进入命令行模式||\n|`chvt 7`|进入桌面|`chvt 7` 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）|\n\n\n另外，目前我的deepin image viewer不能用。希望deepin越变越好。\n","slug":"chvt","published":1,"updated":"2019-03-29T08:16:59.989Z","comments":1,"photos":[],"link":"","_id":"cjutuhpdk0005ifin11dduon9","content":"<ul>\n<li>在deepin中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chvt 1</code></td>\n<td>进入锁屏</td>\n<td>这个界面可以用screenshot.sh截屏，截到的是锁屏界面，而以下几个截到的都是黑屏</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<p>|<code>chvt 2</code>|隐藏任务栏||<br>|<code>chvt 3-5</code>|进入命令行模式||<br>|<code>chvt 6</code>|进入桌面|这个状态下截到的也是黑屏，不知道为啥|</p>\n<ul>\n<li>在ubuntu中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chvt 1-6</code></td>\n<td>进入命令行模式</td>\n<td></td>\n</tr>\n<tr>\n<td><code>chvt 7</code></td>\n<td>进入桌面</td>\n<td><code>chvt 7</code> 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/images/screenshot1.png\" alt=\"image\"></p>\n<p><code>screenshot.sh</code>代码如下<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\">chvt 1; #在ubuntu中为 chvt 7;</span><br><span class=\"line\">sleep 5s;</span><br><span class=\"line\">DISPLAY=:0 XAUTHORITY=/var/run/lightdm/root/:0 xwd -root -out ~/screenshot.xwd;</span><br><span class=\"line\"></span><br><span class=\"line\">convert ~/screenshot.xwd /home/wmj/screenshot_$(date +%Y%m%d%H%M%S).png;</span><br><span class=\"line\">rm ~/screenshot.xwd</span><br></pre></td></tr></table></figure></p>\n<p>并且，在deepin中，执行<code>screenshot.sh</code>需要<code>sudo /bin/sh screenshot.sh</code><br>而在ubuntu中只需要<code>/bin/sh screenshot.sh</code>就可以了。</p>\n<p>好吧，刚刚又发现，在deepin中需要sudo应该是权限不够。所以chmod改了权限后，就不用sudo了。<br>但是截到的图依然不好，如下所示:</p>\n<p><img src=\"/images/screenshot2.png\" alt=\"screenshot2\"></p>\n<p>为了保持可读性，上面的表格就放着（因为我之前操作确实是那样，也许deepin还在持续修改中，今天更新系统后，效果就变成下面的情况了），现在（2018-05-03-21-38）的效果如下表格所示：</p>\n<ul>\n<li>在deepin中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chvt 1</code></td>\n<td>进入桌面</td>\n<td>:0应该就是表示桌面</td>\n</tr>\n<tr>\n<td><code>chvt 2-6</code></td>\n<td>进入命令行模式</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/images/screenshot3.png\" alt=\"screenshot3\"></p>\n<ul>\n<li>在ubuntu中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chvt 1-6</code></td>\n<td>进入命令行模式</td>\n<td></td>\n</tr>\n<tr>\n<td><code>chvt 7</code></td>\n<td>进入桌面</td>\n<td><code>chvt 7</code> 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）</td>\n</tr>\n</tbody>\n</table>\n<p>另外，目前我的deepin image viewer不能用。希望deepin越变越好。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>在deepin中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chvt 1</code></td>\n<td>进入锁屏</td>\n<td>这个界面可以用screenshot.sh截屏，截到的是锁屏界面，而以下几个截到的都是黑屏</td>\n</tr>\n</tbody>\n</table>","more":"<p>|<code>chvt 2</code>|隐藏任务栏||<br>|<code>chvt 3-5</code>|进入命令行模式||<br>|<code>chvt 6</code>|进入桌面|这个状态下截到的也是黑屏，不知道为啥|</p>\n<ul>\n<li>在ubuntu中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chvt 1-6</code></td>\n<td>进入命令行模式</td>\n<td></td>\n</tr>\n<tr>\n<td><code>chvt 7</code></td>\n<td>进入桌面</td>\n<td><code>chvt 7</code> 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/images/screenshot1.png\" alt=\"image\"></p>\n<p><code>screenshot.sh</code>代码如下<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\">chvt 1; #在ubuntu中为 chvt 7;</span><br><span class=\"line\">sleep 5s;</span><br><span class=\"line\">DISPLAY=:0 XAUTHORITY=/var/run/lightdm/root/:0 xwd -root -out ~/screenshot.xwd;</span><br><span class=\"line\"></span><br><span class=\"line\">convert ~/screenshot.xwd /home/wmj/screenshot_$(date +%Y%m%d%H%M%S).png;</span><br><span class=\"line\">rm ~/screenshot.xwd</span><br></pre></td></tr></table></figure></p>\n<p>并且，在deepin中，执行<code>screenshot.sh</code>需要<code>sudo /bin/sh screenshot.sh</code><br>而在ubuntu中只需要<code>/bin/sh screenshot.sh</code>就可以了。</p>\n<p>好吧，刚刚又发现，在deepin中需要sudo应该是权限不够。所以chmod改了权限后，就不用sudo了。<br>但是截到的图依然不好，如下所示:</p>\n<p><img src=\"/images/screenshot2.png\" alt=\"screenshot2\"></p>\n<p>为了保持可读性，上面的表格就放着（因为我之前操作确实是那样，也许deepin还在持续修改中，今天更新系统后，效果就变成下面的情况了），现在（2018-05-03-21-38）的效果如下表格所示：</p>\n<ul>\n<li>在deepin中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chvt 1</code></td>\n<td>进入桌面</td>\n<td>:0应该就是表示桌面</td>\n</tr>\n<tr>\n<td><code>chvt 2-6</code></td>\n<td>进入命令行模式</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/images/screenshot3.png\" alt=\"screenshot3\"></p>\n<ul>\n<li>在ubuntu中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chvt 1-6</code></td>\n<td>进入命令行模式</td>\n<td></td>\n</tr>\n<tr>\n<td><code>chvt 7</code></td>\n<td>进入桌面</td>\n<td><code>chvt 7</code> 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）</td>\n</tr>\n</tbody>\n</table>\n<p>另外，目前我的deepin image viewer不能用。希望deepin越变越好。</p>"},{"layout":"post","title":"学习爬虫 & Linux登录页面截屏","date":"2018-05-01T04:00:00.000Z","_content":"\n想学爬虫，在知乎上看了帖子，然后不少人都建议用scrapy，就学习了一下，几经周折例子总算运行成功，但还是有点不太懂。\n\n还有一个事，之前在网上找了一个给登录界面截屏(因为在锁屏状态，快捷键截屏无效)的脚本，在ubuntu上可以运行，一开始在deepin上也可以运行，但后来就不行了，不知道是不是更新了系统的原因。看来还是有问题。程序一运行，图形界面就黑屏了，也不报错，开始还会嘀一声，后来也没有什么声音了。不知道为什么。同样的程序在ubuntu上运行一点事没有啊。\n\n真搞不懂。\n<!-- more -->\n\t\n也怪我技术太差，很小的问题都要半天才弄懂。要多花时间学技术啊。\n","source":"_posts/2018-05-01-学习爬虫.md","raw":"---\nlayout: post\ntitle: 学习爬虫 & linux登录页面截屏\ndate: 2018-05-01 12:00:00\ntags: [爬虫, 技术]\n\n---\n\n想学爬虫，在知乎上看了帖子，然后不少人都建议用scrapy，就学习了一下，几经周折例子总算运行成功，但还是有点不太懂。\n\n还有一个事，之前在网上找了一个给登录界面截屏(因为在锁屏状态，快捷键截屏无效)的脚本，在ubuntu上可以运行，一开始在deepin上也可以运行，但后来就不行了，不知道是不是更新了系统的原因。看来还是有问题。程序一运行，图形界面就黑屏了，也不报错，开始还会嘀一声，后来也没有什么声音了。不知道为什么。同样的程序在ubuntu上运行一点事没有啊。\n\n真搞不懂。\n<!-- more -->\n\t\n也怪我技术太差，很小的问题都要半天才弄懂。要多花时间学技术啊。\n","slug":"学习爬虫","published":1,"updated":"2019-04-10T00:56:26.443Z","comments":1,"photos":[],"link":"","_id":"cjutuhpdu0007ifin4shxk4sm","content":"<p>想学爬虫，在知乎上看了帖子，然后不少人都建议用scrapy，就学习了一下，几经周折例子总算运行成功，但还是有点不太懂。</p>\n<p>还有一个事，之前在网上找了一个给登录界面截屏(因为在锁屏状态，快捷键截屏无效)的脚本，在ubuntu上可以运行，一开始在deepin上也可以运行，但后来就不行了，不知道是不是更新了系统的原因。看来还是有问题。程序一运行，图形界面就黑屏了，也不报错，开始还会嘀一声，后来也没有什么声音了。不知道为什么。同样的程序在ubuntu上运行一点事没有啊。</p>\n<p>真搞不懂。<br><a id=\"more\"></a></p>\n<p>也怪我技术太差，很小的问题都要半天才弄懂。要多花时间学技术啊。</p>\n","site":{"data":{}},"excerpt":"<p>想学爬虫，在知乎上看了帖子，然后不少人都建议用scrapy，就学习了一下，几经周折例子总算运行成功，但还是有点不太懂。</p>\n<p>还有一个事，之前在网上找了一个给登录界面截屏(因为在锁屏状态，快捷键截屏无效)的脚本，在ubuntu上可以运行，一开始在deepin上也可以运行，但后来就不行了，不知道是不是更新了系统的原因。看来还是有问题。程序一运行，图形界面就黑屏了，也不报错，开始还会嘀一声，后来也没有什么声音了。不知道为什么。同样的程序在ubuntu上运行一点事没有啊。</p>\n<p>真搞不懂。<br>","more":"</p>\n<p>也怪我技术太差，很小的问题都要半天才弄懂。要多花时间学技术啊。</p>"},{"layout":"post","title":"Some Notes of 201804","date":"2018-04-10T16:00:00.000Z","_content":"\n一些笔记\n====\n\n# 2018.4.11\n\n<!-- more -->\n做了百度的笔试题，交了，也不知道结果会如何。\n好多题的答案都是网上找的，虽然我也做了测试和整合，但所做实在寥寥。\n真的有太多东西需要学习、复习、温习、练习了。\n\nfighting\n\n由于前段时间整理数据时的失误，上学期做的很多东西都没了，\n包括用Java做的JDBC导入数据和用MySQL对数据做的分析。\n今天尝试重写MySQL的部分，好难，回忆又回忆不起来，\n重新思考吧，又因为那个项目已经不做了，没有压力太难进入状态。\n这个只能先放放，先去做更重要的事情吧。\n\nGood night!\n\n****\n\n# 2018.4.13\n\n昨天老师们宣布接到个项目，接下来一个多月都得忙起来了，学习时间会更少。\n\n今天上午课间接到百度的电面，半个小时左右，表现一般。正好这期间老师点名了，回来后正好被他看到，被怼了几句，下课去解释了下，还好。这老师刀子嘴豆腐心吧。\n晚上是七牛的笔试，答的也一般，五道大题只答出两道，其中一道还没答全。\n\n接下来是今日头条、58以及晨星的笔试，抽空再复习下吧。不能都裸考。通过笔试和电面，也发现自己的知识很不牢固，以前会的都忘了。\n\n偶尔放松可以，不能玩物丧志。\n\nps:用这个不知道怎么排版呐，就这样先将就着吧。\n\n对了，兰马没有中签，意料之中，但天气转暖了，还是要跑步，锻炼身体。还有，少熬夜吧。\n\n****\n\n# 2018.4.17\n\n**转变思维**\n\n一直以来，虽然大部分时候我是用C++，可还是C的思维。虽然之前学了vector,map等数据结构，可很少用。刷题的时候，我总是首先想到用数组，或者写个函数，而没有想过用C++里已有的那些数据结构。\n\n还是要多写多用。vector,map,string。这样也可以加快解题速度，不然刷题太慢了。也要多看别人的代码，学习其中的解题思路和思维。\n\n****\n\n# 2018.4.19\n\n这两天咽炎复发，真难受。lz太干了，要多喝水。\n\n昨天晨星的笔试，题量有点大，没做完，又是最后两道编程题没做。事先该看一下题型的，应该捡分多的先做。\n\n* 总的来说，有三个方面需要加强。\n    * 1.基础知识（数据结构、操作系统、计算机组成、网络、SQL等基础知识）**这个要多看书和网上总结的资料**\n    * 2.算法和数据结构（线性表、链表、队列和栈、树、图以及各种排序等）**这个同上，还要把代码弄熟**\n    * 3.编程技巧（一些编程思想和工具的使用，如递归、栈、hash、动规以及C++里的vector、map等的应用）**这个要多刷题，并学习大神的解题方法**\n\nFighting\n****\n\n=======\n\n****\n\n# 2018.4.20\n\n热感冒完了是冷感冒。难受。\n\n昨天晚上做了爱奇艺的，没做完，今天晚上做了美团的，也没做完。还花了半小时做了知乎的。所以美团晚了半小时开始做，导致没做完。快手实在没办法，只能放弃了。为什么都赶到一块了呢。反正过去了。基础知识还是不牢，美团选择题里还有考到SVM的，虽然学过，可都忘光了。对了，我报的机器学习/数据挖掘岗。暂告一段落。\n还是要多看书。后面也许还有别的笔试，虽然可能性很小了，而且公司越来越少了。\n\n****\n\n# 2018.4.23\n\n今天又下雨，降温。病差不多好了，还要多注意点，添衣加衣喝水。时间过得太快了。\n\n昨天看了动态规划，今天做了几道题。感觉还行，但是难的题我依然想不出解法，只能参考别人的。慢慢来吧。LeetCode和牛客网的在线编程题都不错，上面有讨论，如果不会，可以参考大神们的代码。\n\n今天下午随便看了看linux和shell编程的东西。这块也很有用。\n\n时间很宝贵，要珍惜啊。\n\n顺便：实验室的项目都是做文字性的东西，也不能不做。尽量高效的去做吧，时间真的不多了。\n\n****\n\n# 2018.4.27\n\n快放假了。可是实验室还有任务，学习任务也很重。不能出去玩了。真没意思。\n\n最近装了个在虚拟机里装了个deepin，界面很漂亮，喜欢，想买个电脑了。在虚拟机里太卡了。唉，还是先提高技术吧。看着桌上还没翻过的书，真是亚历山大。\n\n所以列了个五月学习任务清单`task201805.md`。还是好好学习吧，其他的先不要想。\n\nps:有时间要跑步了，病都好了，别再偷懒。\n","source":"_posts/2018-04-11-WMJTXT.md","raw":"---\nlayout: post\ntitle: some notes of 201804\ndate: 2018-04-11\ntags: 随笔\n\n---\n\n一些笔记\n====\n\n# 2018.4.11\n\n<!-- more -->\n做了百度的笔试题，交了，也不知道结果会如何。\n好多题的答案都是网上找的，虽然我也做了测试和整合，但所做实在寥寥。\n真的有太多东西需要学习、复习、温习、练习了。\n\nfighting\n\n由于前段时间整理数据时的失误，上学期做的很多东西都没了，\n包括用Java做的JDBC导入数据和用MySQL对数据做的分析。\n今天尝试重写MySQL的部分，好难，回忆又回忆不起来，\n重新思考吧，又因为那个项目已经不做了，没有压力太难进入状态。\n这个只能先放放，先去做更重要的事情吧。\n\nGood night!\n\n****\n\n# 2018.4.13\n\n昨天老师们宣布接到个项目，接下来一个多月都得忙起来了，学习时间会更少。\n\n今天上午课间接到百度的电面，半个小时左右，表现一般。正好这期间老师点名了，回来后正好被他看到，被怼了几句，下课去解释了下，还好。这老师刀子嘴豆腐心吧。\n晚上是七牛的笔试，答的也一般，五道大题只答出两道，其中一道还没答全。\n\n接下来是今日头条、58以及晨星的笔试，抽空再复习下吧。不能都裸考。通过笔试和电面，也发现自己的知识很不牢固，以前会的都忘了。\n\n偶尔放松可以，不能玩物丧志。\n\nps:用这个不知道怎么排版呐，就这样先将就着吧。\n\n对了，兰马没有中签，意料之中，但天气转暖了，还是要跑步，锻炼身体。还有，少熬夜吧。\n\n****\n\n# 2018.4.17\n\n**转变思维**\n\n一直以来，虽然大部分时候我是用C++，可还是C的思维。虽然之前学了vector,map等数据结构，可很少用。刷题的时候，我总是首先想到用数组，或者写个函数，而没有想过用C++里已有的那些数据结构。\n\n还是要多写多用。vector,map,string。这样也可以加快解题速度，不然刷题太慢了。也要多看别人的代码，学习其中的解题思路和思维。\n\n****\n\n# 2018.4.19\n\n这两天咽炎复发，真难受。lz太干了，要多喝水。\n\n昨天晨星的笔试，题量有点大，没做完，又是最后两道编程题没做。事先该看一下题型的，应该捡分多的先做。\n\n* 总的来说，有三个方面需要加强。\n    * 1.基础知识（数据结构、操作系统、计算机组成、网络、SQL等基础知识）**这个要多看书和网上总结的资料**\n    * 2.算法和数据结构（线性表、链表、队列和栈、树、图以及各种排序等）**这个同上，还要把代码弄熟**\n    * 3.编程技巧（一些编程思想和工具的使用，如递归、栈、hash、动规以及C++里的vector、map等的应用）**这个要多刷题，并学习大神的解题方法**\n\nFighting\n****\n\n=======\n\n****\n\n# 2018.4.20\n\n热感冒完了是冷感冒。难受。\n\n昨天晚上做了爱奇艺的，没做完，今天晚上做了美团的，也没做完。还花了半小时做了知乎的。所以美团晚了半小时开始做，导致没做完。快手实在没办法，只能放弃了。为什么都赶到一块了呢。反正过去了。基础知识还是不牢，美团选择题里还有考到SVM的，虽然学过，可都忘光了。对了，我报的机器学习/数据挖掘岗。暂告一段落。\n还是要多看书。后面也许还有别的笔试，虽然可能性很小了，而且公司越来越少了。\n\n****\n\n# 2018.4.23\n\n今天又下雨，降温。病差不多好了，还要多注意点，添衣加衣喝水。时间过得太快了。\n\n昨天看了动态规划，今天做了几道题。感觉还行，但是难的题我依然想不出解法，只能参考别人的。慢慢来吧。LeetCode和牛客网的在线编程题都不错，上面有讨论，如果不会，可以参考大神们的代码。\n\n今天下午随便看了看linux和shell编程的东西。这块也很有用。\n\n时间很宝贵，要珍惜啊。\n\n顺便：实验室的项目都是做文字性的东西，也不能不做。尽量高效的去做吧，时间真的不多了。\n\n****\n\n# 2018.4.27\n\n快放假了。可是实验室还有任务，学习任务也很重。不能出去玩了。真没意思。\n\n最近装了个在虚拟机里装了个deepin，界面很漂亮，喜欢，想买个电脑了。在虚拟机里太卡了。唉，还是先提高技术吧。看着桌上还没翻过的书，真是亚历山大。\n\n所以列了个五月学习任务清单`task201805.md`。还是好好学习吧，其他的先不要想。\n\nps:有时间要跑步了，病都好了，别再偷懒。\n","slug":"WMJTXT","published":1,"updated":"2019-03-30T13:13:12.920Z","comments":1,"photos":[],"link":"","_id":"cjutuhpe20009ifinvbvkezpn","content":"<h1 id=\"一些笔记\"><a href=\"#一些笔记\" class=\"headerlink\" title=\"一些笔记\"></a>一些笔记</h1><h1 id=\"2018-4-11\"><a href=\"#2018-4-11\" class=\"headerlink\" title=\"2018.4.11\"></a>2018.4.11</h1><a id=\"more\"></a>\n<p>做了百度的笔试题，交了，也不知道结果会如何。<br>好多题的答案都是网上找的，虽然我也做了测试和整合，但所做实在寥寥。<br>真的有太多东西需要学习、复习、温习、练习了。</p>\n<p>fighting</p>\n<p>由于前段时间整理数据时的失误，上学期做的很多东西都没了，<br>包括用Java做的JDBC导入数据和用MySQL对数据做的分析。<br>今天尝试重写MySQL的部分，好难，回忆又回忆不起来，<br>重新思考吧，又因为那个项目已经不做了，没有压力太难进入状态。<br>这个只能先放放，先去做更重要的事情吧。</p>\n<p>Good night!</p>\n<hr>\n<h1 id=\"2018-4-13\"><a href=\"#2018-4-13\" class=\"headerlink\" title=\"2018.4.13\"></a>2018.4.13</h1><p>昨天老师们宣布接到个项目，接下来一个多月都得忙起来了，学习时间会更少。</p>\n<p>今天上午课间接到百度的电面，半个小时左右，表现一般。正好这期间老师点名了，回来后正好被他看到，被怼了几句，下课去解释了下，还好。这老师刀子嘴豆腐心吧。<br>晚上是七牛的笔试，答的也一般，五道大题只答出两道，其中一道还没答全。</p>\n<p>接下来是今日头条、58以及晨星的笔试，抽空再复习下吧。不能都裸考。通过笔试和电面，也发现自己的知识很不牢固，以前会的都忘了。</p>\n<p>偶尔放松可以，不能玩物丧志。</p>\n<p>ps:用这个不知道怎么排版呐，就这样先将就着吧。</p>\n<p>对了，兰马没有中签，意料之中，但天气转暖了，还是要跑步，锻炼身体。还有，少熬夜吧。</p>\n<hr>\n<h1 id=\"2018-4-17\"><a href=\"#2018-4-17\" class=\"headerlink\" title=\"2018.4.17\"></a>2018.4.17</h1><p><strong>转变思维</strong></p>\n<p>一直以来，虽然大部分时候我是用C++，可还是C的思维。虽然之前学了vector,map等数据结构，可很少用。刷题的时候，我总是首先想到用数组，或者写个函数，而没有想过用C++里已有的那些数据结构。</p>\n<p>还是要多写多用。vector,map,string。这样也可以加快解题速度，不然刷题太慢了。也要多看别人的代码，学习其中的解题思路和思维。</p>\n<hr>\n<h1 id=\"2018-4-19\"><a href=\"#2018-4-19\" class=\"headerlink\" title=\"2018.4.19\"></a>2018.4.19</h1><p>这两天咽炎复发，真难受。lz太干了，要多喝水。</p>\n<p>昨天晨星的笔试，题量有点大，没做完，又是最后两道编程题没做。事先该看一下题型的，应该捡分多的先做。</p>\n<ul>\n<li>总的来说，有三个方面需要加强。<ul>\n<li>1.基础知识（数据结构、操作系统、计算机组成、网络、SQL等基础知识）<strong>这个要多看书和网上总结的资料</strong></li>\n<li>2.算法和数据结构（线性表、链表、队列和栈、树、图以及各种排序等）<strong>这个同上，还要把代码弄熟</strong></li>\n<li>3.编程技巧（一些编程思想和工具的使用，如递归、栈、hash、动规以及C++里的vector、map等的应用）<strong>这个要多刷题，并学习大神的解题方法</strong></li>\n</ul>\n</li>\n</ul>\n<p>Fighting</p>\n<hr>\n<p>=======</p>\n<hr>\n<h1 id=\"2018-4-20\"><a href=\"#2018-4-20\" class=\"headerlink\" title=\"2018.4.20\"></a>2018.4.20</h1><p>热感冒完了是冷感冒。难受。</p>\n<p>昨天晚上做了爱奇艺的，没做完，今天晚上做了美团的，也没做完。还花了半小时做了知乎的。所以美团晚了半小时开始做，导致没做完。快手实在没办法，只能放弃了。为什么都赶到一块了呢。反正过去了。基础知识还是不牢，美团选择题里还有考到SVM的，虽然学过，可都忘光了。对了，我报的机器学习/数据挖掘岗。暂告一段落。<br>还是要多看书。后面也许还有别的笔试，虽然可能性很小了，而且公司越来越少了。</p>\n<hr>\n<h1 id=\"2018-4-23\"><a href=\"#2018-4-23\" class=\"headerlink\" title=\"2018.4.23\"></a>2018.4.23</h1><p>今天又下雨，降温。病差不多好了，还要多注意点，添衣加衣喝水。时间过得太快了。</p>\n<p>昨天看了动态规划，今天做了几道题。感觉还行，但是难的题我依然想不出解法，只能参考别人的。慢慢来吧。LeetCode和牛客网的在线编程题都不错，上面有讨论，如果不会，可以参考大神们的代码。</p>\n<p>今天下午随便看了看linux和shell编程的东西。这块也很有用。</p>\n<p>时间很宝贵，要珍惜啊。</p>\n<p>顺便：实验室的项目都是做文字性的东西，也不能不做。尽量高效的去做吧，时间真的不多了。</p>\n<hr>\n<h1 id=\"2018-4-27\"><a href=\"#2018-4-27\" class=\"headerlink\" title=\"2018.4.27\"></a>2018.4.27</h1><p>快放假了。可是实验室还有任务，学习任务也很重。不能出去玩了。真没意思。</p>\n<p>最近装了个在虚拟机里装了个deepin，界面很漂亮，喜欢，想买个电脑了。在虚拟机里太卡了。唉，还是先提高技术吧。看着桌上还没翻过的书，真是亚历山大。</p>\n<p>所以列了个五月学习任务清单<code>task201805.md</code>。还是好好学习吧，其他的先不要想。</p>\n<p>ps:有时间要跑步了，病都好了，别再偷懒。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一些笔记\"><a href=\"#一些笔记\" class=\"headerlink\" title=\"一些笔记\"></a>一些笔记</h1><h1 id=\"2018-4-11\"><a href=\"#2018-4-11\" class=\"headerlink\" title=\"2018.4.11\"></a>2018.4.11</h1>","more":"<p>做了百度的笔试题，交了，也不知道结果会如何。<br>好多题的答案都是网上找的，虽然我也做了测试和整合，但所做实在寥寥。<br>真的有太多东西需要学习、复习、温习、练习了。</p>\n<p>fighting</p>\n<p>由于前段时间整理数据时的失误，上学期做的很多东西都没了，<br>包括用Java做的JDBC导入数据和用MySQL对数据做的分析。<br>今天尝试重写MySQL的部分，好难，回忆又回忆不起来，<br>重新思考吧，又因为那个项目已经不做了，没有压力太难进入状态。<br>这个只能先放放，先去做更重要的事情吧。</p>\n<p>Good night!</p>\n<hr>\n<h1 id=\"2018-4-13\"><a href=\"#2018-4-13\" class=\"headerlink\" title=\"2018.4.13\"></a>2018.4.13</h1><p>昨天老师们宣布接到个项目，接下来一个多月都得忙起来了，学习时间会更少。</p>\n<p>今天上午课间接到百度的电面，半个小时左右，表现一般。正好这期间老师点名了，回来后正好被他看到，被怼了几句，下课去解释了下，还好。这老师刀子嘴豆腐心吧。<br>晚上是七牛的笔试，答的也一般，五道大题只答出两道，其中一道还没答全。</p>\n<p>接下来是今日头条、58以及晨星的笔试，抽空再复习下吧。不能都裸考。通过笔试和电面，也发现自己的知识很不牢固，以前会的都忘了。</p>\n<p>偶尔放松可以，不能玩物丧志。</p>\n<p>ps:用这个不知道怎么排版呐，就这样先将就着吧。</p>\n<p>对了，兰马没有中签，意料之中，但天气转暖了，还是要跑步，锻炼身体。还有，少熬夜吧。</p>\n<hr>\n<h1 id=\"2018-4-17\"><a href=\"#2018-4-17\" class=\"headerlink\" title=\"2018.4.17\"></a>2018.4.17</h1><p><strong>转变思维</strong></p>\n<p>一直以来，虽然大部分时候我是用C++，可还是C的思维。虽然之前学了vector,map等数据结构，可很少用。刷题的时候，我总是首先想到用数组，或者写个函数，而没有想过用C++里已有的那些数据结构。</p>\n<p>还是要多写多用。vector,map,string。这样也可以加快解题速度，不然刷题太慢了。也要多看别人的代码，学习其中的解题思路和思维。</p>\n<hr>\n<h1 id=\"2018-4-19\"><a href=\"#2018-4-19\" class=\"headerlink\" title=\"2018.4.19\"></a>2018.4.19</h1><p>这两天咽炎复发，真难受。lz太干了，要多喝水。</p>\n<p>昨天晨星的笔试，题量有点大，没做完，又是最后两道编程题没做。事先该看一下题型的，应该捡分多的先做。</p>\n<ul>\n<li>总的来说，有三个方面需要加强。<ul>\n<li>1.基础知识（数据结构、操作系统、计算机组成、网络、SQL等基础知识）<strong>这个要多看书和网上总结的资料</strong></li>\n<li>2.算法和数据结构（线性表、链表、队列和栈、树、图以及各种排序等）<strong>这个同上，还要把代码弄熟</strong></li>\n<li>3.编程技巧（一些编程思想和工具的使用，如递归、栈、hash、动规以及C++里的vector、map等的应用）<strong>这个要多刷题，并学习大神的解题方法</strong></li>\n</ul>\n</li>\n</ul>\n<p>Fighting</p>\n<hr>\n<p>=======</p>\n<hr>\n<h1 id=\"2018-4-20\"><a href=\"#2018-4-20\" class=\"headerlink\" title=\"2018.4.20\"></a>2018.4.20</h1><p>热感冒完了是冷感冒。难受。</p>\n<p>昨天晚上做了爱奇艺的，没做完，今天晚上做了美团的，也没做完。还花了半小时做了知乎的。所以美团晚了半小时开始做，导致没做完。快手实在没办法，只能放弃了。为什么都赶到一块了呢。反正过去了。基础知识还是不牢，美团选择题里还有考到SVM的，虽然学过，可都忘光了。对了，我报的机器学习/数据挖掘岗。暂告一段落。<br>还是要多看书。后面也许还有别的笔试，虽然可能性很小了，而且公司越来越少了。</p>\n<hr>\n<h1 id=\"2018-4-23\"><a href=\"#2018-4-23\" class=\"headerlink\" title=\"2018.4.23\"></a>2018.4.23</h1><p>今天又下雨，降温。病差不多好了，还要多注意点，添衣加衣喝水。时间过得太快了。</p>\n<p>昨天看了动态规划，今天做了几道题。感觉还行，但是难的题我依然想不出解法，只能参考别人的。慢慢来吧。LeetCode和牛客网的在线编程题都不错，上面有讨论，如果不会，可以参考大神们的代码。</p>\n<p>今天下午随便看了看linux和shell编程的东西。这块也很有用。</p>\n<p>时间很宝贵，要珍惜啊。</p>\n<p>顺便：实验室的项目都是做文字性的东西，也不能不做。尽量高效的去做吧，时间真的不多了。</p>\n<hr>\n<h1 id=\"2018-4-27\"><a href=\"#2018-4-27\" class=\"headerlink\" title=\"2018.4.27\"></a>2018.4.27</h1><p>快放假了。可是实验室还有任务，学习任务也很重。不能出去玩了。真没意思。</p>\n<p>最近装了个在虚拟机里装了个deepin，界面很漂亮，喜欢，想买个电脑了。在虚拟机里太卡了。唉，还是先提高技术吧。看着桌上还没翻过的书，真是亚历山大。</p>\n<p>所以列了个五月学习任务清单<code>task201805.md</code>。还是好好学习吧，其他的先不要想。</p>\n<p>ps:有时间要跑步了，病都好了，别再偷懒。</p>"},{"layout":"post","title":"auto.sh","date":"2018-05-03T05:00:00.000Z","_content":"\n```shell\n#!/bin/sh\necho \"\\\n---\\n\\\nlayout: post\\n\\\n<!-- more -->\ntitle:\\n\\\n---\\\n\" > $(date +%Y-%m-%d)-$1.md;\n```\n","source":"_posts/2018-05-03-wmj-auto.sh.md","raw":"---\nlayout: post\ntitle: auto.sh\ndate: 2018-05-03 13:00:00\ntags: shell\n\n---\n\n```shell\n#!/bin/sh\necho \"\\\n---\\n\\\nlayout: post\\n\\\n<!-- more -->\ntitle:\\n\\\n---\\\n\" > $(date +%Y-%m-%d)-$1.md;\n```\n","slug":"wmj-auto.sh","published":1,"updated":"2019-03-29T08:01:04.191Z","comments":1,"photos":[],"link":"","_id":"cjutuhpe7000aifin0bmsvi4n","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\">echo \"\\</span><br><span class=\"line\">---\\n\\</span><br><span class=\"line\">layout: post\\n\\</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">title:\\n\\</span><br><span class=\"line\">---\\</span><br><span class=\"line\">\" &gt; $(date +%Y-%m-%d)-$1.md;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\">echo \"\\</span><br><span class=\"line\">---\\n\\</span><br><span class=\"line\">layout: post\\n\\</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">title:\\n\\</span><br><span class=\"line\">---\\</span><br><span class=\"line\">\" &gt; $(date +%Y-%m-%d)-$1.md;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"配置Win10","date":"2018-09-18T16:00:00.000Z","_content":"\n## 1.安装mingw\n一开始安装了32位的mingw，就是mingw-get-setup.exe，安装好后gcc可以用，但g++老是报错，也找不到解决办法。后来看到有人说可能是版本不对，才想到搜一下mingw64，其实我之前已经安装了gitforwindows，就是mingw64。\n\n安装好后，gcc/g++都能用了。但在cmd里还是不方便，虽然mingw64和powershell还不错，但想着还是有个IDE比较好。\n<!-- more -->\n## 2.安装cdt\ncdt是eclipse的插件，装好后可以在eclipse里运行c/c++代码。还是不错的。省的再装vs了。\n","source":"_posts/2018-09-19-配置win10.md","raw":"---\nlayout: post\ntitle: 配置win10\ndate: 2018-09-19\ntags: windows\n\n---\n\n## 1.安装mingw\n一开始安装了32位的mingw，就是mingw-get-setup.exe，安装好后gcc可以用，但g++老是报错，也找不到解决办法。后来看到有人说可能是版本不对，才想到搜一下mingw64，其实我之前已经安装了gitforwindows，就是mingw64。\n\n安装好后，gcc/g++都能用了。但在cmd里还是不方便，虽然mingw64和powershell还不错，但想着还是有个IDE比较好。\n<!-- more -->\n## 2.安装cdt\ncdt是eclipse的插件，装好后可以在eclipse里运行c/c++代码。还是不错的。省的再装vs了。\n","slug":"配置win10","published":1,"updated":"2019-03-29T07:56:03.711Z","comments":1,"photos":[],"link":"","_id":"cjutuhpeb000bifinq41qh65p","content":"<h2 id=\"1-安装mingw\"><a href=\"#1-安装mingw\" class=\"headerlink\" title=\"1.安装mingw\"></a>1.安装mingw</h2><p>一开始安装了32位的mingw，就是mingw-get-setup.exe，安装好后gcc可以用，但g++老是报错，也找不到解决办法。后来看到有人说可能是版本不对，才想到搜一下mingw64，其实我之前已经安装了gitforwindows，就是mingw64。</p>\n<p>安装好后，gcc/g++都能用了。但在cmd里还是不方便，虽然mingw64和powershell还不错，但想着还是有个IDE比较好。<br><a id=\"more\"></a></p>\n<h2 id=\"2-安装cdt\"><a href=\"#2-安装cdt\" class=\"headerlink\" title=\"2.安装cdt\"></a>2.安装cdt</h2><p>cdt是eclipse的插件，装好后可以在eclipse里运行c/c++代码。还是不错的。省的再装vs了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-安装mingw\"><a href=\"#1-安装mingw\" class=\"headerlink\" title=\"1.安装mingw\"></a>1.安装mingw</h2><p>一开始安装了32位的mingw，就是mingw-get-setup.exe，安装好后gcc可以用，但g++老是报错，也找不到解决办法。后来看到有人说可能是版本不对，才想到搜一下mingw64，其实我之前已经安装了gitforwindows，就是mingw64。</p>\n<p>安装好后，gcc/g++都能用了。但在cmd里还是不方便，虽然mingw64和powershell还不错，但想着还是有个IDE比较好。<br>","more":"</p>\n<h2 id=\"2-安装cdt\"><a href=\"#2-安装cdt\" class=\"headerlink\" title=\"2.安装cdt\"></a>2.安装cdt</h2><p>cdt是eclipse的插件，装好后可以在eclipse里运行c/c++代码。还是不错的。省的再装vs了。</p>"},{"layout":"post","title":"社团检测基本概念","date":"2018-09-27T16:00:00.000Z","_content":"\n## 1.模块度(Modularity)\n\n&emsp;&emsp;把划分社团后的网络与相应的零模型(Null model)进行比较，以度量社团划分划分的质量。一个网络的模块度定义为：该网络的社团内部边数与相应的零模型的社团内部变数之差占整个网络边数的比例。<br>\n&emsp;&emsp;计算公式为：<br>\n<!-- more -->\n<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= Q = \\sum\\limits_{v}[e_{vv} - (a_v)^2]\"></center><br>\n\n\n&emsp;&emsp;其中,<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= e_{vv}\">为社团v和社团w之间的连边占整个网络边数的比例。<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= a_v\">为一端与社团v中节点相连的边的比例。<br>\n\n## 2.度中心性(Degree centrality)\n\n&emsp;&emsp;度中心性值定义为：<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= DC_i = \\frac{k_i}{N-1}\"></center><br>\n&emsp;&emsp;其中，<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= k_i\">为节点i的度，N为网络中的节点个数。<br>\n\n## 3.介数中心性(Betweenness centrality)\n&emsp;&emsp;介数中心性是以经过某个节点的最短路径的数目来刻画节点重要性的指标,简称介数(BC)。<br>\n&emsp;&emsp;节点i的介数定义为：<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= BC_i= \\sum\\limits_{s{\\ne}i{\\ne}t}\\frac{n_{st}^{i}}{g_{st}}\"></center><br>\n&emsp;&emsp;其中,<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= g_{st}\">为从节点s到节点t的最短路径的数目, <images src=\"http://chart.googleapis.com/chart?cht=tx&chl=n_{st}^{i}\">为从节点s到节点t的<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= g_{st}\">条最短路径中经过节点i的最短路径的数目。\n\n## 4.接近中心性(Closeness centrality)\n\n接近数，即平均路径长度的倒数。\n\n## 5.k-壳与k-核\n\n## 6.特征向量中心性\n\n","source":"_posts/2018-09-28-Community-Detection-values.md","raw":"---\nlayout: post\ntitle: 社团检测基本概念\ndate: 2018-09-28\ntags: 复杂网络\n\n---\n\n## 1.模块度(Modularity)\n\n&emsp;&emsp;把划分社团后的网络与相应的零模型(Null model)进行比较，以度量社团划分划分的质量。一个网络的模块度定义为：该网络的社团内部边数与相应的零模型的社团内部变数之差占整个网络边数的比例。<br>\n&emsp;&emsp;计算公式为：<br>\n<!-- more -->\n<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= Q = \\sum\\limits_{v}[e_{vv} - (a_v)^2]\"></center><br>\n\n\n&emsp;&emsp;其中,<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= e_{vv}\">为社团v和社团w之间的连边占整个网络边数的比例。<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= a_v\">为一端与社团v中节点相连的边的比例。<br>\n\n## 2.度中心性(Degree centrality)\n\n&emsp;&emsp;度中心性值定义为：<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= DC_i = \\frac{k_i}{N-1}\"></center><br>\n&emsp;&emsp;其中，<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= k_i\">为节点i的度，N为网络中的节点个数。<br>\n\n## 3.介数中心性(Betweenness centrality)\n&emsp;&emsp;介数中心性是以经过某个节点的最短路径的数目来刻画节点重要性的指标,简称介数(BC)。<br>\n&emsp;&emsp;节点i的介数定义为：<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= BC_i= \\sum\\limits_{s{\\ne}i{\\ne}t}\\frac{n_{st}^{i}}{g_{st}}\"></center><br>\n&emsp;&emsp;其中,<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= g_{st}\">为从节点s到节点t的最短路径的数目, <images src=\"http://chart.googleapis.com/chart?cht=tx&chl=n_{st}^{i}\">为从节点s到节点t的<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= g_{st}\">条最短路径中经过节点i的最短路径的数目。\n\n## 4.接近中心性(Closeness centrality)\n\n接近数，即平均路径长度的倒数。\n\n## 5.k-壳与k-核\n\n## 6.特征向量中心性\n\n","slug":"Community-Detection-values","published":1,"updated":"2019-03-29T07:56:21.061Z","comments":1,"photos":[],"link":"","_id":"cjutuhpef000difinzfedvrze","content":"<h2 id=\"1-模块度-Modularity\"><a href=\"#1-模块度-Modularity\" class=\"headerlink\" title=\"1.模块度(Modularity)\"></a>1.模块度(Modularity)</h2><p>&emsp;&emsp;把划分社团后的网络与相应的零模型(Null model)进行比较，以度量社团划分划分的质量。一个网络的模块度定义为：该网络的社团内部边数与相应的零模型的社团内部变数之差占整个网络边数的比例。<br><br>&emsp;&emsp;计算公式为：<br><br><a id=\"more\"></a></p>\n<p><center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= Q = \\sum\\limits_{v}[e_{vv} - (a_v)^2]\"></images></center><br></p>\n<p>&emsp;&emsp;其中,<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= e_{vv}\">为社团v和社团w之间的连边占整个网络边数的比例。<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= a_v\">为一端与社团v中节点相连的边的比例。<br></images></images></p>\n<h2 id=\"2-度中心性-Degree-centrality\"><a href=\"#2-度中心性-Degree-centrality\" class=\"headerlink\" title=\"2.度中心性(Degree centrality)\"></a>2.度中心性(Degree centrality)</h2><p>&emsp;&emsp;度中心性值定义为：<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= DC_i = \\frac{k_i}{N-1}\"></images></center><br><br>&emsp;&emsp;其中，<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= k_i\">为节点i的度，N为网络中的节点个数。<br></images></p>\n<h2 id=\"3-介数中心性-Betweenness-centrality\"><a href=\"#3-介数中心性-Betweenness-centrality\" class=\"headerlink\" title=\"3.介数中心性(Betweenness centrality)\"></a>3.介数中心性(Betweenness centrality)</h2><p>&emsp;&emsp;介数中心性是以经过某个节点的最短路径的数目来刻画节点重要性的指标,简称介数(BC)。<br><br>&emsp;&emsp;节点i的介数定义为：<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= BC_i= \\sum\\limits_{s{\\ne}i{\\ne}t}\\frac{n_{st}^{i}}{g_{st}}\"></images></center><br><br>&emsp;&emsp;其中,<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= g_{st}\">为从节点s到节点t的最短路径的数目, <images src=\"http://chart.googleapis.com/chart?cht=tx&chl=n_{st}^{i}\">为从节点s到节点t的<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= g_{st}\">条最短路径中经过节点i的最短路径的数目。</images></images></images></p>\n<h2 id=\"4-接近中心性-Closeness-centrality\"><a href=\"#4-接近中心性-Closeness-centrality\" class=\"headerlink\" title=\"4.接近中心性(Closeness centrality)\"></a>4.接近中心性(Closeness centrality)</h2><p>接近数，即平均路径长度的倒数。</p>\n<h2 id=\"5-k-壳与k-核\"><a href=\"#5-k-壳与k-核\" class=\"headerlink\" title=\"5.k-壳与k-核\"></a>5.k-壳与k-核</h2><h2 id=\"6-特征向量中心性\"><a href=\"#6-特征向量中心性\" class=\"headerlink\" title=\"6.特征向量中心性\"></a>6.特征向量中心性</h2>","site":{"data":{}},"excerpt":"<h2 id=\"1-模块度-Modularity\"><a href=\"#1-模块度-Modularity\" class=\"headerlink\" title=\"1.模块度(Modularity)\"></a>1.模块度(Modularity)</h2><p>&emsp;&emsp;把划分社团后的网络与相应的零模型(Null model)进行比较，以度量社团划分划分的质量。一个网络的模块度定义为：该网络的社团内部边数与相应的零模型的社团内部变数之差占整个网络边数的比例。<br><br>&emsp;&emsp;计算公式为：<br><br>","more":"</p>\n<p><center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= Q = \\sum\\limits_{v}[e_{vv} - (a_v)^2]\"></images></center><br></p>\n<p>&emsp;&emsp;其中,<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= e_{vv}\">为社团v和社团w之间的连边占整个网络边数的比例。<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= a_v\">为一端与社团v中节点相连的边的比例。<br></images></images></p>\n<h2 id=\"2-度中心性-Degree-centrality\"><a href=\"#2-度中心性-Degree-centrality\" class=\"headerlink\" title=\"2.度中心性(Degree centrality)\"></a>2.度中心性(Degree centrality)</h2><p>&emsp;&emsp;度中心性值定义为：<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= DC_i = \\frac{k_i}{N-1}\"></images></center><br><br>&emsp;&emsp;其中，<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= k_i\">为节点i的度，N为网络中的节点个数。<br></images></p>\n<h2 id=\"3-介数中心性-Betweenness-centrality\"><a href=\"#3-介数中心性-Betweenness-centrality\" class=\"headerlink\" title=\"3.介数中心性(Betweenness centrality)\"></a>3.介数中心性(Betweenness centrality)</h2><p>&emsp;&emsp;介数中心性是以经过某个节点的最短路径的数目来刻画节点重要性的指标,简称介数(BC)。<br><br>&emsp;&emsp;节点i的介数定义为：<center><images src=\"http://chart.googleapis.com/chart?cht=tx&chl= BC_i= \\sum\\limits_{s{\\ne}i{\\ne}t}\\frac{n_{st}^{i}}{g_{st}}\"></images></center><br><br>&emsp;&emsp;其中,<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= g_{st}\">为从节点s到节点t的最短路径的数目, <images src=\"http://chart.googleapis.com/chart?cht=tx&chl=n_{st}^{i}\">为从节点s到节点t的<images src=\"http://chart.googleapis.com/chart?cht=tx&chl= g_{st}\">条最短路径中经过节点i的最短路径的数目。</images></images></images></p>\n<h2 id=\"4-接近中心性-Closeness-centrality\"><a href=\"#4-接近中心性-Closeness-centrality\" class=\"headerlink\" title=\"4.接近中心性(Closeness centrality)\"></a>4.接近中心性(Closeness centrality)</h2><p>接近数，即平均路径长度的倒数。</p>\n<h2 id=\"5-k-壳与k-核\"><a href=\"#5-k-壳与k-核\" class=\"headerlink\" title=\"5.k-壳与k-核\"></a>5.k-壳与k-核</h2><h2 id=\"6-特征向量中心性\"><a href=\"#6-特征向量中心性\" class=\"headerlink\" title=\"6.特征向量中心性\"></a>6.特征向量中心性</h2>"},{"layout":"post","title":"The Config of My Deepin","date":"2018-09-28T16:00:00.000Z","_content":"\n\n## 目录\n* [ssh](#ssh)\n* [git](#git)\n* [gcc](#gcc)\n<!-- more -->\n* [YouCompleteMe](#youcompleteme)\n* [vim-instant-markdown](#vim-instant-markdown)\n* [Variety](#variety)\n* [Conky](#conky)\n* [Pycharm](#pycharm)\n* [TexStudio](#texstudio)\n* [Atom](#atom)\n* []()\n\n\n# ssh\n\n* 安装ssh\n\t* `sudo apt-get install openssh-server`\n* 开启ssh服务\n\t* `sudo service sshd start`\n\n# git\n\n* 安装git\n\t* `sudo apt-get install git`\n* 设置name和email\n\t* `git config --global user.name \"name\"`\n\t* `git config --global user.email \"email\"`\n* 设置ssh-key\n\t* 先执行`ssh-keygen -t rsa -C \"email\"`\n\t* 然后在github上找到\"Account settings\",\"SSH Keys\"页面,点击\"Add SSH Key\",将~/.ssh/id_rsa.pub的内容粘贴到Key文本框内。\n* 连接远程库\n\t* `git remote add origin git@github.com:yourname/reponame.git`\n* 常用命令\n```\n\tgit init\n\tgit push origin master\n\tgit pull origin master\n\tgit add -A\n\tgit commit -m \"text\"\n\tgit status\n\tgit log\n\tgit clone repoAddress\n```\n\n# gcc\n\n* 系统好像是自带了gcc,但g++需要手动安装\n\n* `sudo apt-get install g++`\n\n# YouCompleteMe\n一款强大的vim插件\n\n安装方法参考：[在deepin里安装YouCompleteMe](https://wmjtxt.github.io/2018-05-14-%E5%9C%A8deepin%E4%B8%8A%E5%AE%89%E8%A3%85YouCompleteMe/)\n\n# vim-instant-markdown\n一款vim插件，可以实现markdown文件即时预览\n\n安装方法参考：[https://github.com/yangyangwithgnu/use_vim_as_ide.git](https://github.com/yangyangwithgnu/use_vim_as_ide#8.4)\n\n# Variety\nVariety是一款自动更换壁纸的软件\n来源:深度商店\n\n# Conky\nConky是一款可以显示天气的桌面软件。来源：深度论坛\n* [deepin利用conky打造一个炫酷的桌面](https://bbs.deepin.org/forum.php?mod=viewthread&tid=148009&highlight=conky)\n* [conky-weather 3.0 (Conky天气)](https://bbs.deepin.org/forum.php?mod=viewthread&tid=152734&highlight=conky)\n\n我用的第二个\n\n# Pycharm\n\n`sudo apt-get install pycharm-community`\n\n# TexStudio\nLatex编辑器\n* 首先安装texlive, 可以直接在官网下载下来安装, [install-tl-unx.tar.gz](http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz), 也可以命令安装, `sudo apt-get install texlive-full`\n* 然后安装texstudio, `sudo apt-get install texstudio`\n\n# Atom\n开源文本编辑器, `sudo apt-get install atom`, 也可以在深度商店安装\n","source":"_posts/2018-09-29-myDeepin.md","raw":"---\nlayout: post\ntitle: The Config of my Deepin\ndate: 2018-09-29\ntags: Deepin\n\n---\n\n\n## 目录\n* [ssh](#ssh)\n* [git](#git)\n* [gcc](#gcc)\n<!-- more -->\n* [YouCompleteMe](#youcompleteme)\n* [vim-instant-markdown](#vim-instant-markdown)\n* [Variety](#variety)\n* [Conky](#conky)\n* [Pycharm](#pycharm)\n* [TexStudio](#texstudio)\n* [Atom](#atom)\n* []()\n\n\n# ssh\n\n* 安装ssh\n\t* `sudo apt-get install openssh-server`\n* 开启ssh服务\n\t* `sudo service sshd start`\n\n# git\n\n* 安装git\n\t* `sudo apt-get install git`\n* 设置name和email\n\t* `git config --global user.name \"name\"`\n\t* `git config --global user.email \"email\"`\n* 设置ssh-key\n\t* 先执行`ssh-keygen -t rsa -C \"email\"`\n\t* 然后在github上找到\"Account settings\",\"SSH Keys\"页面,点击\"Add SSH Key\",将~/.ssh/id_rsa.pub的内容粘贴到Key文本框内。\n* 连接远程库\n\t* `git remote add origin git@github.com:yourname/reponame.git`\n* 常用命令\n```\n\tgit init\n\tgit push origin master\n\tgit pull origin master\n\tgit add -A\n\tgit commit -m \"text\"\n\tgit status\n\tgit log\n\tgit clone repoAddress\n```\n\n# gcc\n\n* 系统好像是自带了gcc,但g++需要手动安装\n\n* `sudo apt-get install g++`\n\n# YouCompleteMe\n一款强大的vim插件\n\n安装方法参考：[在deepin里安装YouCompleteMe](https://wmjtxt.github.io/2018-05-14-%E5%9C%A8deepin%E4%B8%8A%E5%AE%89%E8%A3%85YouCompleteMe/)\n\n# vim-instant-markdown\n一款vim插件，可以实现markdown文件即时预览\n\n安装方法参考：[https://github.com/yangyangwithgnu/use_vim_as_ide.git](https://github.com/yangyangwithgnu/use_vim_as_ide#8.4)\n\n# Variety\nVariety是一款自动更换壁纸的软件\n来源:深度商店\n\n# Conky\nConky是一款可以显示天气的桌面软件。来源：深度论坛\n* [deepin利用conky打造一个炫酷的桌面](https://bbs.deepin.org/forum.php?mod=viewthread&tid=148009&highlight=conky)\n* [conky-weather 3.0 (Conky天气)](https://bbs.deepin.org/forum.php?mod=viewthread&tid=152734&highlight=conky)\n\n我用的第二个\n\n# Pycharm\n\n`sudo apt-get install pycharm-community`\n\n# TexStudio\nLatex编辑器\n* 首先安装texlive, 可以直接在官网下载下来安装, [install-tl-unx.tar.gz](http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz), 也可以命令安装, `sudo apt-get install texlive-full`\n* 然后安装texstudio, `sudo apt-get install texstudio`\n\n# Atom\n开源文本编辑器, `sudo apt-get install atom`, 也可以在深度商店安装\n","slug":"myDeepin","published":1,"updated":"2019-03-29T07:56:39.051Z","comments":1,"photos":[],"link":"","_id":"cjutuhpeg000eifin7dsp0k7r","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#ssh\">ssh</a></li>\n<li><a href=\"#git\">git</a></li>\n<li><a href=\"#gcc\">gcc</a><a id=\"more\"></a></li>\n<li><a href=\"#youcompleteme\">YouCompleteMe</a></li>\n<li><a href=\"#vim-instant-markdown\">vim-instant-markdown</a></li>\n<li><a href=\"#variety\">Variety</a></li>\n<li><a href=\"#conky\">Conky</a></li>\n<li><a href=\"#pycharm\">Pycharm</a></li>\n<li><a href=\"#texstudio\">TexStudio</a></li>\n<li><a href=\"#atom\">Atom</a></li>\n<li><a href></a></li>\n</ul>\n<h1 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h1><ul>\n<li>安装ssh<ul>\n<li><code>sudo apt-get install openssh-server</code></li>\n</ul>\n</li>\n<li>开启ssh服务<ul>\n<li><code>sudo service sshd start</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><ul>\n<li>安装git<ul>\n<li><code>sudo apt-get install git</code></li>\n</ul>\n</li>\n<li>设置name和email<ul>\n<li><code>git config --global user.name &quot;name&quot;</code></li>\n<li><code>git config --global user.email &quot;email&quot;</code></li>\n</ul>\n</li>\n<li>设置ssh-key<ul>\n<li>先执行<code>ssh-keygen -t rsa -C &quot;email&quot;</code></li>\n<li>然后在github上找到”Account settings”,”SSH Keys”页面,点击”Add SSH Key”,将~/.ssh/id_rsa.pub的内容粘贴到Key文本框内。</li>\n</ul>\n</li>\n<li>连接远程库<ul>\n<li><code>git remote add origin git@github.com:yourname/reponame.git</code></li>\n</ul>\n</li>\n<li>常用命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git push origin master</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;text&quot;</span><br><span class=\"line\">git status</span><br><span class=\"line\">git log</span><br><span class=\"line\">git clone repoAddress</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"gcc\"><a href=\"#gcc\" class=\"headerlink\" title=\"gcc\"></a>gcc</h1><ul>\n<li><p>系统好像是自带了gcc,但g++需要手动安装</p>\n</li>\n<li><p><code>sudo apt-get install g++</code></p>\n</li>\n</ul>\n<h1 id=\"YouCompleteMe\"><a href=\"#YouCompleteMe\" class=\"headerlink\" title=\"YouCompleteMe\"></a>YouCompleteMe</h1><p>一款强大的vim插件</p>\n<p>安装方法参考：<a href=\"https://wmjtxt.github.io/2018-05-14-%E5%9C%A8deepin%E4%B8%8A%E5%AE%89%E8%A3%85YouCompleteMe/\">在deepin里安装YouCompleteMe</a></p>\n<h1 id=\"vim-instant-markdown\"><a href=\"#vim-instant-markdown\" class=\"headerlink\" title=\"vim-instant-markdown\"></a>vim-instant-markdown</h1><p>一款vim插件，可以实现markdown文件即时预览</p>\n<p>安装方法参考：<a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide#8.4\" target=\"_blank\" rel=\"noopener\">https://github.com/yangyangwithgnu/use_vim_as_ide.git</a></p>\n<h1 id=\"Variety\"><a href=\"#Variety\" class=\"headerlink\" title=\"Variety\"></a>Variety</h1><p>Variety是一款自动更换壁纸的软件<br>来源:深度商店</p>\n<h1 id=\"Conky\"><a href=\"#Conky\" class=\"headerlink\" title=\"Conky\"></a>Conky</h1><p>Conky是一款可以显示天气的桌面软件。来源：深度论坛</p>\n<ul>\n<li><a href=\"https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=148009&amp;highlight=conky\" target=\"_blank\" rel=\"noopener\">deepin利用conky打造一个炫酷的桌面</a></li>\n<li><a href=\"https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=152734&amp;highlight=conky\" target=\"_blank\" rel=\"noopener\">conky-weather 3.0 (Conky天气)</a></li>\n</ul>\n<p>我用的第二个</p>\n<h1 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h1><p><code>sudo apt-get install pycharm-community</code></p>\n<h1 id=\"TexStudio\"><a href=\"#TexStudio\" class=\"headerlink\" title=\"TexStudio\"></a>TexStudio</h1><p>Latex编辑器</p>\n<ul>\n<li>首先安装texlive, 可以直接在官网下载下来安装, <a href=\"http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz\" target=\"_blank\" rel=\"noopener\">install-tl-unx.tar.gz</a>, 也可以命令安装, <code>sudo apt-get install texlive-full</code></li>\n<li>然后安装texstudio, <code>sudo apt-get install texstudio</code></li>\n</ul>\n<h1 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h1><p>开源文本编辑器, <code>sudo apt-get install atom</code>, 也可以在深度商店安装</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#ssh\">ssh</a></li>\n<li><a href=\"#git\">git</a></li>\n<li><a href=\"#gcc\">gcc</a>","more":"</li>\n<li><a href=\"#youcompleteme\">YouCompleteMe</a></li>\n<li><a href=\"#vim-instant-markdown\">vim-instant-markdown</a></li>\n<li><a href=\"#variety\">Variety</a></li>\n<li><a href=\"#conky\">Conky</a></li>\n<li><a href=\"#pycharm\">Pycharm</a></li>\n<li><a href=\"#texstudio\">TexStudio</a></li>\n<li><a href=\"#atom\">Atom</a></li>\n<li><a href></a></li>\n</ul>\n<h1 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h1><ul>\n<li>安装ssh<ul>\n<li><code>sudo apt-get install openssh-server</code></li>\n</ul>\n</li>\n<li>开启ssh服务<ul>\n<li><code>sudo service sshd start</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><ul>\n<li>安装git<ul>\n<li><code>sudo apt-get install git</code></li>\n</ul>\n</li>\n<li>设置name和email<ul>\n<li><code>git config --global user.name &quot;name&quot;</code></li>\n<li><code>git config --global user.email &quot;email&quot;</code></li>\n</ul>\n</li>\n<li>设置ssh-key<ul>\n<li>先执行<code>ssh-keygen -t rsa -C &quot;email&quot;</code></li>\n<li>然后在github上找到”Account settings”,”SSH Keys”页面,点击”Add SSH Key”,将~/.ssh/id_rsa.pub的内容粘贴到Key文本框内。</li>\n</ul>\n</li>\n<li>连接远程库<ul>\n<li><code>git remote add origin git@github.com:yourname/reponame.git</code></li>\n</ul>\n</li>\n<li>常用命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git push origin master</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;text&quot;</span><br><span class=\"line\">git status</span><br><span class=\"line\">git log</span><br><span class=\"line\">git clone repoAddress</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"gcc\"><a href=\"#gcc\" class=\"headerlink\" title=\"gcc\"></a>gcc</h1><ul>\n<li><p>系统好像是自带了gcc,但g++需要手动安装</p>\n</li>\n<li><p><code>sudo apt-get install g++</code></p>\n</li>\n</ul>\n<h1 id=\"YouCompleteMe\"><a href=\"#YouCompleteMe\" class=\"headerlink\" title=\"YouCompleteMe\"></a>YouCompleteMe</h1><p>一款强大的vim插件</p>\n<p>安装方法参考：<a href=\"https://wmjtxt.github.io/2018-05-14-%E5%9C%A8deepin%E4%B8%8A%E5%AE%89%E8%A3%85YouCompleteMe/\">在deepin里安装YouCompleteMe</a></p>\n<h1 id=\"vim-instant-markdown\"><a href=\"#vim-instant-markdown\" class=\"headerlink\" title=\"vim-instant-markdown\"></a>vim-instant-markdown</h1><p>一款vim插件，可以实现markdown文件即时预览</p>\n<p>安装方法参考：<a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide#8.4\" target=\"_blank\" rel=\"noopener\">https://github.com/yangyangwithgnu/use_vim_as_ide.git</a></p>\n<h1 id=\"Variety\"><a href=\"#Variety\" class=\"headerlink\" title=\"Variety\"></a>Variety</h1><p>Variety是一款自动更换壁纸的软件<br>来源:深度商店</p>\n<h1 id=\"Conky\"><a href=\"#Conky\" class=\"headerlink\" title=\"Conky\"></a>Conky</h1><p>Conky是一款可以显示天气的桌面软件。来源：深度论坛</p>\n<ul>\n<li><a href=\"https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=148009&amp;highlight=conky\" target=\"_blank\" rel=\"noopener\">deepin利用conky打造一个炫酷的桌面</a></li>\n<li><a href=\"https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=152734&amp;highlight=conky\" target=\"_blank\" rel=\"noopener\">conky-weather 3.0 (Conky天气)</a></li>\n</ul>\n<p>我用的第二个</p>\n<h1 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h1><p><code>sudo apt-get install pycharm-community</code></p>\n<h1 id=\"TexStudio\"><a href=\"#TexStudio\" class=\"headerlink\" title=\"TexStudio\"></a>TexStudio</h1><p>Latex编辑器</p>\n<ul>\n<li>首先安装texlive, 可以直接在官网下载下来安装, <a href=\"http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz\" target=\"_blank\" rel=\"noopener\">install-tl-unx.tar.gz</a>, 也可以命令安装, <code>sudo apt-get install texlive-full</code></li>\n<li>然后安装texstudio, <code>sudo apt-get install texstudio</code></li>\n</ul>\n<h1 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h1><p>开源文本编辑器, <code>sudo apt-get install atom</code>, 也可以在深度商店安装</p>"},{"layout":"post","title":"一些想法","date":"2018-10-27T16:00:00.000Z","_content":"\n## 工作现状\n* 项目, 进展很慢\n* 技术, 提高有限\n* 论文, 看不进去\n```c\n<!-- more -->\n1.项目，我主要负责数据预处理，使用Java，真是不太会，写的很慢，一个小想法都要搞一天。\n  比如之前，数据库存储过程我就搞了一天才运行成功。最后发现只是个小错误卡住了，细心还是很重要的。\n2.技术主要是通过看书刷题来提高，目前是在LeetCode和PAT上刷，语言主要是C++，每天各1-2道，刷的还是很慢的，无奈技术太差。\n3.论文，可以说还没有开始。想法是先看社团检测的经典算法并实现，至少弄懂各个算法，\n  然后再看有没有可以写成论文的想法，其实我要求不高，水一篇EI就行了。\n```\nDeepin上印象笔记不太好用，这样记笔记有些麻烦啊。\n以后可以每天早上或头天晚上，开始做事之前，先写个`todolist.md`，这样目标清晰，可能做的更快一点。\n如果有一个点卡住了，可以先做下一个，卡住的地方说不定会突然有思路，然后再回去接着做就行。\n\n今天就这样，写个todolist去。\n","source":"_posts/2018-10-28-somethinkings.md","raw":"---\nlayout: post\ntitle: 一些想法\ndate: 2018-10-28\ntags: 随笔\n\n---\n\n## 工作现状\n* 项目, 进展很慢\n* 技术, 提高有限\n* 论文, 看不进去\n```c\n<!-- more -->\n1.项目，我主要负责数据预处理，使用Java，真是不太会，写的很慢，一个小想法都要搞一天。\n  比如之前，数据库存储过程我就搞了一天才运行成功。最后发现只是个小错误卡住了，细心还是很重要的。\n2.技术主要是通过看书刷题来提高，目前是在LeetCode和PAT上刷，语言主要是C++，每天各1-2道，刷的还是很慢的，无奈技术太差。\n3.论文，可以说还没有开始。想法是先看社团检测的经典算法并实现，至少弄懂各个算法，\n  然后再看有没有可以写成论文的想法，其实我要求不高，水一篇EI就行了。\n```\nDeepin上印象笔记不太好用，这样记笔记有些麻烦啊。\n以后可以每天早上或头天晚上，开始做事之前，先写个`todolist.md`，这样目标清晰，可能做的更快一点。\n如果有一个点卡住了，可以先做下一个，卡住的地方说不定会突然有思路，然后再回去接着做就行。\n\n今天就这样，写个todolist去。\n","slug":"somethinkings","published":1,"updated":"2019-03-30T13:13:46.486Z","comments":1,"photos":[],"link":"","_id":"cjutuhpek000gifinkc8sxcju","content":"<h2 id=\"工作现状\"><a href=\"#工作现状\" class=\"headerlink\" title=\"工作现状\"></a>工作现状</h2><ul>\n<li>项目, 进展很慢</li>\n<li>技术, 提高有限</li>\n<li>论文, 看不进去<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"><span class=\"number\">1.</span>项目，我主要负责数据预处理，使用Java，真是不太会，写的很慢，一个小想法都要搞一天。</span><br><span class=\"line\">  比如之前，数据库存储过程我就搞了一天才运行成功。最后发现只是个小错误卡住了，细心还是很重要的。</span><br><span class=\"line\"><span class=\"number\">2.</span>技术主要是通过看书刷题来提高，目前是在LeetCode和PAT上刷，语言主要是C++，每天各<span class=\"number\">1</span><span class=\"number\">-2</span>道，刷的还是很慢的，无奈技术太差。</span><br><span class=\"line\"><span class=\"number\">3.</span>论文，可以说还没有开始。想法是先看社团检测的经典算法并实现，至少弄懂各个算法，</span><br><span class=\"line\">  然后再看有没有可以写成论文的想法，其实我要求不高，水一篇EI就行了。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Deepin上印象笔记不太好用，这样记笔记有些麻烦啊。<br>以后可以每天早上或头天晚上，开始做事之前，先写个<code>todolist.md</code>，这样目标清晰，可能做的更快一点。<br>如果有一个点卡住了，可以先做下一个，卡住的地方说不定会突然有思路，然后再回去接着做就行。</p>\n<p>今天就这样，写个todolist去。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工作现状\"><a href=\"#工作现状\" class=\"headerlink\" title=\"工作现状\"></a>工作现状</h2><ul>\n<li>项目, 进展很慢</li>\n<li>技术, 提高有限</li>\n<li>论文, 看不进去<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"><span class=\"number\">1.</span>项目，我主要负责数据预处理，使用Java，真是不太会，写的很慢，一个小想法都要搞一天。</span><br><span class=\"line\">  比如之前，数据库存储过程我就搞了一天才运行成功。最后发现只是个小错误卡住了，细心还是很重要的。</span><br><span class=\"line\"><span class=\"number\">2.</span>技术主要是通过看书刷题来提高，目前是在LeetCode和PAT上刷，语言主要是C++，每天各<span class=\"number\">1</span><span class=\"number\">-2</span>道，刷的还是很慢的，无奈技术太差。</span><br><span class=\"line\"><span class=\"number\">3.</span>论文，可以说还没有开始。想法是先看社团检测的经典算法并实现，至少弄懂各个算法，</span><br><span class=\"line\">  然后再看有没有可以写成论文的想法，其实我要求不高，水一篇EI就行了。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Deepin上印象笔记不太好用，这样记笔记有些麻烦啊。<br>以后可以每天早上或头天晚上，开始做事之前，先写个<code>todolist.md</code>，这样目标清晰，可能做的更快一点。<br>如果有一个点卡住了，可以先做下一个，卡住的地方说不定会突然有思路，然后再回去接着做就行。</p>\n<p>今天就这样，写个todolist去。</p>\n"},{"layout":"post","title":"从Excel导数据到MySQL","date":"2018-10-16T16:00:00.000Z","_content":"\n\n**运行环境:** Windows10 和 Deepin15.7, MySQL14.4, Java1.8.0_181<br>\n**使用工具:** poi,JDBC<br>\n**数据规模:** 35万条，5个文件夹，146个Excel文件(.xls,.xlsx)\n\n<!-- more -->\n一开始在win10里运行，需要3个小时，把我吓到了，当时也没多想，导完数据就做处理去了。\n后来到deepin里导(电脑装的双系统)，同样的数据，同样的代码，只需要100秒左右，又把我吓到了，这差距咋这么大呢。虽然deepin装在固态里，但也不至于直接差了整整一百倍吧。\n\n然后我就又回到win10，想着做一下优化，看能不能快点，因为在网上看到有说把日志关了会快一些。我试了下，时间一下子提高到160多秒!好吧，原来就是日志的问题。\n\n然后我又把deepin里MySQL的日志开启，测试了一下，974454ms，约16分钟，还是比win10快不少的。\n\n**MySQL在win10里默认日志开启，而deepin里默认日志关闭。**\n\n**win10的MySQL日志关闭方法:**\n* 找到my.ini文件，在里面加入一行:skip-log-bin，保存关闭，重启MySQL服务。\n\n**deepin的MySQL日志开启方法:**\n* `sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf\n* ` 找到里面的`server-id`和`log_bin`这两行，把前面的#删掉\n* 回到上一层路径，执行`./debian-start`(这一步是必须的，一开始我没执行，仅修改上面的两行后，mysql服务开启不了)\n* `sevice mysql restart` 重启MySQL服务\n\n当然，除了关闭日志，我还做了其他的优化，比如String改为StringBuffer,Statement改为PreparedStatement等，不过这些都提高不明显。\n","source":"_posts/2018-10-17-importDatatoMySQL.md","raw":"---\nlayout: post\ntitle: 从Excel导数据到MySQL\ndate: 2018-10-17\ntags: [mysql,技术]\n\n---\n\n\n**运行环境:** Windows10 和 Deepin15.7, MySQL14.4, Java1.8.0_181<br>\n**使用工具:** poi,JDBC<br>\n**数据规模:** 35万条，5个文件夹，146个Excel文件(.xls,.xlsx)\n\n<!-- more -->\n一开始在win10里运行，需要3个小时，把我吓到了，当时也没多想，导完数据就做处理去了。\n后来到deepin里导(电脑装的双系统)，同样的数据，同样的代码，只需要100秒左右，又把我吓到了，这差距咋这么大呢。虽然deepin装在固态里，但也不至于直接差了整整一百倍吧。\n\n然后我就又回到win10，想着做一下优化，看能不能快点，因为在网上看到有说把日志关了会快一些。我试了下，时间一下子提高到160多秒!好吧，原来就是日志的问题。\n\n然后我又把deepin里MySQL的日志开启，测试了一下，974454ms，约16分钟，还是比win10快不少的。\n\n**MySQL在win10里默认日志开启，而deepin里默认日志关闭。**\n\n**win10的MySQL日志关闭方法:**\n* 找到my.ini文件，在里面加入一行:skip-log-bin，保存关闭，重启MySQL服务。\n\n**deepin的MySQL日志开启方法:**\n* `sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf\n* ` 找到里面的`server-id`和`log_bin`这两行，把前面的#删掉\n* 回到上一层路径，执行`./debian-start`(这一步是必须的，一开始我没执行，仅修改上面的两行后，mysql服务开启不了)\n* `sevice mysql restart` 重启MySQL服务\n\n当然，除了关闭日志，我还做了其他的优化，比如String改为StringBuffer,Statement改为PreparedStatement等，不过这些都提高不明显。\n","slug":"importDatatoMySQL","published":1,"updated":"2019-04-10T00:57:45.228Z","comments":1,"photos":[],"link":"","_id":"cjutuhpem000iifin96hek95i","content":"<p><strong>运行环境:</strong> Windows10 和 Deepin15.7, MySQL14.4, Java1.8.0_181<br><br><strong>使用工具:</strong> poi,JDBC<br><br><strong>数据规模:</strong> 35万条，5个文件夹，146个Excel文件(.xls,.xlsx)</p>\n<a id=\"more\"></a>\n<p>一开始在win10里运行，需要3个小时，把我吓到了，当时也没多想，导完数据就做处理去了。<br>后来到deepin里导(电脑装的双系统)，同样的数据，同样的代码，只需要100秒左右，又把我吓到了，这差距咋这么大呢。虽然deepin装在固态里，但也不至于直接差了整整一百倍吧。</p>\n<p>然后我就又回到win10，想着做一下优化，看能不能快点，因为在网上看到有说把日志关了会快一些。我试了下，时间一下子提高到160多秒!好吧，原来就是日志的问题。</p>\n<p>然后我又把deepin里MySQL的日志开启，测试了一下，974454ms，约16分钟，还是比win10快不少的。</p>\n<p><strong>MySQL在win10里默认日志开启，而deepin里默认日志关闭。</strong></p>\n<p><strong>win10的MySQL日志关闭方法:</strong></p>\n<ul>\n<li>找到my.ini文件，在里面加入一行:skip-log-bin，保存关闭，重启MySQL服务。</li>\n</ul>\n<p><strong>deepin的MySQL日志开启方法:</strong></p>\n<ul>\n<li>`sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</li>\n<li><code>找到里面的</code>server-id<code>和</code>log_bin`这两行，把前面的#删掉</li>\n<li>回到上一层路径，执行<code>./debian-start</code>(这一步是必须的，一开始我没执行，仅修改上面的两行后，mysql服务开启不了)</li>\n<li><code>sevice mysql restart</code> 重启MySQL服务</li>\n</ul>\n<p>当然，除了关闭日志，我还做了其他的优化，比如String改为StringBuffer,Statement改为PreparedStatement等，不过这些都提高不明显。</p>\n","site":{"data":{}},"excerpt":"<p><strong>运行环境:</strong> Windows10 和 Deepin15.7, MySQL14.4, Java1.8.0_181<br><br><strong>使用工具:</strong> poi,JDBC<br><br><strong>数据规模:</strong> 35万条，5个文件夹，146个Excel文件(.xls,.xlsx)</p>","more":"<p>一开始在win10里运行，需要3个小时，把我吓到了，当时也没多想，导完数据就做处理去了。<br>后来到deepin里导(电脑装的双系统)，同样的数据，同样的代码，只需要100秒左右，又把我吓到了，这差距咋这么大呢。虽然deepin装在固态里，但也不至于直接差了整整一百倍吧。</p>\n<p>然后我就又回到win10，想着做一下优化，看能不能快点，因为在网上看到有说把日志关了会快一些。我试了下，时间一下子提高到160多秒!好吧，原来就是日志的问题。</p>\n<p>然后我又把deepin里MySQL的日志开启，测试了一下，974454ms，约16分钟，还是比win10快不少的。</p>\n<p><strong>MySQL在win10里默认日志开启，而deepin里默认日志关闭。</strong></p>\n<p><strong>win10的MySQL日志关闭方法:</strong></p>\n<ul>\n<li>找到my.ini文件，在里面加入一行:skip-log-bin，保存关闭，重启MySQL服务。</li>\n</ul>\n<p><strong>deepin的MySQL日志开启方法:</strong></p>\n<ul>\n<li>`sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</li>\n<li><code>找到里面的</code>server-id<code>和</code>log_bin`这两行，把前面的#删掉</li>\n<li>回到上一层路径，执行<code>./debian-start</code>(这一步是必须的，一开始我没执行，仅修改上面的两行后，mysql服务开启不了)</li>\n<li><code>sevice mysql restart</code> 重启MySQL服务</li>\n</ul>\n<p>当然，除了关闭日志，我还做了其他的优化，比如String改为StringBuffer,Statement改为PreparedStatement等，不过这些都提高不明显。</p>"},{"layout":"post","title":"在deepin里安装YouCompleteMe","date":"2018-05-13T16:00:00.000Z","_content":"\n参考[https://github.com/Valloric/YouCompleteMe](https://github.com/Valloric/YouCompleteMe)\n\n* 1.安装Vundle\n\t* `git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim`\n\t* 把以下内容复制到.vimrc:\n<!-- more -->\n\n\t```shell\n\tset nocompatible              \" be iMproved, required\n\tfiletype off                  \" required\n\n\t\" set the runtime path to include Vundle and initialize\n\tset rtp+=~/.vim/bundle/Vundle.vim\n\tcall vundle#begin()\n\t\" alternatively, pass a path where Vundle should install plugins\n\t\"call vundle#begin('~/some/path/here')\n\n\t\" let Vundle manage Vundle, required\n\tPlugin 'VundleVim/Vundle.vim'\n\n\t\" The following are examples of different formats supported.\n\t\" Keep Plugin commands between vundle#begin/end.\n\t\" plugin on GitHub repo\n\tPlugin 'tpope/vim-fugitive'\n\t\" plugin from http://vim-scripts.org/vim/scripts.html\n\t\" Plugin 'L9'\n\t\" Git plugin not hosted on GitHub\n\tPlugin 'git://git.wincent.com/command-t.git'\n\t\" git repos on your local machine (i.e. when working on your own plugin)\n\t\"Plugin 'file:///home/gmarik/path/to/plugin'\n\t\" The sparkup vim script is in a subdirectory of this repo called vim.\n\t\" Pass the path to set the runtimepath properly.\n\tPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\t\" Install L9 and avoid a Naming conflict if you've already installed a\n\t\" different version somewhere else.\n\t\" Plugin 'ascenator/L9', {'name': 'newL9'}\n\n\t\" All of your Plugins must be added before the following line\n\tcall vundle#end()            \" required\n\tfiletype plugin indent on    \" required\n\t\" To ignore plugin indent changes, instead use:\n\t\"filetype plugin on\n\t\"\n\t\" Brief help\n\t\" :PluginList       - lists configured plugins\n\t\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\t\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\t\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\t\"\n\t\" see :h vundle for more details or wiki for FAQ\n\t\" Put your non-Plugin stuff after this line\n\t```\n\t* Install Plugins: 打开vim执行`:PluginInstall` 或者直接输入命令`sudo vim +PluginInstall +qall`\n* 2.Install development tools and CMake:\n\t* `sudo apt-get install build-essential cmake`\n* 3.Make sure you have Python headers installed:\n\t* `sudo apt-get install python-dev python3-dev`\n* 4.安装clang\n\t* `sudo apt-get install clang`\n* 5.Compiling YCM with semantic support for C-family languages:\n\t* `git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe`\n\t* `cd ~/.vim/bundle/YouCompleteMe`\n\t* `./install.py --clang-completer`\n\t* 如果出错执行 `git submodule update --init --recursive`\n* 6.把以下内容复制到.vimrc中\n\n\t```shell\n\t\"----------------------------\"\n\t\"------ YouCompleteMe -------\"\n\t\"----------------------------\"\n\tlet g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'\n\t\n\t\n\t\" YouCompleteMe\n\tset runtimepath+=~/.vim/bundle/YouCompleteMe\n\tlet g:ycm_collect_identifiers_from_tags_files = 1           \" 开启 YCM 基于标签引擎\n\tlet g:ycm_collect_identifiers_from_comments_and_strings = 1 \" 注释与字符串中的内容也用于补全\n\tlet g:syntastic_ignore_files=[\".*\\.py$\"]\n\tlet g:ycm_seed_identifiers_with_syntax = 1                  \" 语法关键字补全\n\tlet g:ycm_complete_in_comments = 1\n\tlet g:ycm_confirm_extra_conf = 0\n\tlet g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  \" 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.\n\tlet g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']\n\tlet g:ycm_complete_in_comments = 1                          \" 在注释输入中也能补全\n\tlet g:ycm_complete_in_strings = 1                           \" 在字符串输入中也能补全\n\tlet g:ycm_collect_identifiers_from_comments_and_strings = 1 \" 注释和字符串中的文字也会被收入补全\n\tlet g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'\n\tlet g:ycm_show_diagnostics_ui = 0                           \" 禁用语法检查\n\tinoremap <expr> <CR> pumvisible() ? \"\\<C-y>\" : \"\\<CR>\" |            \" 回车即选中当前项\n\tnnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|     \" 跳转到定义处\n\t\"let g:ycm_min_num_of_chars_for_completion=2                 \" 从第2个键入字符就开始罗列匹配项\n\t```\n\n按说这样应该就可以用了，不过提示有错误。\n\n`YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.`\n\n在网上找了好久，试了好多方法，最终还是按深度社区的方法才解决。\n[编译安装vim8.0,添加python支持](https://bbs.deepin.org/forum.php?mod=viewthread&tid=43716)\n* 1.`vim --version|grep python` 查看是否支持python\n* 2.`sudo apt-get install python-dev python3-dev libncurses5-dev`，前面安装过python-dev python3-dev,这里会提示已是最新版本\n* 3.`git clone https://github.com/vim/vim.git `\n* 4.`cd ~/vim`\n* 5.`./configure --with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ --enable-multibyte --enable-cscope      --prefix=/usr/local/vim/`,这里python2.7和python3.6要跟你安装的版本相对应\n* 6.`sudo make && sudo make install `\n* 7.`which vim`查看vim安装位置，我的是/usr/bin/vim，然后`sudo cp /usr/local/vim/bin/vim /usr/bin/`\n\n\n截图:\n\n![YCM](/images/YouCompleteMe.JPG)\n","source":"_posts/2018-05-14-在deepin上安装YouCompleteMe.md","raw":"---\nlayout: post\ntitle: 在deepin里安装YouCompleteMe\ndate: 2018-05-14\ntags: [vim, Linux]\n\n---\n\n参考[https://github.com/Valloric/YouCompleteMe](https://github.com/Valloric/YouCompleteMe)\n\n* 1.安装Vundle\n\t* `git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim`\n\t* 把以下内容复制到.vimrc:\n<!-- more -->\n\n\t```shell\n\tset nocompatible              \" be iMproved, required\n\tfiletype off                  \" required\n\n\t\" set the runtime path to include Vundle and initialize\n\tset rtp+=~/.vim/bundle/Vundle.vim\n\tcall vundle#begin()\n\t\" alternatively, pass a path where Vundle should install plugins\n\t\"call vundle#begin('~/some/path/here')\n\n\t\" let Vundle manage Vundle, required\n\tPlugin 'VundleVim/Vundle.vim'\n\n\t\" The following are examples of different formats supported.\n\t\" Keep Plugin commands between vundle#begin/end.\n\t\" plugin on GitHub repo\n\tPlugin 'tpope/vim-fugitive'\n\t\" plugin from http://vim-scripts.org/vim/scripts.html\n\t\" Plugin 'L9'\n\t\" Git plugin not hosted on GitHub\n\tPlugin 'git://git.wincent.com/command-t.git'\n\t\" git repos on your local machine (i.e. when working on your own plugin)\n\t\"Plugin 'file:///home/gmarik/path/to/plugin'\n\t\" The sparkup vim script is in a subdirectory of this repo called vim.\n\t\" Pass the path to set the runtimepath properly.\n\tPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\t\" Install L9 and avoid a Naming conflict if you've already installed a\n\t\" different version somewhere else.\n\t\" Plugin 'ascenator/L9', {'name': 'newL9'}\n\n\t\" All of your Plugins must be added before the following line\n\tcall vundle#end()            \" required\n\tfiletype plugin indent on    \" required\n\t\" To ignore plugin indent changes, instead use:\n\t\"filetype plugin on\n\t\"\n\t\" Brief help\n\t\" :PluginList       - lists configured plugins\n\t\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\t\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\t\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\t\"\n\t\" see :h vundle for more details or wiki for FAQ\n\t\" Put your non-Plugin stuff after this line\n\t```\n\t* Install Plugins: 打开vim执行`:PluginInstall` 或者直接输入命令`sudo vim +PluginInstall +qall`\n* 2.Install development tools and CMake:\n\t* `sudo apt-get install build-essential cmake`\n* 3.Make sure you have Python headers installed:\n\t* `sudo apt-get install python-dev python3-dev`\n* 4.安装clang\n\t* `sudo apt-get install clang`\n* 5.Compiling YCM with semantic support for C-family languages:\n\t* `git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe`\n\t* `cd ~/.vim/bundle/YouCompleteMe`\n\t* `./install.py --clang-completer`\n\t* 如果出错执行 `git submodule update --init --recursive`\n* 6.把以下内容复制到.vimrc中\n\n\t```shell\n\t\"----------------------------\"\n\t\"------ YouCompleteMe -------\"\n\t\"----------------------------\"\n\tlet g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'\n\t\n\t\n\t\" YouCompleteMe\n\tset runtimepath+=~/.vim/bundle/YouCompleteMe\n\tlet g:ycm_collect_identifiers_from_tags_files = 1           \" 开启 YCM 基于标签引擎\n\tlet g:ycm_collect_identifiers_from_comments_and_strings = 1 \" 注释与字符串中的内容也用于补全\n\tlet g:syntastic_ignore_files=[\".*\\.py$\"]\n\tlet g:ycm_seed_identifiers_with_syntax = 1                  \" 语法关键字补全\n\tlet g:ycm_complete_in_comments = 1\n\tlet g:ycm_confirm_extra_conf = 0\n\tlet g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  \" 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.\n\tlet g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']\n\tlet g:ycm_complete_in_comments = 1                          \" 在注释输入中也能补全\n\tlet g:ycm_complete_in_strings = 1                           \" 在字符串输入中也能补全\n\tlet g:ycm_collect_identifiers_from_comments_and_strings = 1 \" 注释和字符串中的文字也会被收入补全\n\tlet g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'\n\tlet g:ycm_show_diagnostics_ui = 0                           \" 禁用语法检查\n\tinoremap <expr> <CR> pumvisible() ? \"\\<C-y>\" : \"\\<CR>\" |            \" 回车即选中当前项\n\tnnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|     \" 跳转到定义处\n\t\"let g:ycm_min_num_of_chars_for_completion=2                 \" 从第2个键入字符就开始罗列匹配项\n\t```\n\n按说这样应该就可以用了，不过提示有错误。\n\n`YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.`\n\n在网上找了好久，试了好多方法，最终还是按深度社区的方法才解决。\n[编译安装vim8.0,添加python支持](https://bbs.deepin.org/forum.php?mod=viewthread&tid=43716)\n* 1.`vim --version|grep python` 查看是否支持python\n* 2.`sudo apt-get install python-dev python3-dev libncurses5-dev`，前面安装过python-dev python3-dev,这里会提示已是最新版本\n* 3.`git clone https://github.com/vim/vim.git `\n* 4.`cd ~/vim`\n* 5.`./configure --with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ --enable-multibyte --enable-cscope      --prefix=/usr/local/vim/`,这里python2.7和python3.6要跟你安装的版本相对应\n* 6.`sudo make && sudo make install `\n* 7.`which vim`查看vim安装位置，我的是/usr/bin/vim，然后`sudo cp /usr/local/vim/bin/vim /usr/bin/`\n\n\n截图:\n\n![YCM](/images/YouCompleteMe.JPG)\n","slug":"在deepin上安装YouCompleteMe","published":1,"updated":"2019-03-29T08:18:01.166Z","comments":1,"photos":[],"link":"","_id":"cjutuhpeo000lifin6ltjcefa","content":"<p>参考<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"noopener\">https://github.com/Valloric/YouCompleteMe</a></p>\n<ul>\n<li><p>1.安装Vundle</p>\n<ul>\n<li><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>\n<li><p>把以下内容复制到.vimrc:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set nocompatible              \" be iMproved, required</span><br><span class=\"line\">filetype off                  \" required</span><br><span class=\"line\"></span><br><span class=\"line\">\" set the runtime path to include Vundle and initialize</span><br><span class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class=\"line\">call vundle#begin()</span><br><span class=\"line\">\" alternatively, pass a path where Vundle should install plugins</span><br><span class=\"line\">\"call vundle#begin('~/some/path/here')</span><br><span class=\"line\"></span><br><span class=\"line\">\" let Vundle manage Vundle, required</span><br><span class=\"line\">Plugin 'VundleVim/Vundle.vim'</span><br><span class=\"line\"></span><br><span class=\"line\">\" The following are examples of different formats supported.</span><br><span class=\"line\">\" Keep Plugin commands between vundle#begin/end.</span><br><span class=\"line\">\" plugin on GitHub repo</span><br><span class=\"line\">Plugin 'tpope/vim-fugitive'</span><br><span class=\"line\">\" plugin from http://vim-scripts.org/vim/scripts.html</span><br><span class=\"line\">\" Plugin 'L9'</span><br><span class=\"line\">\" Git plugin not hosted on GitHub</span><br><span class=\"line\">Plugin 'git://git.wincent.com/command-t.git'</span><br><span class=\"line\">\" git repos on your local machine (i.e. when working on your own plugin)</span><br><span class=\"line\">\"Plugin 'file:///home/gmarik/path/to/plugin'</span><br><span class=\"line\">\" The sparkup vim script is in a subdirectory of this repo called vim.</span><br><span class=\"line\">\" Pass the path to set the runtimepath properly.</span><br><span class=\"line\">Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span><br><span class=\"line\">\" Install L9 and avoid a Naming conflict if you've already installed a</span><br><span class=\"line\">\" different version somewhere else.</span><br><span class=\"line\">\" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\" All of your Plugins must be added before the following line</span><br><span class=\"line\">call vundle#end()            \" required</span><br><span class=\"line\">filetype plugin indent on    \" required</span><br><span class=\"line\">\" To ignore plugin indent changes, instead use:</span><br><span class=\"line\">\"filetype plugin on</span><br><span class=\"line\">\"</span><br><span class=\"line\">\" Brief help</span><br><span class=\"line\">\" :PluginList       - lists configured plugins</span><br><span class=\"line\">\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span><br><span class=\"line\">\" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span><br><span class=\"line\">\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span><br><span class=\"line\">\"</span><br><span class=\"line\">\" see :h vundle for more details or wiki for FAQ</span><br><span class=\"line\">\" Put your non-Plugin stuff after this line</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Install Plugins: 打开vim执行<code>:PluginInstall</code> 或者直接输入命令<code>sudo vim +PluginInstall +qall</code></p>\n</li>\n</ul>\n</li>\n<li>2.Install development tools and CMake:<ul>\n<li><code>sudo apt-get install build-essential cmake</code></li>\n</ul>\n</li>\n<li>3.Make sure you have Python headers installed:<ul>\n<li><code>sudo apt-get install python-dev python3-dev</code></li>\n</ul>\n</li>\n<li>4.安装clang<ul>\n<li><code>sudo apt-get install clang</code></li>\n</ul>\n</li>\n<li>5.Compiling YCM with semantic support for C-family languages:<ul>\n<li><code>git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe</code></li>\n<li><code>cd ~/.vim/bundle/YouCompleteMe</code></li>\n<li><code>./install.py --clang-completer</code></li>\n<li>如果出错执行 <code>git submodule update --init --recursive</code></li>\n</ul>\n</li>\n<li><p>6.把以下内容复制到.vimrc中</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"----------------------------\"</span><br><span class=\"line\">\"------ YouCompleteMe -------\"</span><br><span class=\"line\">\"----------------------------\"</span><br><span class=\"line\">let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\" YouCompleteMe</span><br><span class=\"line\">set runtimepath+=~/.vim/bundle/YouCompleteMe</span><br><span class=\"line\">let g:ycm_collect_identifiers_from_tags_files = 1           \" 开启 YCM 基于标签引擎</span><br><span class=\"line\">let g:ycm_collect_identifiers_from_comments_and_strings = 1 \" 注释与字符串中的内容也用于补全</span><br><span class=\"line\">let g:syntastic_ignore_files=[\".*\\.py$\"]</span><br><span class=\"line\">let g:ycm_seed_identifiers_with_syntax = 1                  \" 语法关键字补全</span><br><span class=\"line\">let g:ycm_complete_in_comments = 1</span><br><span class=\"line\">let g:ycm_confirm_extra_conf = 0</span><br><span class=\"line\">let g:ycm_key_list_select_completion = ['&lt;c-n&gt;', '&lt;Down&gt;']  \" 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.</span><br><span class=\"line\">let g:ycm_key_list_previous_completion = ['&lt;c-p&gt;', '&lt;Up&gt;']</span><br><span class=\"line\">let g:ycm_complete_in_comments = 1                          \" 在注释输入中也能补全</span><br><span class=\"line\">let g:ycm_complete_in_strings = 1                           \" 在字符串输入中也能补全</span><br><span class=\"line\">let g:ycm_collect_identifiers_from_comments_and_strings = 1 \" 注释和字符串中的文字也会被收入补全</span><br><span class=\"line\">let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span><br><span class=\"line\">let g:ycm_show_diagnostics_ui = 0                           \" 禁用语法检查</span><br><span class=\"line\">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? \"\\&lt;C-y&gt;\" : \"\\&lt;CR&gt;\" |            \" 回车即选中当前项</span><br><span class=\"line\">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;|     \" 跳转到定义处</span><br><span class=\"line\">\"let g:ycm_min_num_of_chars_for_completion=2                 \" 从第2个键入字符就开始罗列匹配项</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>按说这样应该就可以用了，不过提示有错误。</p>\n<p><code>YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.</code></p>\n<p>在网上找了好久，试了好多方法，最终还是按深度社区的方法才解决。<br><a href=\"https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=43716\" target=\"_blank\" rel=\"noopener\">编译安装vim8.0,添加python支持</a></p>\n<ul>\n<li>1.<code>vim --version|grep python</code> 查看是否支持python</li>\n<li>2.<code>sudo apt-get install python-dev python3-dev libncurses5-dev</code>，前面安装过python-dev python3-dev,这里会提示已是最新版本</li>\n<li>3.<code>git clone https://github.com/vim/vim.git</code></li>\n<li>4.<code>cd ~/vim</code></li>\n<li>5.<code>./configure --with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ --enable-multibyte --enable-cscope      --prefix=/usr/local/vim/</code>,这里python2.7和python3.6要跟你安装的版本相对应</li>\n<li>6.<code>sudo make &amp;&amp; sudo make install</code></li>\n<li>7.<code>which vim</code>查看vim安装位置，我的是/usr/bin/vim，然后<code>sudo cp /usr/local/vim/bin/vim /usr/bin/</code></li>\n</ul>\n<p>截图:</p>\n<p><img src=\"/images/YouCompleteMe.JPG\" alt=\"YCM\"></p>\n","site":{"data":{}},"excerpt":"<p>参考<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"noopener\">https://github.com/Valloric/YouCompleteMe</a></p>\n<ul>\n<li><p>1.安装Vundle</p>\n<ul>\n<li><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>\n<li><p>把以下内容复制到.vimrc:</p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set nocompatible              \" be iMproved, required</span><br><span class=\"line\">filetype off                  \" required</span><br><span class=\"line\"></span><br><span class=\"line\">\" set the runtime path to include Vundle and initialize</span><br><span class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class=\"line\">call vundle#begin()</span><br><span class=\"line\">\" alternatively, pass a path where Vundle should install plugins</span><br><span class=\"line\">\"call vundle#begin('~/some/path/here')</span><br><span class=\"line\"></span><br><span class=\"line\">\" let Vundle manage Vundle, required</span><br><span class=\"line\">Plugin 'VundleVim/Vundle.vim'</span><br><span class=\"line\"></span><br><span class=\"line\">\" The following are examples of different formats supported.</span><br><span class=\"line\">\" Keep Plugin commands between vundle#begin/end.</span><br><span class=\"line\">\" plugin on GitHub repo</span><br><span class=\"line\">Plugin 'tpope/vim-fugitive'</span><br><span class=\"line\">\" plugin from http://vim-scripts.org/vim/scripts.html</span><br><span class=\"line\">\" Plugin 'L9'</span><br><span class=\"line\">\" Git plugin not hosted on GitHub</span><br><span class=\"line\">Plugin 'git://git.wincent.com/command-t.git'</span><br><span class=\"line\">\" git repos on your local machine (i.e. when working on your own plugin)</span><br><span class=\"line\">\"Plugin 'file:///home/gmarik/path/to/plugin'</span><br><span class=\"line\">\" The sparkup vim script is in a subdirectory of this repo called vim.</span><br><span class=\"line\">\" Pass the path to set the runtimepath properly.</span><br><span class=\"line\">Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span><br><span class=\"line\">\" Install L9 and avoid a Naming conflict if you've already installed a</span><br><span class=\"line\">\" different version somewhere else.</span><br><span class=\"line\">\" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\" All of your Plugins must be added before the following line</span><br><span class=\"line\">call vundle#end()            \" required</span><br><span class=\"line\">filetype plugin indent on    \" required</span><br><span class=\"line\">\" To ignore plugin indent changes, instead use:</span><br><span class=\"line\">\"filetype plugin on</span><br><span class=\"line\">\"</span><br><span class=\"line\">\" Brief help</span><br><span class=\"line\">\" :PluginList       - lists configured plugins</span><br><span class=\"line\">\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span><br><span class=\"line\">\" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span><br><span class=\"line\">\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span><br><span class=\"line\">\"</span><br><span class=\"line\">\" see :h vundle for more details or wiki for FAQ</span><br><span class=\"line\">\" Put your non-Plugin stuff after this line</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Install Plugins: 打开vim执行<code>:PluginInstall</code> 或者直接输入命令<code>sudo vim +PluginInstall +qall</code></p>\n</li>\n</ul>\n</li>\n<li>2.Install development tools and CMake:<ul>\n<li><code>sudo apt-get install build-essential cmake</code></li>\n</ul>\n</li>\n<li>3.Make sure you have Python headers installed:<ul>\n<li><code>sudo apt-get install python-dev python3-dev</code></li>\n</ul>\n</li>\n<li>4.安装clang<ul>\n<li><code>sudo apt-get install clang</code></li>\n</ul>\n</li>\n<li>5.Compiling YCM with semantic support for C-family languages:<ul>\n<li><code>git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe</code></li>\n<li><code>cd ~/.vim/bundle/YouCompleteMe</code></li>\n<li><code>./install.py --clang-completer</code></li>\n<li>如果出错执行 <code>git submodule update --init --recursive</code></li>\n</ul>\n</li>\n<li><p>6.把以下内容复制到.vimrc中</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"----------------------------\"</span><br><span class=\"line\">\"------ YouCompleteMe -------\"</span><br><span class=\"line\">\"----------------------------\"</span><br><span class=\"line\">let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\" YouCompleteMe</span><br><span class=\"line\">set runtimepath+=~/.vim/bundle/YouCompleteMe</span><br><span class=\"line\">let g:ycm_collect_identifiers_from_tags_files = 1           \" 开启 YCM 基于标签引擎</span><br><span class=\"line\">let g:ycm_collect_identifiers_from_comments_and_strings = 1 \" 注释与字符串中的内容也用于补全</span><br><span class=\"line\">let g:syntastic_ignore_files=[\".*\\.py$\"]</span><br><span class=\"line\">let g:ycm_seed_identifiers_with_syntax = 1                  \" 语法关键字补全</span><br><span class=\"line\">let g:ycm_complete_in_comments = 1</span><br><span class=\"line\">let g:ycm_confirm_extra_conf = 0</span><br><span class=\"line\">let g:ycm_key_list_select_completion = ['&lt;c-n&gt;', '&lt;Down&gt;']  \" 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.</span><br><span class=\"line\">let g:ycm_key_list_previous_completion = ['&lt;c-p&gt;', '&lt;Up&gt;']</span><br><span class=\"line\">let g:ycm_complete_in_comments = 1                          \" 在注释输入中也能补全</span><br><span class=\"line\">let g:ycm_complete_in_strings = 1                           \" 在字符串输入中也能补全</span><br><span class=\"line\">let g:ycm_collect_identifiers_from_comments_and_strings = 1 \" 注释和字符串中的文字也会被收入补全</span><br><span class=\"line\">let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span><br><span class=\"line\">let g:ycm_show_diagnostics_ui = 0                           \" 禁用语法检查</span><br><span class=\"line\">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? \"\\&lt;C-y&gt;\" : \"\\&lt;CR&gt;\" |            \" 回车即选中当前项</span><br><span class=\"line\">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;|     \" 跳转到定义处</span><br><span class=\"line\">\"let g:ycm_min_num_of_chars_for_completion=2                 \" 从第2个键入字符就开始罗列匹配项</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>按说这样应该就可以用了，不过提示有错误。</p>\n<p><code>YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.</code></p>\n<p>在网上找了好久，试了好多方法，最终还是按深度社区的方法才解决。<br><a href=\"https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=43716\" target=\"_blank\" rel=\"noopener\">编译安装vim8.0,添加python支持</a></p>\n<ul>\n<li>1.<code>vim --version|grep python</code> 查看是否支持python</li>\n<li>2.<code>sudo apt-get install python-dev python3-dev libncurses5-dev</code>，前面安装过python-dev python3-dev,这里会提示已是最新版本</li>\n<li>3.<code>git clone https://github.com/vim/vim.git</code></li>\n<li>4.<code>cd ~/vim</code></li>\n<li>5.<code>./configure --with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ --enable-multibyte --enable-cscope      --prefix=/usr/local/vim/</code>,这里python2.7和python3.6要跟你安装的版本相对应</li>\n<li>6.<code>sudo make &amp;&amp; sudo make install</code></li>\n<li>7.<code>which vim</code>查看vim安装位置，我的是/usr/bin/vim，然后<code>sudo cp /usr/local/vim/bin/vim /usr/bin/</code></li>\n</ul>\n<p>截图:</p>\n<p><img src=\"/images/YouCompleteMe.JPG\" alt=\"YCM\"></p>"},{"layout":"post","title":"LPA算法C++实现及模块度计算","date":"2018-11-11T16:00:00.000Z","_content":"\n# 前言\n\n这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，\n因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。\n\n<!-- more -->\n我先看的LPA（毕竟算法思想最简单,hhh，怪我太笨了），又看了Louvain。\nLouvain算法的代码，作者在文章里给了网址，是C++写的，我下到本地运行并认真研究了一下，写的真挺好的。\n然后昨天突发奇想，干脆自己仿照Louvain的代码风格，用C++把LPA实现一下，\n因为在网上只看到过Python和Java实现的LPA算法，还没见过C++实现的。\n\n然后昨天把框架写好，今天把细节补全，最后又从Louvain的代码里搬来了模块度的计算部分。\n最后调试好，就OK啦。\n\n# 1.LPA基本思想\n\n给每一个节点添加标签，初始时可以以各自的nodeid作为标签，标签传播过程中将一个节点的邻居节点的标签中\n数量最多的标签作为该节点的标签。标签即代表所属社区。\n\n* 1 初始时，给每个节点一个标签，通常以其id作为初始标签。\n* 2 每个节点使用其邻居节点的标签中数量最多的标签更新自身标签。\n* 3 反复执行步骤2，直到满足终止条件。(至于终止条件是什么，这个可以自己设置, \n    比如我就直接设定迭代5次结束，也可以根据每次迭代模块度的增加程度来设定，\n\t网上有说直到每个节点的标签不再变化为止，其实这比较难判定，\n\t而且据研究，大部分网络经过5次迭代，其95%的节点标签都不再变化，\n\t后面每次迭代虽部分标签还在变化，但相比来说性价比不高了)\n\nLPA算法的优点是收敛周期很短，而且不需要任何先验知识。时间复杂度接近线性：对节点分配标签为O(n)，\n每次迭代需要遍历所有的边两次，也就是O(2m)，所以时间复杂度为O(n+2m)，其中n为节点数，m为边数。\n\n同步更新和异步更新还没搞懂，回头看看再说。\n\n**缺点** \n* 1 由于迭代过程中可能会出现随机选择的情况，所以LPA算法具有不稳定性，也就是同一个网络每次执行的结果可能都不一样。\n* 2 可能出现巨型社区。\n\n**算法改进思路**\n* 目前还没\n\n# 2.数据集\n\n***dolphins***\n\n# 3.代码\n\n```c++\n#include \"lpa.h\"\n\nusing namespace std;\n\n\nvoid display_time(const char *str){\n\ttime_t rawtime;\n\ttime ( &rawtime );\n\tcerr << str << \" : \" << ctime (&rawtime);\n}\n\nint main(int argc, char **argv){\n\tsrand(time(NULL));\n\n\t//parse_args(argc, argv);\n\tif(argc != 2){\n\t\tcerr << \"argc not 2\" << endl;\n\t}\n\tstring filename = argv[1];\n\tcout << \"filename = \" << filename << endl;\n\t\n\ttime_t time_begin, time_end;\n\ttime(&time_begin);\n\tdisplay_time(\"start\");\n\n\t//sleep(3);\n\tLPA lpa(filename);\n\tcout << \"初始模块度 = \" << lpa.modularity() << endl;\n\tfor(int i = 0; i < 5; i++){\n\t\tlpa.labeled();\n\t\tlpa.display();\n\t}\n\n\tdisplay_time(\"end\");\n\n\ttime(&time_end);\n\treturn 0;\n}\n```\n\n# 4.运行结果\n\n![运行结果1](/images/lpa1.png)\n![运行结果2](/images/lpa2.png)\n","source":"_posts/2018-11-12-lpa算法c++实现及模块度计算.md","raw":"---\nlayout: post\ntitle: LPA算法C++实现及模块度计算\ndate: 2018-11-12\ntags: [复杂网络, LPA]\n\n---\n\n# 前言\n\n这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，\n因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。\n\n<!-- more -->\n我先看的LPA（毕竟算法思想最简单,hhh，怪我太笨了），又看了Louvain。\nLouvain算法的代码，作者在文章里给了网址，是C++写的，我下到本地运行并认真研究了一下，写的真挺好的。\n然后昨天突发奇想，干脆自己仿照Louvain的代码风格，用C++把LPA实现一下，\n因为在网上只看到过Python和Java实现的LPA算法，还没见过C++实现的。\n\n然后昨天把框架写好，今天把细节补全，最后又从Louvain的代码里搬来了模块度的计算部分。\n最后调试好，就OK啦。\n\n# 1.LPA基本思想\n\n给每一个节点添加标签，初始时可以以各自的nodeid作为标签，标签传播过程中将一个节点的邻居节点的标签中\n数量最多的标签作为该节点的标签。标签即代表所属社区。\n\n* 1 初始时，给每个节点一个标签，通常以其id作为初始标签。\n* 2 每个节点使用其邻居节点的标签中数量最多的标签更新自身标签。\n* 3 反复执行步骤2，直到满足终止条件。(至于终止条件是什么，这个可以自己设置, \n    比如我就直接设定迭代5次结束，也可以根据每次迭代模块度的增加程度来设定，\n\t网上有说直到每个节点的标签不再变化为止，其实这比较难判定，\n\t而且据研究，大部分网络经过5次迭代，其95%的节点标签都不再变化，\n\t后面每次迭代虽部分标签还在变化，但相比来说性价比不高了)\n\nLPA算法的优点是收敛周期很短，而且不需要任何先验知识。时间复杂度接近线性：对节点分配标签为O(n)，\n每次迭代需要遍历所有的边两次，也就是O(2m)，所以时间复杂度为O(n+2m)，其中n为节点数，m为边数。\n\n同步更新和异步更新还没搞懂，回头看看再说。\n\n**缺点** \n* 1 由于迭代过程中可能会出现随机选择的情况，所以LPA算法具有不稳定性，也就是同一个网络每次执行的结果可能都不一样。\n* 2 可能出现巨型社区。\n\n**算法改进思路**\n* 目前还没\n\n# 2.数据集\n\n***dolphins***\n\n# 3.代码\n\n```c++\n#include \"lpa.h\"\n\nusing namespace std;\n\n\nvoid display_time(const char *str){\n\ttime_t rawtime;\n\ttime ( &rawtime );\n\tcerr << str << \" : \" << ctime (&rawtime);\n}\n\nint main(int argc, char **argv){\n\tsrand(time(NULL));\n\n\t//parse_args(argc, argv);\n\tif(argc != 2){\n\t\tcerr << \"argc not 2\" << endl;\n\t}\n\tstring filename = argv[1];\n\tcout << \"filename = \" << filename << endl;\n\t\n\ttime_t time_begin, time_end;\n\ttime(&time_begin);\n\tdisplay_time(\"start\");\n\n\t//sleep(3);\n\tLPA lpa(filename);\n\tcout << \"初始模块度 = \" << lpa.modularity() << endl;\n\tfor(int i = 0; i < 5; i++){\n\t\tlpa.labeled();\n\t\tlpa.display();\n\t}\n\n\tdisplay_time(\"end\");\n\n\ttime(&time_end);\n\treturn 0;\n}\n```\n\n# 4.运行结果\n\n![运行结果1](/images/lpa1.png)\n![运行结果2](/images/lpa2.png)\n","slug":"lpa算法c++实现及模块度计算","published":1,"updated":"2019-05-16T09:14:51.587Z","_id":"cjutuhper000nifinkk4m8wyo","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，<br>因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。</p>\n<a id=\"more\"></a>\n<p>我先看的LPA（毕竟算法思想最简单,hhh，怪我太笨了），又看了Louvain。<br>Louvain算法的代码，作者在文章里给了网址，是C++写的，我下到本地运行并认真研究了一下，写的真挺好的。<br>然后昨天突发奇想，干脆自己仿照Louvain的代码风格，用C++把LPA实现一下，<br>因为在网上只看到过Python和Java实现的LPA算法，还没见过C++实现的。</p>\n<p>然后昨天把框架写好，今天把细节补全，最后又从Louvain的代码里搬来了模块度的计算部分。<br>最后调试好，就OK啦。</p>\n<h1 id=\"1-LPA基本思想\"><a href=\"#1-LPA基本思想\" class=\"headerlink\" title=\"1.LPA基本思想\"></a>1.LPA基本思想</h1><p>给每一个节点添加标签，初始时可以以各自的nodeid作为标签，标签传播过程中将一个节点的邻居节点的标签中<br>数量最多的标签作为该节点的标签。标签即代表所属社区。</p>\n<ul>\n<li>1 初始时，给每个节点一个标签，通常以其id作为初始标签。</li>\n<li>2 每个节点使用其邻居节点的标签中数量最多的标签更新自身标签。</li>\n<li>3 反复执行步骤2，直到满足终止条件。(至于终止条件是什么，这个可以自己设置,<br>  比如我就直接设定迭代5次结束，也可以根据每次迭代模块度的增加程度来设定，<br>  网上有说直到每个节点的标签不再变化为止，其实这比较难判定，<br>  而且据研究，大部分网络经过5次迭代，其95%的节点标签都不再变化，<br>  后面每次迭代虽部分标签还在变化，但相比来说性价比不高了)</li>\n</ul>\n<p>LPA算法的优点是收敛周期很短，而且不需要任何先验知识。时间复杂度接近线性：对节点分配标签为O(n)，<br>每次迭代需要遍历所有的边两次，也就是O(2m)，所以时间复杂度为O(n+2m)，其中n为节点数，m为边数。</p>\n<p>同步更新和异步更新还没搞懂，回头看看再说。</p>\n<p><strong>缺点</strong> </p>\n<ul>\n<li>1 由于迭代过程中可能会出现随机选择的情况，所以LPA算法具有不稳定性，也就是同一个网络每次执行的结果可能都不一样。</li>\n<li>2 可能出现巨型社区。</li>\n</ul>\n<p><strong>算法改进思路</strong></p>\n<ul>\n<li>目前还没</li>\n</ul>\n<h1 id=\"2-数据集\"><a href=\"#2-数据集\" class=\"headerlink\" title=\"2.数据集\"></a>2.数据集</h1><p><strong><em>dolphins</em></strong></p>\n<h1 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3.代码\"></a>3.代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"lpa.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display_time</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> rawtime;</span><br><span class=\"line\">\ttime ( &amp;rawtime );</span><br><span class=\"line\">\t<span class=\"built_in\">cerr</span> &lt;&lt; str &lt;&lt; <span class=\"string\">\" : \"</span> &lt;&lt; ctime (&amp;rawtime);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">\tsrand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//parse_args(argc, argv);</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(argc != <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"argc not 2\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> filename = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"filename = \"</span> &lt;&lt; filename &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> time_begin, time_end;</span><br><span class=\"line\">\ttime(&amp;time_begin);</span><br><span class=\"line\">\tdisplay_time(<span class=\"string\">\"start\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//sleep(3);</span></span><br><span class=\"line\">\t<span class=\"function\">LPA <span class=\"title\">lpa</span><span class=\"params\">(filename)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"初始模块度 = \"</span> &lt;&lt; lpa.modularity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">\t\tlpa.labeled();</span><br><span class=\"line\">\t\tlpa.display();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdisplay_time(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime(&amp;time_end);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-运行结果\"><a href=\"#4-运行结果\" class=\"headerlink\" title=\"4.运行结果\"></a>4.运行结果</h1><p><img src=\"/images/lpa1.png\" alt=\"运行结果1\"><br><img src=\"/images/lpa2.png\" alt=\"运行结果2\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，<br>因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。</p>","more":"<p>我先看的LPA（毕竟算法思想最简单,hhh，怪我太笨了），又看了Louvain。<br>Louvain算法的代码，作者在文章里给了网址，是C++写的，我下到本地运行并认真研究了一下，写的真挺好的。<br>然后昨天突发奇想，干脆自己仿照Louvain的代码风格，用C++把LPA实现一下，<br>因为在网上只看到过Python和Java实现的LPA算法，还没见过C++实现的。</p>\n<p>然后昨天把框架写好，今天把细节补全，最后又从Louvain的代码里搬来了模块度的计算部分。<br>最后调试好，就OK啦。</p>\n<h1 id=\"1-LPA基本思想\"><a href=\"#1-LPA基本思想\" class=\"headerlink\" title=\"1.LPA基本思想\"></a>1.LPA基本思想</h1><p>给每一个节点添加标签，初始时可以以各自的nodeid作为标签，标签传播过程中将一个节点的邻居节点的标签中<br>数量最多的标签作为该节点的标签。标签即代表所属社区。</p>\n<ul>\n<li>1 初始时，给每个节点一个标签，通常以其id作为初始标签。</li>\n<li>2 每个节点使用其邻居节点的标签中数量最多的标签更新自身标签。</li>\n<li>3 反复执行步骤2，直到满足终止条件。(至于终止条件是什么，这个可以自己设置,<br>  比如我就直接设定迭代5次结束，也可以根据每次迭代模块度的增加程度来设定，<br>  网上有说直到每个节点的标签不再变化为止，其实这比较难判定，<br>  而且据研究，大部分网络经过5次迭代，其95%的节点标签都不再变化，<br>  后面每次迭代虽部分标签还在变化，但相比来说性价比不高了)</li>\n</ul>\n<p>LPA算法的优点是收敛周期很短，而且不需要任何先验知识。时间复杂度接近线性：对节点分配标签为O(n)，<br>每次迭代需要遍历所有的边两次，也就是O(2m)，所以时间复杂度为O(n+2m)，其中n为节点数，m为边数。</p>\n<p>同步更新和异步更新还没搞懂，回头看看再说。</p>\n<p><strong>缺点</strong> </p>\n<ul>\n<li>1 由于迭代过程中可能会出现随机选择的情况，所以LPA算法具有不稳定性，也就是同一个网络每次执行的结果可能都不一样。</li>\n<li>2 可能出现巨型社区。</li>\n</ul>\n<p><strong>算法改进思路</strong></p>\n<ul>\n<li>目前还没</li>\n</ul>\n<h1 id=\"2-数据集\"><a href=\"#2-数据集\" class=\"headerlink\" title=\"2.数据集\"></a>2.数据集</h1><p><strong><em>dolphins</em></strong></p>\n<h1 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3.代码\"></a>3.代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"lpa.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display_time</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> rawtime;</span><br><span class=\"line\">\ttime ( &amp;rawtime );</span><br><span class=\"line\">\t<span class=\"built_in\">cerr</span> &lt;&lt; str &lt;&lt; <span class=\"string\">\" : \"</span> &lt;&lt; ctime (&amp;rawtime);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">\tsrand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//parse_args(argc, argv);</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(argc != <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"argc not 2\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> filename = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"filename = \"</span> &lt;&lt; filename &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> time_begin, time_end;</span><br><span class=\"line\">\ttime(&amp;time_begin);</span><br><span class=\"line\">\tdisplay_time(<span class=\"string\">\"start\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//sleep(3);</span></span><br><span class=\"line\">\t<span class=\"function\">LPA <span class=\"title\">lpa</span><span class=\"params\">(filename)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"初始模块度 = \"</span> &lt;&lt; lpa.modularity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">\t\tlpa.labeled();</span><br><span class=\"line\">\t\tlpa.display();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdisplay_time(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime(&amp;time_end);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-运行结果\"><a href=\"#4-运行结果\" class=\"headerlink\" title=\"4.运行结果\"></a>4.运行结果</h1><p><img src=\"/images/lpa1.png\" alt=\"运行结果1\"><br><img src=\"/images/lpa2.png\" alt=\"运行结果2\"></p>"},{"layout":"post","title":"斐波那契数列三种解法及时间复杂度分析","date":"2018-12-25T16:00:00.000Z","_content":"\n# 1.定义及递推公式\n斐波那契数列(Fibonacci sequence),又称黄金分割数列，因数学家Leonardoda Fibonacci以兔子繁殖为例子而引入，故又称兔子数列。\n1,1,2,3,5,8,13...\n即：f(1) = 1,f(2) = 1,f(3) = 2,f(4) = 3...\n添加0项后,Fibonacci数列归纳如下：\n<!-- more -->\n* f(n) = f(n-1) + f(n-2), n >= 2;\n* f(0) = 0;\n* f(1) = 1;\n\n# 2.通项公式\n![txgs](/images/fibonacci.jpg)\n\n# 3.方法一：递归求解(时间复杂度O(2^n))\n```c\nlong fibonacci(unsigned n)\n{\n    if (n < 2) return n;\n    return fibonacci(n-1) + fibonacci(n-2);\n}\n```\n![txgs](/images/fb4.png) ![txgs](/images/fbn.png)\n\n时间复杂度分析：可以看到,递归解法存在大量的重复计算。\n求f(n)的过程可以用一颗二叉树表示,树中的每个节点就代表一次基本计算.\n易知,树的高度为n,一棵高度为n的满二叉树的节点个数为2^n-1,当然,上图中的树肯定不是满二叉树,但也可以看出来,该树的节点个数\n大于满二叉树节点数的一半,即（2^n-1)/2,设计算次数为T(n),可知(2^n-1)/2 < T(n) < 2^n-1.\n因此该算法的时间复杂度为O(2^n).\n\n# 4.方法二：利用动态规划(dp)求解(时间复杂度O(n))\n```c\nlong fibonacci_dp(unsigned n)\n{\n    if (n < 2) return n;\n    long dp[n+1] = {0};\n    dp[0] = 0;\n    dp[1] = 1;\n    unsigned i = 2;\n    while(i<=n){\n        dp[i] = dp[i-1] + dp[i-2];\n        i++;\n    }\n    return dp[n];\n}\n```\n\n显然,动态规划解法的时间复杂度为O(n).\n\n# 5.方法三：利用矩阵求解(时间复杂度O(logn)\n\n```c\nclass Matrix\n{\npublic:\n    unsigned n;\n    long **m;\n    Matrix(unsigned num)\n    {\n        m=new long*[num];\n        for (unsigned i=0; i<num; i++) {\n            m[i]=new long[num];\n        }\n        n=num;\n        clear();\n    }\n    void clear()\n    {\n        for (unsigned i=0; i<n; ++i) {\n            for (unsigned j=0; j<n; ++j) {\n                m[i][j]=0;\n            }\n        }\n    }\n    void unit()\n    {\n        clear();\n        for (unsigned i=0; i<n; ++i) {\n            m[i][i]=1;\n        }\n    }\n    Matrix operator=(const Matrix mtx)\n    {\n        Matrix(mtx.n);\n        for (unsigned i=0; i<mtx.n; ++i) {\n            for (unsigned j=0; j<mtx.n; ++j) {\n                m[i][j]=mtx.m[i][j];\n            }\n        }\n        return *this;\n    }\n    Matrix operator*(const Matrix &mtx)\n    {\n        Matrix result(mtx.n);\n        result.clear();\n        for (unsigned i=0; i<mtx.n; ++i) {\n            for (unsigned j=0; j<mtx.n; ++j) {\n                for (unsigned k=0; k<mtx.n; ++k) {\n                    result.m[i][j]+=m[i][k]*mtx.m[k][j];\n                }   \n            }\n        }\n        return result;\n    }\n};\n\nlong fb_matrix(unsigned n) {\n    unsigned num=2;\n    Matrix first(num);\n    first.m[0][0]=1;\n    first.m[0][1]=1;\n    first.m[1][0]=1;\n    first.m[1][1]=0;\n    Matrix result(num);\n    result.unit();\n    unsigned t=n-2;\n    while (t) {\n        if (t%2) {\n            result=result*first;\n            }\n        first=first*first;\n        t=t/2;\n    }\n    return result.m[0][0]+result.m[0][1];\n}\n```\n根据递推公式可以得到\n![matrix](/images/fibonacci_matrix.png)\n因而计算f(n)就简化为计算矩阵的(n-2)次方，而计算矩阵的(n-2)次方，又可以分解为计算矩阵的(n-2)/2次方的平方,逐步分解,直到(n-2)/(2^m)==1,因而时间复杂度为O(logn).\nmatrix解法的时间复杂度为O(logn).\n\n# 6.运行结果比较\n\n![40](/images/fibonacci_result40.png)\n![90](/images/fibonacci_result90.png)\n\n* 可以看到，后两种解法比递归解法明显要快很多。\n* 当n = 40时,动态规划解法比矩阵解法还要快些,都比递归解法快得多。\n* 当n取更大些，比如n = 90时,动态规划解法就比矩阵解法慢了。\n","source":"_posts/2018-12-26-three_method_of_fibonacci.md","raw":"---\nlayout: post\ntitle: 斐波那契数列三种解法及时间复杂度分析\ndate: 2018-12-26\ntags: [C++, 斐波那契, 技术]\n\n---\n\n# 1.定义及递推公式\n斐波那契数列(Fibonacci sequence),又称黄金分割数列，因数学家Leonardoda Fibonacci以兔子繁殖为例子而引入，故又称兔子数列。\n1,1,2,3,5,8,13...\n即：f(1) = 1,f(2) = 1,f(3) = 2,f(4) = 3...\n添加0项后,Fibonacci数列归纳如下：\n<!-- more -->\n* f(n) = f(n-1) + f(n-2), n >= 2;\n* f(0) = 0;\n* f(1) = 1;\n\n# 2.通项公式\n![txgs](/images/fibonacci.jpg)\n\n# 3.方法一：递归求解(时间复杂度O(2^n))\n```c\nlong fibonacci(unsigned n)\n{\n    if (n < 2) return n;\n    return fibonacci(n-1) + fibonacci(n-2);\n}\n```\n![txgs](/images/fb4.png) ![txgs](/images/fbn.png)\n\n时间复杂度分析：可以看到,递归解法存在大量的重复计算。\n求f(n)的过程可以用一颗二叉树表示,树中的每个节点就代表一次基本计算.\n易知,树的高度为n,一棵高度为n的满二叉树的节点个数为2^n-1,当然,上图中的树肯定不是满二叉树,但也可以看出来,该树的节点个数\n大于满二叉树节点数的一半,即（2^n-1)/2,设计算次数为T(n),可知(2^n-1)/2 < T(n) < 2^n-1.\n因此该算法的时间复杂度为O(2^n).\n\n# 4.方法二：利用动态规划(dp)求解(时间复杂度O(n))\n```c\nlong fibonacci_dp(unsigned n)\n{\n    if (n < 2) return n;\n    long dp[n+1] = {0};\n    dp[0] = 0;\n    dp[1] = 1;\n    unsigned i = 2;\n    while(i<=n){\n        dp[i] = dp[i-1] + dp[i-2];\n        i++;\n    }\n    return dp[n];\n}\n```\n\n显然,动态规划解法的时间复杂度为O(n).\n\n# 5.方法三：利用矩阵求解(时间复杂度O(logn)\n\n```c\nclass Matrix\n{\npublic:\n    unsigned n;\n    long **m;\n    Matrix(unsigned num)\n    {\n        m=new long*[num];\n        for (unsigned i=0; i<num; i++) {\n            m[i]=new long[num];\n        }\n        n=num;\n        clear();\n    }\n    void clear()\n    {\n        for (unsigned i=0; i<n; ++i) {\n            for (unsigned j=0; j<n; ++j) {\n                m[i][j]=0;\n            }\n        }\n    }\n    void unit()\n    {\n        clear();\n        for (unsigned i=0; i<n; ++i) {\n            m[i][i]=1;\n        }\n    }\n    Matrix operator=(const Matrix mtx)\n    {\n        Matrix(mtx.n);\n        for (unsigned i=0; i<mtx.n; ++i) {\n            for (unsigned j=0; j<mtx.n; ++j) {\n                m[i][j]=mtx.m[i][j];\n            }\n        }\n        return *this;\n    }\n    Matrix operator*(const Matrix &mtx)\n    {\n        Matrix result(mtx.n);\n        result.clear();\n        for (unsigned i=0; i<mtx.n; ++i) {\n            for (unsigned j=0; j<mtx.n; ++j) {\n                for (unsigned k=0; k<mtx.n; ++k) {\n                    result.m[i][j]+=m[i][k]*mtx.m[k][j];\n                }   \n            }\n        }\n        return result;\n    }\n};\n\nlong fb_matrix(unsigned n) {\n    unsigned num=2;\n    Matrix first(num);\n    first.m[0][0]=1;\n    first.m[0][1]=1;\n    first.m[1][0]=1;\n    first.m[1][1]=0;\n    Matrix result(num);\n    result.unit();\n    unsigned t=n-2;\n    while (t) {\n        if (t%2) {\n            result=result*first;\n            }\n        first=first*first;\n        t=t/2;\n    }\n    return result.m[0][0]+result.m[0][1];\n}\n```\n根据递推公式可以得到\n![matrix](/images/fibonacci_matrix.png)\n因而计算f(n)就简化为计算矩阵的(n-2)次方，而计算矩阵的(n-2)次方，又可以分解为计算矩阵的(n-2)/2次方的平方,逐步分解,直到(n-2)/(2^m)==1,因而时间复杂度为O(logn).\nmatrix解法的时间复杂度为O(logn).\n\n# 6.运行结果比较\n\n![40](/images/fibonacci_result40.png)\n![90](/images/fibonacci_result90.png)\n\n* 可以看到，后两种解法比递归解法明显要快很多。\n* 当n = 40时,动态规划解法比矩阵解法还要快些,都比递归解法快得多。\n* 当n取更大些，比如n = 90时,动态规划解法就比矩阵解法慢了。\n","slug":"three_method_of_fibonacci","published":1,"updated":"2019-04-10T00:58:56.608Z","comments":1,"photos":[],"link":"","_id":"cjutuhpet000pifinmv14w1fc","content":"<h1 id=\"1-定义及递推公式\"><a href=\"#1-定义及递推公式\" class=\"headerlink\" title=\"1.定义及递推公式\"></a>1.定义及递推公式</h1><p>斐波那契数列(Fibonacci sequence),又称黄金分割数列，因数学家Leonardoda Fibonacci以兔子繁殖为例子而引入，故又称兔子数列。<br>1,1,2,3,5,8,13…<br>即：f(1) = 1,f(2) = 1,f(3) = 2,f(4) = 3…<br>添加0项后,Fibonacci数列归纳如下：<br><a id=\"more\"></a></p>\n<ul>\n<li>f(n) = f(n-1) + f(n-2), n &gt;= 2;</li>\n<li>f(0) = 0;</li>\n<li>f(1) = 1;</li>\n</ul>\n<h1 id=\"2-通项公式\"><a href=\"#2-通项公式\" class=\"headerlink\" title=\"2.通项公式\"></a>2.通项公式</h1><p><img src=\"/images/fibonacci.jpg\" alt=\"txgs\"></p>\n<h1 id=\"3-方法一：递归求解-时间复杂度O-2-n\"><a href=\"#3-方法一：递归求解-时间复杂度O-2-n\" class=\"headerlink\" title=\"3.方法一：递归求解(时间复杂度O(2^n))\"></a>3.方法一：递归求解(时间复杂度O(2^n))</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">fibonacci</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/fb4.png\" alt=\"txgs\"> <img src=\"/images/fbn.png\" alt=\"txgs\"></p>\n<p>时间复杂度分析：可以看到,递归解法存在大量的重复计算。<br>求f(n)的过程可以用一颗二叉树表示,树中的每个节点就代表一次基本计算.<br>易知,树的高度为n,一棵高度为n的满二叉树的节点个数为2^n-1,当然,上图中的树肯定不是满二叉树,但也可以看出来,该树的节点个数<br>大于满二叉树节点数的一半,即（2^n-1)/2,设计算次数为T(n),可知(2^n-1)/2 &lt; T(n) &lt; 2^n-1.<br>因此该算法的时间复杂度为O(2^n).</p>\n<h1 id=\"4-方法二：利用动态规划-dp-求解-时间复杂度O-n\"><a href=\"#4-方法二：利用动态规划-dp-求解-时间复杂度O-n\" class=\"headerlink\" title=\"4.方法二：利用动态规划(dp)求解(时间复杂度O(n))\"></a>4.方法二：利用动态规划(dp)求解(时间复杂度O(n))</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">fibonacci_dp</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> dp[n+<span class=\"number\">1</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n)&#123;</span><br><span class=\"line\">        dp[i] = dp[i<span class=\"number\">-1</span>] + dp[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然,动态规划解法的时间复杂度为O(n).</p>\n<h1 id=\"5-方法三：利用矩阵求解-时间复杂度O-logn\"><a href=\"#5-方法三：利用矩阵求解-时间复杂度O-logn\" class=\"headerlink\" title=\"5.方法三：利用矩阵求解(时间复杂度O(logn)\"></a>5.方法三：利用矩阵求解(时间复杂度O(logn)</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Matrix</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> **m;</span><br><span class=\"line\">    Matrix(<span class=\"keyword\">unsigned</span> num)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m=<span class=\"keyword\">new</span> <span class=\"keyword\">long</span>*[num];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;num; i++) &#123;</span><br><span class=\"line\">            m[i]=<span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[num];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n=num;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>; j&lt;n; ++j) &#123;</span><br><span class=\"line\">                m[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;n; ++i) &#123;</span><br><span class=\"line\">            m[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Matrix <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Matrix mtx)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Matrix(mtx.n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;mtx.n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>; j&lt;mtx.n; ++j) &#123;</span><br><span class=\"line\">                m[i][j]=mtx.m[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Matrix <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Matrix &amp;mtx)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(mtx.n)</span></span>;</span><br><span class=\"line\">        result.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;mtx.n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>; j&lt;mtx.n; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> k=<span class=\"number\">0</span>; k&lt;mtx.n; ++k) &#123;</span><br><span class=\"line\">                    result.m[i][j]+=m[i][k]*mtx.m[k][j];</span><br><span class=\"line\">                &#125;   </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">fb_matrix</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> num=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">first</span><span class=\"params\">(num)</span></span>;</span><br><span class=\"line\">    first.m[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    first.m[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    first.m[<span class=\"number\">1</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    first.m[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(num)</span></span>;</span><br><span class=\"line\">    result.unit();</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> t=n<span class=\"number\">-2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t%<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            result=result*first;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        first=first*first;</span><br><span class=\"line\">        t=t/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.m[<span class=\"number\">0</span>][<span class=\"number\">0</span>]+result.m[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据递推公式可以得到<br><img src=\"/images/fibonacci_matrix.png\" alt=\"matrix\"><br>因而计算f(n)就简化为计算矩阵的(n-2)次方，而计算矩阵的(n-2)次方，又可以分解为计算矩阵的(n-2)/2次方的平方,逐步分解,直到(n-2)/(2^m)==1,因而时间复杂度为O(logn).<br>matrix解法的时间复杂度为O(logn).</p>\n<h1 id=\"6-运行结果比较\"><a href=\"#6-运行结果比较\" class=\"headerlink\" title=\"6.运行结果比较\"></a>6.运行结果比较</h1><p><img src=\"/images/fibonacci_result40.png\" alt=\"40\"><br><img src=\"/images/fibonacci_result90.png\" alt=\"90\"></p>\n<ul>\n<li>可以看到，后两种解法比递归解法明显要快很多。</li>\n<li>当n = 40时,动态规划解法比矩阵解法还要快些,都比递归解法快得多。</li>\n<li>当n取更大些，比如n = 90时,动态规划解法就比矩阵解法慢了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-定义及递推公式\"><a href=\"#1-定义及递推公式\" class=\"headerlink\" title=\"1.定义及递推公式\"></a>1.定义及递推公式</h1><p>斐波那契数列(Fibonacci sequence),又称黄金分割数列，因数学家Leonardoda Fibonacci以兔子繁殖为例子而引入，故又称兔子数列。<br>1,1,2,3,5,8,13…<br>即：f(1) = 1,f(2) = 1,f(3) = 2,f(4) = 3…<br>添加0项后,Fibonacci数列归纳如下：<br>","more":"</p>\n<ul>\n<li>f(n) = f(n-1) + f(n-2), n &gt;= 2;</li>\n<li>f(0) = 0;</li>\n<li>f(1) = 1;</li>\n</ul>\n<h1 id=\"2-通项公式\"><a href=\"#2-通项公式\" class=\"headerlink\" title=\"2.通项公式\"></a>2.通项公式</h1><p><img src=\"/images/fibonacci.jpg\" alt=\"txgs\"></p>\n<h1 id=\"3-方法一：递归求解-时间复杂度O-2-n\"><a href=\"#3-方法一：递归求解-时间复杂度O-2-n\" class=\"headerlink\" title=\"3.方法一：递归求解(时间复杂度O(2^n))\"></a>3.方法一：递归求解(时间复杂度O(2^n))</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">fibonacci</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/fb4.png\" alt=\"txgs\"> <img src=\"/images/fbn.png\" alt=\"txgs\"></p>\n<p>时间复杂度分析：可以看到,递归解法存在大量的重复计算。<br>求f(n)的过程可以用一颗二叉树表示,树中的每个节点就代表一次基本计算.<br>易知,树的高度为n,一棵高度为n的满二叉树的节点个数为2^n-1,当然,上图中的树肯定不是满二叉树,但也可以看出来,该树的节点个数<br>大于满二叉树节点数的一半,即（2^n-1)/2,设计算次数为T(n),可知(2^n-1)/2 &lt; T(n) &lt; 2^n-1.<br>因此该算法的时间复杂度为O(2^n).</p>\n<h1 id=\"4-方法二：利用动态规划-dp-求解-时间复杂度O-n\"><a href=\"#4-方法二：利用动态规划-dp-求解-时间复杂度O-n\" class=\"headerlink\" title=\"4.方法二：利用动态规划(dp)求解(时间复杂度O(n))\"></a>4.方法二：利用动态规划(dp)求解(时间复杂度O(n))</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">fibonacci_dp</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> dp[n+<span class=\"number\">1</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n)&#123;</span><br><span class=\"line\">        dp[i] = dp[i<span class=\"number\">-1</span>] + dp[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然,动态规划解法的时间复杂度为O(n).</p>\n<h1 id=\"5-方法三：利用矩阵求解-时间复杂度O-logn\"><a href=\"#5-方法三：利用矩阵求解-时间复杂度O-logn\" class=\"headerlink\" title=\"5.方法三：利用矩阵求解(时间复杂度O(logn)\"></a>5.方法三：利用矩阵求解(时间复杂度O(logn)</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Matrix</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> **m;</span><br><span class=\"line\">    Matrix(<span class=\"keyword\">unsigned</span> num)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m=<span class=\"keyword\">new</span> <span class=\"keyword\">long</span>*[num];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;num; i++) &#123;</span><br><span class=\"line\">            m[i]=<span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[num];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n=num;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>; j&lt;n; ++j) &#123;</span><br><span class=\"line\">                m[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;n; ++i) &#123;</span><br><span class=\"line\">            m[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Matrix <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Matrix mtx)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Matrix(mtx.n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;mtx.n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>; j&lt;mtx.n; ++j) &#123;</span><br><span class=\"line\">                m[i][j]=mtx.m[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Matrix <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Matrix &amp;mtx)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(mtx.n)</span></span>;</span><br><span class=\"line\">        result.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;mtx.n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>; j&lt;mtx.n; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> k=<span class=\"number\">0</span>; k&lt;mtx.n; ++k) &#123;</span><br><span class=\"line\">                    result.m[i][j]+=m[i][k]*mtx.m[k][j];</span><br><span class=\"line\">                &#125;   </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">fb_matrix</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> num=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">first</span><span class=\"params\">(num)</span></span>;</span><br><span class=\"line\">    first.m[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    first.m[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    first.m[<span class=\"number\">1</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    first.m[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(num)</span></span>;</span><br><span class=\"line\">    result.unit();</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> t=n<span class=\"number\">-2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t%<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            result=result*first;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        first=first*first;</span><br><span class=\"line\">        t=t/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.m[<span class=\"number\">0</span>][<span class=\"number\">0</span>]+result.m[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据递推公式可以得到<br><img src=\"/images/fibonacci_matrix.png\" alt=\"matrix\"><br>因而计算f(n)就简化为计算矩阵的(n-2)次方，而计算矩阵的(n-2)次方，又可以分解为计算矩阵的(n-2)/2次方的平方,逐步分解,直到(n-2)/(2^m)==1,因而时间复杂度为O(logn).<br>matrix解法的时间复杂度为O(logn).</p>\n<h1 id=\"6-运行结果比较\"><a href=\"#6-运行结果比较\" class=\"headerlink\" title=\"6.运行结果比较\"></a>6.运行结果比较</h1><p><img src=\"/images/fibonacci_result40.png\" alt=\"40\"><br><img src=\"/images/fibonacci_result90.png\" alt=\"90\"></p>\n<ul>\n<li>可以看到，后两种解法比递归解法明显要快很多。</li>\n<li>当n = 40时,动态规划解法比矩阵解法还要快些,都比递归解法快得多。</li>\n<li>当n取更大些，比如n = 90时,动态规划解法就比矩阵解法慢了。</li>\n</ul>"},{"layout":"post","title":"LeetCode 438.Find All Anagrams in a String","date":"2019-03-06T04:00:00.000Z","_content":"\n438.Find All Anagrams in a String\n====\n\n## 题目描述:\n\n<!-- more -->\nGiven a string s and a non-empty string p, find all the start indices of p's anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter.\n\n给定一个字符串s和一个非空字符串p，在s中查找p的变位词的所有起始索引。字符串仅由小写英文字母组成，字符串s和p的长度将不大于20,100。输出顺序无关紧要。 \n \n## 思路\n一开始，我只当是字符串匹配来做了，做出来发现最后一个超时，又加了KMP，还是超时。后来也有了想法，只是花太多时间了，就没有再去写，于是参考大神的解法。\n\n## 代码\n```c\n//解法1(没有AC，并且考虑不周全)：\nclass Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        int n = s.size();\n        int m = p.size();\n        vector<int> res;\n        unordered_set<char> dict;\n        for(auto e : p)\n            dict.insert(e);\n        sort(p.begin(), p.end());\n        for(int i = 0; i <= n-m; ++i){\n            string tmp = s.substr(i,m);\n            //cout << tmp << endl;\n            int j = 0;\n            for(; j < m; ++j){\n                if(dict.find(tmp[j]) == dict.end()){\n                    break;\n                }\n            }\n            sort(tmp.begin(), tmp.end());\n            if(j == m){\n                if(p == tmp){\n                    res.push_back(i);\n                }\n            }else{\n                i += j;\n            }\n        }\n        return res;\n    }\n};\n```\n\n```c\n//解法2(滑动窗口)：\nclass Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        vector<int> pv(26,0), sv(26,0), res;\n        if(s.size() < p.size())\n            return res;\n        for(int i = 0; i < p.size(); ++i)\n        {\n            ++pv[p[i]-'a'];\n            ++sv[s[i]-'a'];\n        }\n        if(pv == sv)\n           res.push_back(0);\n        for(int i = p.size(); i < s.size(); ++i) \n        {\n            ++sv[s[i]-'a'];\n            --sv[s[i-p.size()]-'a']; \n            if(pv == sv)\n                res.push_back(i-p.size()+1);\n        }\n        return res;\n    }\n};\n```\n","source":"_posts/2019-03-06-LeedCode_438.md","raw":"---\nlayout: post\ntitle: LeetCode 438.Find All Anagrams in a String\ndate: 2019-03-06 12:00:00\ntags: [LeetCode, 刷题]\n\n---\n\n438.Find All Anagrams in a String\n====\n\n## 题目描述:\n\n<!-- more -->\nGiven a string s and a non-empty string p, find all the start indices of p's anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter.\n\n给定一个字符串s和一个非空字符串p，在s中查找p的变位词的所有起始索引。字符串仅由小写英文字母组成，字符串s和p的长度将不大于20,100。输出顺序无关紧要。 \n \n## 思路\n一开始，我只当是字符串匹配来做了，做出来发现最后一个超时，又加了KMP，还是超时。后来也有了想法，只是花太多时间了，就没有再去写，于是参考大神的解法。\n\n## 代码\n```c\n//解法1(没有AC，并且考虑不周全)：\nclass Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        int n = s.size();\n        int m = p.size();\n        vector<int> res;\n        unordered_set<char> dict;\n        for(auto e : p)\n            dict.insert(e);\n        sort(p.begin(), p.end());\n        for(int i = 0; i <= n-m; ++i){\n            string tmp = s.substr(i,m);\n            //cout << tmp << endl;\n            int j = 0;\n            for(; j < m; ++j){\n                if(dict.find(tmp[j]) == dict.end()){\n                    break;\n                }\n            }\n            sort(tmp.begin(), tmp.end());\n            if(j == m){\n                if(p == tmp){\n                    res.push_back(i);\n                }\n            }else{\n                i += j;\n            }\n        }\n        return res;\n    }\n};\n```\n\n```c\n//解法2(滑动窗口)：\nclass Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        vector<int> pv(26,0), sv(26,0), res;\n        if(s.size() < p.size())\n            return res;\n        for(int i = 0; i < p.size(); ++i)\n        {\n            ++pv[p[i]-'a'];\n            ++sv[s[i]-'a'];\n        }\n        if(pv == sv)\n           res.push_back(0);\n        for(int i = p.size(); i < s.size(); ++i) \n        {\n            ++sv[s[i]-'a'];\n            --sv[s[i-p.size()]-'a']; \n            if(pv == sv)\n                res.push_back(i-p.size()+1);\n        }\n        return res;\n    }\n};\n```\n","slug":"LeedCode_438","published":1,"updated":"2019-04-10T00:56:47.564Z","comments":1,"photos":[],"link":"","_id":"cjutuhpev000rifino589tndy","content":"<h1 id=\"438-Find-All-Anagrams-in-a-String\"><a href=\"#438-Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"438.Find All Anagrams in a String\"></a>438.Find All Anagrams in a String</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述:\"></a>题目描述:</h2><a id=\"more\"></a>\n<p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter.</p>\n<p>给定一个字符串s和一个非空字符串p，在s中查找p的变位词的所有起始索引。字符串仅由小写英文字母组成，字符串s和p的长度将不大于20,100。输出顺序无关紧要。 </p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一开始，我只当是字符串匹配来做了，做出来发现最后一个超时，又加了KMP，还是超时。后来也有了想法，只是花太多时间了，就没有再去写，于是参考大神的解法。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解法1(没有AC，并且考虑不周全)：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; findAnagrams(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = p.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">char</span>&gt; dict;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : p)</span><br><span class=\"line\">            dict.insert(e);</span><br><span class=\"line\">        sort(p.begin(), p.end());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n-m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> tmp = s.substr(i,m);</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; tmp &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(; j &lt; m; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dict.find(tmp[j]) == dict.end())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sort(tmp.begin(), tmp.end());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == m)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p == tmp)&#123;</span><br><span class=\"line\">                    res.push_back(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i += j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解法2(滑动窗口)：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; findAnagrams(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pv(<span class=\"number\">26</span>,<span class=\"number\">0</span>), sv(<span class=\"number\">26</span>,<span class=\"number\">0</span>), res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.size() &lt; p.size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size(); ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++pv[p[i]-<span class=\"string\">'a'</span>];</span><br><span class=\"line\">            ++sv[s[i]-<span class=\"string\">'a'</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pv == sv)</span><br><span class=\"line\">           res.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = p.size(); i &lt; s.size(); ++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++sv[s[i]-<span class=\"string\">'a'</span>];</span><br><span class=\"line\">            --sv[s[i-p.size()]-<span class=\"string\">'a'</span>]; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pv == sv)</span><br><span class=\"line\">                res.push_back(i-p.size()+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"438-Find-All-Anagrams-in-a-String\"><a href=\"#438-Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"438.Find All Anagrams in a String\"></a>438.Find All Anagrams in a String</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述:\"></a>题目描述:</h2>","more":"<p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter.</p>\n<p>给定一个字符串s和一个非空字符串p，在s中查找p的变位词的所有起始索引。字符串仅由小写英文字母组成，字符串s和p的长度将不大于20,100。输出顺序无关紧要。 </p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一开始，我只当是字符串匹配来做了，做出来发现最后一个超时，又加了KMP，还是超时。后来也有了想法，只是花太多时间了，就没有再去写，于是参考大神的解法。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解法1(没有AC，并且考虑不周全)：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; findAnagrams(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = p.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">char</span>&gt; dict;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : p)</span><br><span class=\"line\">            dict.insert(e);</span><br><span class=\"line\">        sort(p.begin(), p.end());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n-m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> tmp = s.substr(i,m);</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; tmp &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(; j &lt; m; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dict.find(tmp[j]) == dict.end())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sort(tmp.begin(), tmp.end());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == m)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p == tmp)&#123;</span><br><span class=\"line\">                    res.push_back(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i += j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解法2(滑动窗口)：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; findAnagrams(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pv(<span class=\"number\">26</span>,<span class=\"number\">0</span>), sv(<span class=\"number\">26</span>,<span class=\"number\">0</span>), res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.size() &lt; p.size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size(); ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++pv[p[i]-<span class=\"string\">'a'</span>];</span><br><span class=\"line\">            ++sv[s[i]-<span class=\"string\">'a'</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pv == sv)</span><br><span class=\"line\">           res.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = p.size(); i &lt; s.size(); ++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++sv[s[i]-<span class=\"string\">'a'</span>];</span><br><span class=\"line\">            --sv[s[i-p.size()]-<span class=\"string\">'a'</span>]; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pv == sv)</span><br><span class=\"line\">                res.push_back(i-p.size()+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"LeedCode 37.Sudoku Solver","date":"2019-03-07T04:00:00.000Z","_content":"\nLeedCode 37.Sudoku Solver\n====\n\n\n# 题目描述\n<!-- more -->\n就是数独游戏\n# 解法思路\n把所有空位置找出来,并找到该位置可以填的数字的集合.针对每个空位置,把其集合中的数字依次填进去验证(这里采用递归):\n    * 如果返回flase,就把该位置重新设为空,验证集合中的下一个数字\n    * 直到递归完成,返回true\n# 解法分析\n* 方法1: 采用set\\<char\\>存储数字集合,Runtime: 248ms(unordered\\_set也差不多)\n* 方法2: 采用vector\\<int\\>表示数字集合,Runtime: 36ms\n* 方法3: 采用int,位运算表示数字集合,Runtime: 12ms\n* 可见,能用简单数据结构实现还是最好的\n\n# 代码\n* 方法1:\n```c\nclass Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        solve(board);\n    }\n    bool solve(vector<vector<char>>& board){\n        for(int i = 0; i < 9; ++i){\n            for(int j = 0; j < 9; ++j){\n                if(board[i][j] == '.'){\n                    set<char> tmp;\n                    for(int k = 0; k < 9; ++k){\n                        if(board[i][k] != '.')\n                            tmp.insert(board[i][k]);\n                        if(board[k][j] != '.')\n                            tmp.insert(board[k][j]);\n                    }\n                    for(int k = 0; k < 3; ++k){\n                        for(int m = 0; m < 3; ++m){\n                            int ii = i/3*3+k;\n                            int jj = j/3*3+m;\n                            if(board[ii][jj] != '.'){\n                                tmp.insert(board[ii][jj]);\n                            }\n                        }\n                    }\n                    \n                    for(char c = '1'; c <= '9'; ++c){\n                        if(tmp.find(c) == tmp.end()){\n                            board[i][j] = c;\n                            if(solve(board))\n                                return true;\n                            else\n                                board[i][j] = '.';\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n* 方法2:\n```c\nclass Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        solve(board);\n    }\n    bool solve(vector<vector<char>>& board){\n        for(int i = 0; i < 9; ++i){\n            for(int j = 0; j < 9; ++j){\n                if(board[i][j] == '.'){\n                    vector<int> tmp(9,0);\n                    for(int k = 0; k < 9; ++k){\n                        if(board[i][k] != '.')\n                            tmp[board[i][k]-'0'-1] = 1;\n                        if(board[k][j] != '.')\n                            tmp[board[k][j]-'0'-1] = 1;\n                        if(board[i/3*3+k/3][j/3*3+k%3] != '.')\n                            tmp[board[i/3*3+k/3][j/3*3+k%3]-'0'-1] = 1;\n                    }\n                    \n                    for(int k = 0; k < 9; ++k){\n                        if(!tmp[k]){\n                            board[i][j] = k + '0' + 1;\n                            if(solve(board))\n                                return true;\n                            else\n                                board[i][j] = '.';\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n* 方法3:\n```c\nlass Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        solve(board);\n    }\n    bool solve(vector<vector<char>>& board){\n        for(int i = 0; i < 9; ++i){\n            for(int j = 0; j < 9; ++j){\n                if(board[i][j] == '.'){\n                    int row = 0x1ff;\n                    int col = 0x1ff;\n                    int squ = 0x1ff;\n                    for(int k = 0; k < 9; ++k){\n                        if(board[i][k] != '.')\n                            row ^= 1 << (board[i][k] - 49);\n                        if(board[k][j] != '.')\n                            col ^= 1 << (board[k][j] - 49);\n                        if(board[i/3*3+k/3][j/3*3+k%3] != '.')\n                            squ ^= 1 << (board[i/3*3 + k/3][j/3*3 + k%3] - 49);\n                    }\n                    int flag = row & col & squ;\n                    \n                    for(int k = 0; k < 9; ++k,flag>>=1){\n                        if(flag%2){\n                            board[i][j] = k + '0' + 1;\n                            if(solve(board))\n                                return true;\n                            else\n                                board[i][j] = '.';\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n","source":"_posts/2019-03-07-LeedCode_37_Sudoku_Solver.md","raw":"---\nlayout: post\ntitle: LeedCode 37.Sudoku Solver\ndate: 2019-03-07 12:00:00\ntags: [LeetCode, 刷题]\n\n---\n\nLeedCode 37.Sudoku Solver\n====\n\n\n# 题目描述\n<!-- more -->\n就是数独游戏\n# 解法思路\n把所有空位置找出来,并找到该位置可以填的数字的集合.针对每个空位置,把其集合中的数字依次填进去验证(这里采用递归):\n    * 如果返回flase,就把该位置重新设为空,验证集合中的下一个数字\n    * 直到递归完成,返回true\n# 解法分析\n* 方法1: 采用set\\<char\\>存储数字集合,Runtime: 248ms(unordered\\_set也差不多)\n* 方法2: 采用vector\\<int\\>表示数字集合,Runtime: 36ms\n* 方法3: 采用int,位运算表示数字集合,Runtime: 12ms\n* 可见,能用简单数据结构实现还是最好的\n\n# 代码\n* 方法1:\n```c\nclass Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        solve(board);\n    }\n    bool solve(vector<vector<char>>& board){\n        for(int i = 0; i < 9; ++i){\n            for(int j = 0; j < 9; ++j){\n                if(board[i][j] == '.'){\n                    set<char> tmp;\n                    for(int k = 0; k < 9; ++k){\n                        if(board[i][k] != '.')\n                            tmp.insert(board[i][k]);\n                        if(board[k][j] != '.')\n                            tmp.insert(board[k][j]);\n                    }\n                    for(int k = 0; k < 3; ++k){\n                        for(int m = 0; m < 3; ++m){\n                            int ii = i/3*3+k;\n                            int jj = j/3*3+m;\n                            if(board[ii][jj] != '.'){\n                                tmp.insert(board[ii][jj]);\n                            }\n                        }\n                    }\n                    \n                    for(char c = '1'; c <= '9'; ++c){\n                        if(tmp.find(c) == tmp.end()){\n                            board[i][j] = c;\n                            if(solve(board))\n                                return true;\n                            else\n                                board[i][j] = '.';\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n* 方法2:\n```c\nclass Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        solve(board);\n    }\n    bool solve(vector<vector<char>>& board){\n        for(int i = 0; i < 9; ++i){\n            for(int j = 0; j < 9; ++j){\n                if(board[i][j] == '.'){\n                    vector<int> tmp(9,0);\n                    for(int k = 0; k < 9; ++k){\n                        if(board[i][k] != '.')\n                            tmp[board[i][k]-'0'-1] = 1;\n                        if(board[k][j] != '.')\n                            tmp[board[k][j]-'0'-1] = 1;\n                        if(board[i/3*3+k/3][j/3*3+k%3] != '.')\n                            tmp[board[i/3*3+k/3][j/3*3+k%3]-'0'-1] = 1;\n                    }\n                    \n                    for(int k = 0; k < 9; ++k){\n                        if(!tmp[k]){\n                            board[i][j] = k + '0' + 1;\n                            if(solve(board))\n                                return true;\n                            else\n                                board[i][j] = '.';\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n* 方法3:\n```c\nlass Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        solve(board);\n    }\n    bool solve(vector<vector<char>>& board){\n        for(int i = 0; i < 9; ++i){\n            for(int j = 0; j < 9; ++j){\n                if(board[i][j] == '.'){\n                    int row = 0x1ff;\n                    int col = 0x1ff;\n                    int squ = 0x1ff;\n                    for(int k = 0; k < 9; ++k){\n                        if(board[i][k] != '.')\n                            row ^= 1 << (board[i][k] - 49);\n                        if(board[k][j] != '.')\n                            col ^= 1 << (board[k][j] - 49);\n                        if(board[i/3*3+k/3][j/3*3+k%3] != '.')\n                            squ ^= 1 << (board[i/3*3 + k/3][j/3*3 + k%3] - 49);\n                    }\n                    int flag = row & col & squ;\n                    \n                    for(int k = 0; k < 9; ++k,flag>>=1){\n                        if(flag%2){\n                            board[i][j] = k + '0' + 1;\n                            if(solve(board))\n                                return true;\n                            else\n                                board[i][j] = '.';\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n","slug":"LeedCode_37_Sudoku_Solver","published":1,"updated":"2019-04-10T00:57:13.072Z","comments":1,"photos":[],"link":"","_id":"cjutuhpex000tifinbrqmvhck","content":"<h1 id=\"LeedCode-37-Sudoku-Solver\"><a href=\"#LeedCode-37-Sudoku-Solver\" class=\"headerlink\" title=\"LeedCode 37.Sudoku Solver\"></a>LeedCode 37.Sudoku Solver</h1><h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><a id=\"more\"></a>\n<p>就是数独游戏</p>\n<h1 id=\"解法思路\"><a href=\"#解法思路\" class=\"headerlink\" title=\"解法思路\"></a>解法思路</h1><p>把所有空位置找出来,并找到该位置可以填的数字的集合.针对每个空位置,把其集合中的数字依次填进去验证(这里采用递归):</p>\n<pre><code>* 如果返回flase,就把该位置重新设为空,验证集合中的下一个数字\n* 直到递归完成,返回true\n</code></pre><h1 id=\"解法分析\"><a href=\"#解法分析\" class=\"headerlink\" title=\"解法分析\"></a>解法分析</h1><ul>\n<li>方法1: 采用set\\&lt;char>存储数字集合,Runtime: 248ms(unordered_set也差不多)</li>\n<li>方法2: 采用vector\\&lt;int>表示数字集合,Runtime: 36ms</li>\n<li>方法3: 采用int,位运算表示数字集合,Runtime: 12ms</li>\n<li>可见,能用简单数据结构实现还是最好的</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><ul>\n<li><p>方法1:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solveSudoku</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class=\"line\">        solve(board);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">char</span>&gt; tmp;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i][k] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp.insert(board[i][k]);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[k][j] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp.insert(board[k][j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">3</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = <span class=\"number\">0</span>; m &lt; <span class=\"number\">3</span>; ++m)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> ii = i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> jj = j/<span class=\"number\">3</span>*<span class=\"number\">3</span>+m;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(board[ii][jj] != <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                                tmp.insert(board[ii][jj]);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c = <span class=\"string\">'1'</span>; c &lt;= <span class=\"string\">'9'</span>; ++c)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(tmp.find(c) == tmp.end())&#123;</span><br><span class=\"line\">                            board[i][j] = c;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(solve(board))</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                board[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法2:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solveSudoku</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class=\"line\">        solve(board);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tmp(<span class=\"number\">9</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i][k] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp[board[i][k]-<span class=\"string\">'0'</span><span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[k][j] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp[board[k][j]-<span class=\"string\">'0'</span><span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k/<span class=\"number\">3</span>][j/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k%<span class=\"number\">3</span>] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp[board[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k/<span class=\"number\">3</span>][j/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k%<span class=\"number\">3</span>]-<span class=\"string\">'0'</span><span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!tmp[k])&#123;</span><br><span class=\"line\">                            board[i][j] = k + <span class=\"string\">'0'</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(solve(board))</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                board[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法3:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lass Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solveSudoku</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class=\"line\">        solve(board);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> row = <span class=\"number\">0x1ff</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> col = <span class=\"number\">0x1ff</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> squ = <span class=\"number\">0x1ff</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i][k] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            row ^= <span class=\"number\">1</span> &lt;&lt; (board[i][k] - <span class=\"number\">49</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[k][j] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            col ^= <span class=\"number\">1</span> &lt;&lt; (board[k][j] - <span class=\"number\">49</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k/<span class=\"number\">3</span>][j/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k%<span class=\"number\">3</span>] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            squ ^= <span class=\"number\">1</span> &lt;&lt; (board[i/<span class=\"number\">3</span>*<span class=\"number\">3</span> + k/<span class=\"number\">3</span>][j/<span class=\"number\">3</span>*<span class=\"number\">3</span> + k%<span class=\"number\">3</span>] - <span class=\"number\">49</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> flag = row &amp; col &amp; squ;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k,flag&gt;&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(flag%<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                            board[i][j] = k + <span class=\"string\">'0'</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(solve(board))</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                board[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeedCode-37-Sudoku-Solver\"><a href=\"#LeedCode-37-Sudoku-Solver\" class=\"headerlink\" title=\"LeedCode 37.Sudoku Solver\"></a>LeedCode 37.Sudoku Solver</h1><h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1>","more":"<p>就是数独游戏</p>\n<h1 id=\"解法思路\"><a href=\"#解法思路\" class=\"headerlink\" title=\"解法思路\"></a>解法思路</h1><p>把所有空位置找出来,并找到该位置可以填的数字的集合.针对每个空位置,把其集合中的数字依次填进去验证(这里采用递归):</p>\n<pre><code>* 如果返回flase,就把该位置重新设为空,验证集合中的下一个数字\n* 直到递归完成,返回true\n</code></pre><h1 id=\"解法分析\"><a href=\"#解法分析\" class=\"headerlink\" title=\"解法分析\"></a>解法分析</h1><ul>\n<li>方法1: 采用set\\&lt;char>存储数字集合,Runtime: 248ms(unordered_set也差不多)</li>\n<li>方法2: 采用vector\\&lt;int>表示数字集合,Runtime: 36ms</li>\n<li>方法3: 采用int,位运算表示数字集合,Runtime: 12ms</li>\n<li>可见,能用简单数据结构实现还是最好的</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><ul>\n<li><p>方法1:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solveSudoku</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class=\"line\">        solve(board);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">char</span>&gt; tmp;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i][k] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp.insert(board[i][k]);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[k][j] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp.insert(board[k][j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">3</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = <span class=\"number\">0</span>; m &lt; <span class=\"number\">3</span>; ++m)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> ii = i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> jj = j/<span class=\"number\">3</span>*<span class=\"number\">3</span>+m;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(board[ii][jj] != <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                                tmp.insert(board[ii][jj]);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c = <span class=\"string\">'1'</span>; c &lt;= <span class=\"string\">'9'</span>; ++c)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(tmp.find(c) == tmp.end())&#123;</span><br><span class=\"line\">                            board[i][j] = c;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(solve(board))</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                board[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法2:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solveSudoku</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class=\"line\">        solve(board);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tmp(<span class=\"number\">9</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i][k] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp[board[i][k]-<span class=\"string\">'0'</span><span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[k][j] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp[board[k][j]-<span class=\"string\">'0'</span><span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k/<span class=\"number\">3</span>][j/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k%<span class=\"number\">3</span>] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            tmp[board[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k/<span class=\"number\">3</span>][j/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k%<span class=\"number\">3</span>]-<span class=\"string\">'0'</span><span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!tmp[k])&#123;</span><br><span class=\"line\">                            board[i][j] = k + <span class=\"string\">'0'</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(solve(board))</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                board[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法3:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lass Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solveSudoku</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class=\"line\">        solve(board);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> row = <span class=\"number\">0x1ff</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> col = <span class=\"number\">0x1ff</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> squ = <span class=\"number\">0x1ff</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i][k] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            row ^= <span class=\"number\">1</span> &lt;&lt; (board[i][k] - <span class=\"number\">49</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[k][j] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            col ^= <span class=\"number\">1</span> &lt;&lt; (board[k][j] - <span class=\"number\">49</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(board[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k/<span class=\"number\">3</span>][j/<span class=\"number\">3</span>*<span class=\"number\">3</span>+k%<span class=\"number\">3</span>] != <span class=\"string\">'.'</span>)</span><br><span class=\"line\">                            squ ^= <span class=\"number\">1</span> &lt;&lt; (board[i/<span class=\"number\">3</span>*<span class=\"number\">3</span> + k/<span class=\"number\">3</span>][j/<span class=\"number\">3</span>*<span class=\"number\">3</span> + k%<span class=\"number\">3</span>] - <span class=\"number\">49</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> flag = row &amp; col &amp; squ;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; ++k,flag&gt;&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(flag%<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                            board[i][j] = k + <span class=\"string\">'0'</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(solve(board))</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                board[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"layout":"post","title":"Epoll、Select与poll","date":"2019-03-09T04:00:00.000Z","_content":"\n# 1.epoll\nepoll是linux特有的I/O复用函数。它在实现和使用上与select、poll有很大差异。\n* 首先，epoll使用一组函数来完成任务，而不是单个函数。\n* 其次，epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中，从而无须像select和poll那样每次调用都要重复传入文件描述符集或事件集。\n* 但epoll需要使用一个额外的文件描述符，来唯一标示内核中的这个事件表。\n<!-- more -->\n* 这个文件描述符使用`epoll_create`函数来创建：\n```c\n#include <sys/epoll.h>\nint epoll_create(int size);\n```\nsize参数现在不起作用,只是给内核一个提示，告诉它事件表需要多大。\n* `epoll_ctl`用来操作epoll的内核事件表。\n* epoll系列系统调用的主要接口是`epoll_wait`函数。\n\n* epoll对文件描述符的操作有两种模式：LT和ET\n    * LT（Level Trigger，电平触发）模式是默认的工作模式，在这种模式下epoll相当于一个效率较高的poll。\n    * ET（Edge Trigger，边沿触发）模式是epoll的高效工作模式。\n\n# 2.poll\npoll系统调用和select类似，也是在指定时间内轮询一定数量的文件描述符，以测试其中是否有就绪者。poll的原型如下：\n```c\n#include <poll.h>\nint poll(struct pollfd* fds, nfds_t nfds, int timeout);\n```\n* fds参数是一个pollfd结构类型的数组，它指定所有我们感兴趣的文件描述符上发生的可读、可写和异常等事件。pollfd结构体的定义如下：\n```c\nstruct pollfd\n{\n    int fd;         //文件描述符\n    short events;   //注册的事件\n    short revents;  //实际发生的事件，由内核填充\n};\n```\n\n# 3.select\nselect的用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写和异常等事件。\n```c\n#include <sys/select.h>\nint select(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout);\n```\n其中：\n* nfds参数指定被监听的文件描述符的总数。\n* readfds,writefds,exceptfds参数分别指向可读、可写和异常等事件对应的文件描述符。\n* timeout参数用来设置select函数的超时时间。如果timeout传递NULL，则select将一直阻塞，直到某个文件描述符就绪。\n\n\n|系统调用|select|poll|epoll|\n|:------:|:----:|:--:|:---:|\n|事件集合|用户通过3个参数<br>分别传入感兴趣的<br>可读、可写及异常<br>等事件，内核通过<br>对这些参数的在线<br>修改来反馈其中的<br>就绪事件。这使得<br>用户每次调用select<br>都要重置这<br>3个参数|统一处理所有事件<br>类型，因此只需<br>一个事件集参数。用<br>户通过pollfd.events<br>传入感兴趣的事件，<br>内核通过修改<br>pollfd.revents反馈<br>其中就绪的事件|内核通过一个事件表<br>直接管理用户感兴趣的<br>所有事件。因此每次<br>调用epoll_wait时，<br>无须反复传入用户感<br>兴趣的事件。epoll_wait<br>系统调用的参数events<br>仅用来反馈就绪的事件|\n|应用程序索引<br>就绪文件描述符<br>的时间复杂度|O(n)|O(n)|O(1)|\n|最大支持<br>文件描述符数|一般有最大值限制，1024或2048|65535|65535|\n|工作模式|LT|LT|LT,同时支持ET高效模式|\n|内核实现<br>和工作效率|采用轮询方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(n)|采用轮询方式<br>来检测就绪事件，<br>算法时间复杂度为<br>O(n)|采用回调方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(1)|\n","source":"_posts/2019-03-09-epoll.md","raw":"---\nlayout: post\ntitle: Epoll、Select与poll\ndate: 2019-03-09 12:00:00\ntags: [Linux, Socket, 技术]\n\n---\n\n# 1.epoll\nepoll是linux特有的I/O复用函数。它在实现和使用上与select、poll有很大差异。\n* 首先，epoll使用一组函数来完成任务，而不是单个函数。\n* 其次，epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中，从而无须像select和poll那样每次调用都要重复传入文件描述符集或事件集。\n* 但epoll需要使用一个额外的文件描述符，来唯一标示内核中的这个事件表。\n<!-- more -->\n* 这个文件描述符使用`epoll_create`函数来创建：\n```c\n#include <sys/epoll.h>\nint epoll_create(int size);\n```\nsize参数现在不起作用,只是给内核一个提示，告诉它事件表需要多大。\n* `epoll_ctl`用来操作epoll的内核事件表。\n* epoll系列系统调用的主要接口是`epoll_wait`函数。\n\n* epoll对文件描述符的操作有两种模式：LT和ET\n    * LT（Level Trigger，电平触发）模式是默认的工作模式，在这种模式下epoll相当于一个效率较高的poll。\n    * ET（Edge Trigger，边沿触发）模式是epoll的高效工作模式。\n\n# 2.poll\npoll系统调用和select类似，也是在指定时间内轮询一定数量的文件描述符，以测试其中是否有就绪者。poll的原型如下：\n```c\n#include <poll.h>\nint poll(struct pollfd* fds, nfds_t nfds, int timeout);\n```\n* fds参数是一个pollfd结构类型的数组，它指定所有我们感兴趣的文件描述符上发生的可读、可写和异常等事件。pollfd结构体的定义如下：\n```c\nstruct pollfd\n{\n    int fd;         //文件描述符\n    short events;   //注册的事件\n    short revents;  //实际发生的事件，由内核填充\n};\n```\n\n# 3.select\nselect的用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写和异常等事件。\n```c\n#include <sys/select.h>\nint select(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout);\n```\n其中：\n* nfds参数指定被监听的文件描述符的总数。\n* readfds,writefds,exceptfds参数分别指向可读、可写和异常等事件对应的文件描述符。\n* timeout参数用来设置select函数的超时时间。如果timeout传递NULL，则select将一直阻塞，直到某个文件描述符就绪。\n\n\n|系统调用|select|poll|epoll|\n|:------:|:----:|:--:|:---:|\n|事件集合|用户通过3个参数<br>分别传入感兴趣的<br>可读、可写及异常<br>等事件，内核通过<br>对这些参数的在线<br>修改来反馈其中的<br>就绪事件。这使得<br>用户每次调用select<br>都要重置这<br>3个参数|统一处理所有事件<br>类型，因此只需<br>一个事件集参数。用<br>户通过pollfd.events<br>传入感兴趣的事件，<br>内核通过修改<br>pollfd.revents反馈<br>其中就绪的事件|内核通过一个事件表<br>直接管理用户感兴趣的<br>所有事件。因此每次<br>调用epoll_wait时，<br>无须反复传入用户感<br>兴趣的事件。epoll_wait<br>系统调用的参数events<br>仅用来反馈就绪的事件|\n|应用程序索引<br>就绪文件描述符<br>的时间复杂度|O(n)|O(n)|O(1)|\n|最大支持<br>文件描述符数|一般有最大值限制，1024或2048|65535|65535|\n|工作模式|LT|LT|LT,同时支持ET高效模式|\n|内核实现<br>和工作效率|采用轮询方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(n)|采用轮询方式<br>来检测就绪事件，<br>算法时间复杂度为<br>O(n)|采用回调方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(1)|\n","slug":"epoll","published":1,"updated":"2019-04-10T00:58:03.188Z","comments":1,"photos":[],"link":"","_id":"cjutuhpez000wifin7ykkpmik","content":"<h1 id=\"1-epoll\"><a href=\"#1-epoll\" class=\"headerlink\" title=\"1.epoll\"></a>1.epoll</h1><p>epoll是linux特有的I/O复用函数。它在实现和使用上与select、poll有很大差异。</p>\n<ul>\n<li>首先，epoll使用一组函数来完成任务，而不是单个函数。</li>\n<li>其次，epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中，从而无须像select和poll那样每次调用都要重复传入文件描述符集或事件集。</li>\n<li>但epoll需要使用一个额外的文件描述符，来唯一标示内核中的这个事件表。<a id=\"more\"></a></li>\n<li>这个文件描述符使用<code>epoll_create</code>函数来创建：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/epoll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>size参数现在不起作用,只是给内核一个提示，告诉它事件表需要多大。</p>\n<ul>\n<li><code>epoll_ctl</code>用来操作epoll的内核事件表。</li>\n<li><p>epoll系列系统调用的主要接口是<code>epoll_wait</code>函数。</p>\n</li>\n<li><p>epoll对文件描述符的操作有两种模式：LT和ET</p>\n<ul>\n<li>LT（Level Trigger，电平触发）模式是默认的工作模式，在这种模式下epoll相当于一个效率较高的poll。</li>\n<li>ET（Edge Trigger，边沿触发）模式是epoll的高效工作模式。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-poll\"><a href=\"#2-poll\" class=\"headerlink\" title=\"2.poll\"></a>2.poll</h1><p>poll系统调用和select类似，也是在指定时间内轮询一定数量的文件描述符，以测试其中是否有就绪者。poll的原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">poll</span><span class=\"params\">(struct pollfd* fds, <span class=\"keyword\">nfds_t</span> nfds, <span class=\"keyword\">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>fds参数是一个pollfd结构类型的数组，它指定所有我们感兴趣的文件描述符上发生的可读、可写和异常等事件。pollfd结构体的定义如下：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd;         <span class=\"comment\">//文件描述符</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> events;   <span class=\"comment\">//注册的事件</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> revents;  <span class=\"comment\">//实际发生的事件，由内核填充</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"3-select\"><a href=\"#3-select\" class=\"headerlink\" title=\"3.select\"></a>3.select</h1><p>select的用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写和异常等事件。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>其中：</p>\n<ul>\n<li>nfds参数指定被监听的文件描述符的总数。</li>\n<li>readfds,writefds,exceptfds参数分别指向可读、可写和异常等事件对应的文件描述符。</li>\n<li>timeout参数用来设置select函数的超时时间。如果timeout传递NULL，则select将一直阻塞，直到某个文件描述符就绪。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统调用</th>\n<th style=\"text-align:center\">select</th>\n<th style=\"text-align:center\">poll</th>\n<th style=\"text-align:center\">epoll</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">事件集合</td>\n<td style=\"text-align:center\">用户通过3个参数<br>分别传入感兴趣的<br>可读、可写及异常<br>等事件，内核通过<br>对这些参数的在线<br>修改来反馈其中的<br>就绪事件。这使得<br>用户每次调用select<br>都要重置这<br>3个参数</td>\n<td style=\"text-align:center\">统一处理所有事件<br>类型，因此只需<br>一个事件集参数。用<br>户通过pollfd.events<br>传入感兴趣的事件，<br>内核通过修改<br>pollfd.revents反馈<br>其中就绪的事件</td>\n<td style=\"text-align:center\">内核通过一个事件表<br>直接管理用户感兴趣的<br>所有事件。因此每次<br>调用epoll_wait时，<br>无须反复传入用户感<br>兴趣的事件。epoll_wait<br>系统调用的参数events<br>仅用来反馈就绪的事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">应用程序索引<br>就绪文件描述符<br>的时间复杂度</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">最大支持<br>文件描述符数</td>\n<td style=\"text-align:center\">一般有最大值限制，1024或2048</td>\n<td style=\"text-align:center\">65535</td>\n<td style=\"text-align:center\">65535</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">工作模式</td>\n<td style=\"text-align:center\">LT</td>\n<td style=\"text-align:center\">LT</td>\n<td style=\"text-align:center\">LT,同时支持ET高效模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内核实现<br>和工作效率</td>\n<td style=\"text-align:center\">采用轮询方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(n)</td>\n<td style=\"text-align:center\">采用轮询方式<br>来检测就绪事件，<br>算法时间复杂度为<br>O(n)</td>\n<td style=\"text-align:center\">采用回调方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(1)</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-epoll\"><a href=\"#1-epoll\" class=\"headerlink\" title=\"1.epoll\"></a>1.epoll</h1><p>epoll是linux特有的I/O复用函数。它在实现和使用上与select、poll有很大差异。</p>\n<ul>\n<li>首先，epoll使用一组函数来完成任务，而不是单个函数。</li>\n<li>其次，epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中，从而无须像select和poll那样每次调用都要重复传入文件描述符集或事件集。</li>\n<li>但epoll需要使用一个额外的文件描述符，来唯一标示内核中的这个事件表。","more":"</li>\n<li>这个文件描述符使用<code>epoll_create</code>函数来创建：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/epoll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>size参数现在不起作用,只是给内核一个提示，告诉它事件表需要多大。</p>\n<ul>\n<li><code>epoll_ctl</code>用来操作epoll的内核事件表。</li>\n<li><p>epoll系列系统调用的主要接口是<code>epoll_wait</code>函数。</p>\n</li>\n<li><p>epoll对文件描述符的操作有两种模式：LT和ET</p>\n<ul>\n<li>LT（Level Trigger，电平触发）模式是默认的工作模式，在这种模式下epoll相当于一个效率较高的poll。</li>\n<li>ET（Edge Trigger，边沿触发）模式是epoll的高效工作模式。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-poll\"><a href=\"#2-poll\" class=\"headerlink\" title=\"2.poll\"></a>2.poll</h1><p>poll系统调用和select类似，也是在指定时间内轮询一定数量的文件描述符，以测试其中是否有就绪者。poll的原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">poll</span><span class=\"params\">(struct pollfd* fds, <span class=\"keyword\">nfds_t</span> nfds, <span class=\"keyword\">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>fds参数是一个pollfd结构类型的数组，它指定所有我们感兴趣的文件描述符上发生的可读、可写和异常等事件。pollfd结构体的定义如下：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd;         <span class=\"comment\">//文件描述符</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> events;   <span class=\"comment\">//注册的事件</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> revents;  <span class=\"comment\">//实际发生的事件，由内核填充</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"3-select\"><a href=\"#3-select\" class=\"headerlink\" title=\"3.select\"></a>3.select</h1><p>select的用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写和异常等事件。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>其中：</p>\n<ul>\n<li>nfds参数指定被监听的文件描述符的总数。</li>\n<li>readfds,writefds,exceptfds参数分别指向可读、可写和异常等事件对应的文件描述符。</li>\n<li>timeout参数用来设置select函数的超时时间。如果timeout传递NULL，则select将一直阻塞，直到某个文件描述符就绪。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统调用</th>\n<th style=\"text-align:center\">select</th>\n<th style=\"text-align:center\">poll</th>\n<th style=\"text-align:center\">epoll</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">事件集合</td>\n<td style=\"text-align:center\">用户通过3个参数<br>分别传入感兴趣的<br>可读、可写及异常<br>等事件，内核通过<br>对这些参数的在线<br>修改来反馈其中的<br>就绪事件。这使得<br>用户每次调用select<br>都要重置这<br>3个参数</td>\n<td style=\"text-align:center\">统一处理所有事件<br>类型，因此只需<br>一个事件集参数。用<br>户通过pollfd.events<br>传入感兴趣的事件，<br>内核通过修改<br>pollfd.revents反馈<br>其中就绪的事件</td>\n<td style=\"text-align:center\">内核通过一个事件表<br>直接管理用户感兴趣的<br>所有事件。因此每次<br>调用epoll_wait时，<br>无须反复传入用户感<br>兴趣的事件。epoll_wait<br>系统调用的参数events<br>仅用来反馈就绪的事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">应用程序索引<br>就绪文件描述符<br>的时间复杂度</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">最大支持<br>文件描述符数</td>\n<td style=\"text-align:center\">一般有最大值限制，1024或2048</td>\n<td style=\"text-align:center\">65535</td>\n<td style=\"text-align:center\">65535</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">工作模式</td>\n<td style=\"text-align:center\">LT</td>\n<td style=\"text-align:center\">LT</td>\n<td style=\"text-align:center\">LT,同时支持ET高效模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内核实现<br>和工作效率</td>\n<td style=\"text-align:center\">采用轮询方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(n)</td>\n<td style=\"text-align:center\">采用轮询方式<br>来检测就绪事件，<br>算法时间复杂度为<br>O(n)</td>\n<td style=\"text-align:center\">采用回调方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(1)</td>\n</tr>\n</tbody>\n</table>"},{"layout":"post","title":"Linux常用命令总结(持续更新)","date":"2019-03-18T04:00:00.000Z","_content":"\n\n# Linux常用命令\n\n<!-- more -->\n\n|命令|含义|备注|\n|-|-|-|\n|`df -h`|查看磁盘使用情况|磁盘|\n|`du -ah --max-depth==1`|查看当前目录下的文件及文件夹的大小||\n|`du -sh`|查看当前文件夹大小||\n|`ls -ltr`|按修改时间排序||\n|`ls -l`&#124;`wc -l`|查看当前文件夹下文件及文件夹个数||\n|`ls -l`&#124;`grep \"^-\"`&#124;`wc -l`|查看当前文件夹下文件个数||\n|`ls -l`&#124;`grep \"^d\"`&#124;`wc -l`|查看当前文件夹下文件夹个数||\n|`free`|查看内存使用情况|内存|\n|`top`|实时显示系统运行各项信息，相当于任务管理器|cpu|\n|`ps -ef`&#124;`grep sth`|查看当前运行进程||\n|`rename 's/\\.cc$/.cpp/' *.cc`|将后缀为.cc的文件后缀修改为.cpp|批量修改文件名|\n|`rename 's/\\s/./' *.c`|将后缀为.c的文件名中的空格替换为\".\"|批量修改文件名|\n|`rename 's/^/00/' [0-9]*`|将文件名以数字开头的文件前面加上00|批量修改文件名|\n|`history `&#124;` awk '{print $2}' `&#124;` sort `&#124;` uniq -c `&#124;` sort -rn `&#124;` head -15`|查看使用频次前15的历史命令||\n|`linuxlogo`|||\n|`wc [filename]`|统计指定文件中的行数、字数、字节数||\n|`usermod -l [新用户名] -d /home/[新用户名] -m [旧用户名]`|修改用户名||\n|`ln`|链接，软链接，硬链接||\n|`scp`|linux之间文件远程传输||\n|`more`|与cat类似，可以翻页浏览,空格键下一页，b回上一页||\n|`less`|与more类似，还可以使用vi编辑查找||\n|`awk`|AWK是一种处理文本文件的语言，是一个强大的文本分析工具||\n|`:%s/foo/bar/g`|全文查找替换||\n|`gg=G`|vim中代码智能对齐|vim|\n|`nl [file]`|查看文件内容，行号计算不包括空行，相当于`cat [file] -b`||\n|`:%!xxd`|vim中显示16进制|vim|\n|`:%!xxd -r`|vim中从16进制恢复|vim|\n|`sed -i '1,6d' *.cpp`|删除所有cpp文件的前六行||\n||||\n","source":"_posts/2019-03-18-linux_command.md","raw":"---\nlayout: post\ntitle: Linux常用命令总结(持续更新)\ndate: 2019-03-18 12:00:00\ntags: [c, linux, shell]\n\n---\n\n\n# Linux常用命令\n\n<!-- more -->\n\n|命令|含义|备注|\n|-|-|-|\n|`df -h`|查看磁盘使用情况|磁盘|\n|`du -ah --max-depth==1`|查看当前目录下的文件及文件夹的大小||\n|`du -sh`|查看当前文件夹大小||\n|`ls -ltr`|按修改时间排序||\n|`ls -l`&#124;`wc -l`|查看当前文件夹下文件及文件夹个数||\n|`ls -l`&#124;`grep \"^-\"`&#124;`wc -l`|查看当前文件夹下文件个数||\n|`ls -l`&#124;`grep \"^d\"`&#124;`wc -l`|查看当前文件夹下文件夹个数||\n|`free`|查看内存使用情况|内存|\n|`top`|实时显示系统运行各项信息，相当于任务管理器|cpu|\n|`ps -ef`&#124;`grep sth`|查看当前运行进程||\n|`rename 's/\\.cc$/.cpp/' *.cc`|将后缀为.cc的文件后缀修改为.cpp|批量修改文件名|\n|`rename 's/\\s/./' *.c`|将后缀为.c的文件名中的空格替换为\".\"|批量修改文件名|\n|`rename 's/^/00/' [0-9]*`|将文件名以数字开头的文件前面加上00|批量修改文件名|\n|`history `&#124;` awk '{print $2}' `&#124;` sort `&#124;` uniq -c `&#124;` sort -rn `&#124;` head -15`|查看使用频次前15的历史命令||\n|`linuxlogo`|||\n|`wc [filename]`|统计指定文件中的行数、字数、字节数||\n|`usermod -l [新用户名] -d /home/[新用户名] -m [旧用户名]`|修改用户名||\n|`ln`|链接，软链接，硬链接||\n|`scp`|linux之间文件远程传输||\n|`more`|与cat类似，可以翻页浏览,空格键下一页，b回上一页||\n|`less`|与more类似，还可以使用vi编辑查找||\n|`awk`|AWK是一种处理文本文件的语言，是一个强大的文本分析工具||\n|`:%s/foo/bar/g`|全文查找替换||\n|`gg=G`|vim中代码智能对齐|vim|\n|`nl [file]`|查看文件内容，行号计算不包括空行，相当于`cat [file] -b`||\n|`:%!xxd`|vim中显示16进制|vim|\n|`:%!xxd -r`|vim中从16进制恢复|vim|\n|`sed -i '1,6d' *.cpp`|删除所有cpp文件的前六行||\n||||\n","slug":"linux_command","published":1,"updated":"2019-05-20T10:53:16.731Z","_id":"cjutuhpf0000xifin7z4uo4y0","comments":1,"photos":[],"link":"","content":"<h1 id=\"Linux常用命令\"><a href=\"#Linux常用命令\" class=\"headerlink\" title=\"Linux常用命令\"></a>Linux常用命令</h1><a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>df -h</code></td>\n<td>查看磁盘使用情况</td>\n<td>磁盘</td>\n</tr>\n<tr>\n<td><code>du -ah --max-depth==1</code></td>\n<td>查看当前目录下的文件及文件夹的大小</td>\n<td></td>\n</tr>\n<tr>\n<td><code>du -sh</code></td>\n<td>查看当前文件夹大小</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ls -ltr</code></td>\n<td>按修改时间排序</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ls -l</code>&#124;<code>wc -l</code></td>\n<td>查看当前文件夹下文件及文件夹个数</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ls -l</code>&#124;<code>grep &quot;^-&quot;</code>&#124;<code>wc -l</code></td>\n<td>查看当前文件夹下文件个数</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ls -l</code>&#124;<code>grep &quot;^d&quot;</code>&#124;<code>wc -l</code></td>\n<td>查看当前文件夹下文件夹个数</td>\n<td></td>\n</tr>\n<tr>\n<td><code>free</code></td>\n<td>查看内存使用情况</td>\n<td>内存</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>实时显示系统运行各项信息，相当于任务管理器</td>\n<td>cpu</td>\n</tr>\n<tr>\n<td><code>ps -ef</code>&#124;<code>grep sth</code></td>\n<td>查看当前运行进程</td>\n<td></td>\n</tr>\n<tr>\n<td><code>rename &#39;s/\\.cc$/.cpp/&#39; *.cc</code></td>\n<td>将后缀为.cc的文件后缀修改为.cpp</td>\n<td>批量修改文件名</td>\n</tr>\n<tr>\n<td><code>rename &#39;s/\\s/./&#39; *.c</code></td>\n<td>将后缀为.c的文件名中的空格替换为”.”</td>\n<td>批量修改文件名</td>\n</tr>\n<tr>\n<td><code>rename &#39;s/^/00/&#39; [0-9]*</code></td>\n<td>将文件名以数字开头的文件前面加上00</td>\n<td>批量修改文件名</td>\n</tr>\n<tr>\n<td><code>history</code>&#124;<code>awk &#39;{print $2}&#39;</code>&#124;<code>sort</code>&#124;<code>uniq -c</code>&#124;<code>sort -rn</code>&#124;<code>head -15</code></td>\n<td>查看使用频次前15的历史命令</td>\n<td></td>\n</tr>\n<tr>\n<td><code>linuxlogo</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>wc [filename]</code></td>\n<td>统计指定文件中的行数、字数、字节数</td>\n<td></td>\n</tr>\n<tr>\n<td><code>usermod -l [新用户名] -d /home/[新用户名] -m [旧用户名]</code></td>\n<td>修改用户名</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ln</code></td>\n<td>链接，软链接，硬链接</td>\n<td></td>\n</tr>\n<tr>\n<td><code>scp</code></td>\n<td>linux之间文件远程传输</td>\n<td></td>\n</tr>\n<tr>\n<td><code>more</code></td>\n<td>与cat类似，可以翻页浏览,空格键下一页，b回上一页</td>\n<td></td>\n</tr>\n<tr>\n<td><code>less</code></td>\n<td>与more类似，还可以使用vi编辑查找</td>\n<td></td>\n</tr>\n<tr>\n<td><code>awk</code></td>\n<td>AWK是一种处理文本文件的语言，是一个强大的文本分析工具</td>\n<td></td>\n</tr>\n<tr>\n<td><code>:%s/foo/bar/g</code></td>\n<td>全文查找替换</td>\n<td></td>\n</tr>\n<tr>\n<td><code>gg=G</code></td>\n<td>vim中代码智能对齐</td>\n<td>vim</td>\n</tr>\n<tr>\n<td><code>nl [file]</code></td>\n<td>查看文件内容，行号计算不包括空行，相当于<code>cat [file] -b</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>:%!xxd</code></td>\n<td>vim中显示16进制</td>\n<td>vim</td>\n</tr>\n<tr>\n<td><code>:%!xxd -r</code></td>\n<td>vim中从16进制恢复</td>\n<td>vim</td>\n</tr>\n<tr>\n<td><code>sed -i &#39;1,6d&#39; *.cpp</code></td>\n<td>删除所有cpp文件的前六行</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h1 id=\"Linux常用命令\"><a href=\"#Linux常用命令\" class=\"headerlink\" title=\"Linux常用命令\"></a>Linux常用命令</h1>","more":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>df -h</code></td>\n<td>查看磁盘使用情况</td>\n<td>磁盘</td>\n</tr>\n<tr>\n<td><code>du -ah --max-depth==1</code></td>\n<td>查看当前目录下的文件及文件夹的大小</td>\n<td></td>\n</tr>\n<tr>\n<td><code>du -sh</code></td>\n<td>查看当前文件夹大小</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ls -ltr</code></td>\n<td>按修改时间排序</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ls -l</code>&#124;<code>wc -l</code></td>\n<td>查看当前文件夹下文件及文件夹个数</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ls -l</code>&#124;<code>grep &quot;^-&quot;</code>&#124;<code>wc -l</code></td>\n<td>查看当前文件夹下文件个数</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ls -l</code>&#124;<code>grep &quot;^d&quot;</code>&#124;<code>wc -l</code></td>\n<td>查看当前文件夹下文件夹个数</td>\n<td></td>\n</tr>\n<tr>\n<td><code>free</code></td>\n<td>查看内存使用情况</td>\n<td>内存</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>实时显示系统运行各项信息，相当于任务管理器</td>\n<td>cpu</td>\n</tr>\n<tr>\n<td><code>ps -ef</code>&#124;<code>grep sth</code></td>\n<td>查看当前运行进程</td>\n<td></td>\n</tr>\n<tr>\n<td><code>rename &#39;s/\\.cc$/.cpp/&#39; *.cc</code></td>\n<td>将后缀为.cc的文件后缀修改为.cpp</td>\n<td>批量修改文件名</td>\n</tr>\n<tr>\n<td><code>rename &#39;s/\\s/./&#39; *.c</code></td>\n<td>将后缀为.c的文件名中的空格替换为”.”</td>\n<td>批量修改文件名</td>\n</tr>\n<tr>\n<td><code>rename &#39;s/^/00/&#39; [0-9]*</code></td>\n<td>将文件名以数字开头的文件前面加上00</td>\n<td>批量修改文件名</td>\n</tr>\n<tr>\n<td><code>history</code>&#124;<code>awk &#39;{print $2}&#39;</code>&#124;<code>sort</code>&#124;<code>uniq -c</code>&#124;<code>sort -rn</code>&#124;<code>head -15</code></td>\n<td>查看使用频次前15的历史命令</td>\n<td></td>\n</tr>\n<tr>\n<td><code>linuxlogo</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>wc [filename]</code></td>\n<td>统计指定文件中的行数、字数、字节数</td>\n<td></td>\n</tr>\n<tr>\n<td><code>usermod -l [新用户名] -d /home/[新用户名] -m [旧用户名]</code></td>\n<td>修改用户名</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ln</code></td>\n<td>链接，软链接，硬链接</td>\n<td></td>\n</tr>\n<tr>\n<td><code>scp</code></td>\n<td>linux之间文件远程传输</td>\n<td></td>\n</tr>\n<tr>\n<td><code>more</code></td>\n<td>与cat类似，可以翻页浏览,空格键下一页，b回上一页</td>\n<td></td>\n</tr>\n<tr>\n<td><code>less</code></td>\n<td>与more类似，还可以使用vi编辑查找</td>\n<td></td>\n</tr>\n<tr>\n<td><code>awk</code></td>\n<td>AWK是一种处理文本文件的语言，是一个强大的文本分析工具</td>\n<td></td>\n</tr>\n<tr>\n<td><code>:%s/foo/bar/g</code></td>\n<td>全文查找替换</td>\n<td></td>\n</tr>\n<tr>\n<td><code>gg=G</code></td>\n<td>vim中代码智能对齐</td>\n<td>vim</td>\n</tr>\n<tr>\n<td><code>nl [file]</code></td>\n<td>查看文件内容，行号计算不包括空行，相当于<code>cat [file] -b</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>:%!xxd</code></td>\n<td>vim中显示16进制</td>\n<td>vim</td>\n</tr>\n<tr>\n<td><code>:%!xxd -r</code></td>\n<td>vim中从16进制恢复</td>\n<td>vim</td>\n</tr>\n<tr>\n<td><code>sed -i &#39;1,6d&#39; *.cpp</code></td>\n<td>删除所有cpp文件的前六行</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>"},{"layout":"post","title":"Find+wc统计代码行数(文件名含空格)","date":"2019-03-25T04:00:00.000Z","_content":"\n一开始这样写`find . -name \"*.cpp\" | xargs wc -l`，名字有空格的文件无法处理\n\n后来就在网上找，下面这个方法可以：\n\n```shell\n<!-- more -->\nfind . -name \"*.cpp\" -print0 | xargs -0 wc -l\n```\n\n好像是把空格替换成'\\0'了\n","source":"_posts/2019-03-25-find_wc.md","raw":"---\nlayout: post\ntitle: find+wc统计代码行数(文件名含空格)\ndate: 2019-03-25 12:00:00\ntags: [shell, linux]\n\n---\n\n一开始这样写`find . -name \"*.cpp\" | xargs wc -l`，名字有空格的文件无法处理\n\n后来就在网上找，下面这个方法可以：\n\n```shell\n<!-- more -->\nfind . -name \"*.cpp\" -print0 | xargs -0 wc -l\n```\n\n好像是把空格替换成'\\0'了\n","slug":"find_wc","published":1,"updated":"2019-03-29T08:14:56.233Z","comments":1,"photos":[],"link":"","_id":"cjutuhpf2000zifinzs2cpkbc","content":"<p>一开始这样写<code>find . -name &quot;*.cpp&quot; | xargs wc -l</code>，名字有空格的文件无法处理</p>\n<p>后来就在网上找，下面这个方法可以：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">find . -name \"*.cpp\" -print0 | xargs -0 wc -l</span><br></pre></td></tr></table></figure>\n<p>好像是把空格替换成’\\0’了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一开始这样写<code>find . -name &quot;*.cpp&quot; | xargs wc -l</code>，名字有空格的文件无法处理</p>\n<p>后来就在网上找，下面这个方法可以：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">find . -name \"*.cpp\" -print0 | xargs -0 wc -l</span><br></pre></td></tr></table></figure>\n<p>好像是把空格替换成’\\0’了</p>\n"},{"layout":"post","title":"GDB and Make","date":"2019-03-25T05:00:00.000Z","_content":"\n\n* [MySQL]()\n* [Oracle]()\n* [poi]()\n* [epoll]()\n<!-- more -->\n* [redis]()\n* [log4cpp]()\n* [socket]()\n* [C/S模式]()\n* [C++, Java, Python]()\n* [STL]()\n* [Linux环境编程]()\n* [GDB](#gdb)\n* [Make](#make)\n* [多线程编程]()\n* [git,github]()\n\n\n# GDB\n* 1.编译时加上-g\n```\n$ g++ *.cpp -g\n```\n* 2.执行时\n```\n$ gdb a.out\n```\n或者分两步\n```\n$ gdb\n(gdb)file a.out\n```\n* 命令\n\n|命令|含义|对应windows|\n|-|-|-|\n|l|显示代码||\n|r|开始运行|F9|\n|b 4|在第四行设置断点|F5|\n|info b|查看所有断点||\n|delete [断点号]|查看所有断点||\n|n|下一步,不进入函数|F10|\n|s|表示单步进入函数|F11|\n|p i|打印变量i||\n|c|继续运行,直到函数结束或遇到新的断点||\n|q|退出||\n\n\n# Make\n\n格式：\n\n```\ntarget: dependency_files\n< tab > command\n```\n\n.PHONY是Makefile文件的关键字，表示它后面列表中的目标均为伪目标。伪目标通常用在清理文件、强制重新编译等情况下\n\n自定义文件名的话,比如makename执行时在后面加上-f makename\n\n```\nmake -f makename\n```\n\n**变量函数与规则**\n\n随着项目越来越大，源文件也越来越复杂，这个时候就要用到变量，写出通用性较强的makefile文件\n\n## 定义变量的两种方法\n\n* 1.变量名=变量值   递归变量展开（几个变量共享一个值） //不常用\n* 2.变量名:=变量值  简单变量展开（类似于C++的赋值）    //常用\n\n变量分为; 用户自定义变量，预定义变量（CFLAGS），自动变量，环境变量\n\n自动变量：指在使用的时候，自动用特定的值替换，常用的有: \n\n|变量|说明|\n|-|-|\n|$@|当前规则的目标文件（重点）|\n|$<|当前规则的第一个依赖文件|\n|$^|当前规则的所有依赖文件，以空格分隔（重点）|\n|$?|规则中日期新于目标文件的所有相关文件列表，逗号分隔|\n|$(@D)|目标文件的目录名部分|\n|$(@F)|目标文件的文件名部分|\n\n预定义变量：内部事先定义好的变量，但是它的值是固定的，并且有些的值是为空的。\n\n* AR: 库文件打包程序默认为ar\n* AS: 汇编程序，默认为as\n* CC: c编译器默认为cc\n* CPP: C预编译器，默认为$(CC) -E\n* CXX: C++编译器，默认为g++\n* RM: 删除，默认为rm -f\n* ARFLAGS: 库选项，无默认\n* ASFLAGS: 汇编选项，无默认\n* CFLAGS: c编译器选项，无默认\n* CPPFLAGS: c预编译器选项，无默认\n* CXXFLAGS: c++编译器选项\n\n## 函数\n\n* 1.wildcard : 搜索当前目录下的文件名，展开成一列所有符合由其参数描述的文件名，文件间以空格间隔。\n`SOURCES=$(wildcard *.cpp)`把当前目录下所有.cpp文件存入变量SOURCES里。\n\n* 2.字符串替换函数: $(patsubst要查找的子串，替换后的目标子串，源字符串)。将源字符串(以空格分隔)中的\n所有要查找的子串替换成目标子串。如OBJS=$(patsubst %.cpp,%.o,$(SOURCES))\n把SOURCES中的.cpp替换为.o\n\n* 3.$(addprefix 前缀，源字符串)函数把第二个参数列表的每一项前缀上第一个参数值???\n\n\n下面是一个较为通用的makefile:\n\n```makefile\nDIR      := ./debug\nEXE      := $(DIR)/main.exe\nCC       := g++\nLIBS     :=\nSRCS     := $(wildcard *.cpp) $(wildcard *.c) $(wildcard *.cc)\nOCPP     := $(patsubst %.cpp, $(DIR)/%.o, $(wildcard *.cpp))\nOC       := $(patsubst %.c, $(DIR)/%.co, $(wildcard *.c))\nOCC      := $(patsubst %.cc, $(DIR)/%.cco, $(wildcard *.cc))\nOCC      := $(OC) $(OCC) $(OCPP)\nRM       := rm -rf\nCXXFLAGS := -Wall -g\nstart : mkdebug $(EXE)\nmkdebug :\n    @if[! -d $(DIR)]; then mkdir $(DIR); fi;\n$(EXE) : $(OBJS)\n    $(CC) -o $@ $(OBJS) $(addprefix -l, $(LIBS))\n$(DIR)/%.o : %.cpp\n    $(CC) -c $(CXXFLAGS) $< -o $@\n$(DIR)/%.co : %.c\n    $(CC) -c $(CXXFLAGS) $< -o $@\n$(DIR)/%.cco : %.cc\n    $(CC) -c $(CXXFLAGS) $< -o $@\n\n.PHONY : clean rebuild\nclean :\n    @D$(RM) $(DIR)/*.exe $(DIR)/*.o $(DIR)/*.co $(DIR)/*.cco\nrebuild : clean start\n\n```\n\n## make的命令行选项\n\n|命令格式|含义|\n|-|-|\n|-C dir|读入指定目录下的makefile|\n|-f file|读入当前目录下的file文件作为makefile|\n|-i|忽略所有的命令行执行错误|\n|-I dir|指定被包含的makefile所在目录|\n|-n|只打印要执行的命令，但不执行这些命令|\n|-p|显示make变量数据库和隐含规则|\n|-s|在执行命令时不显示命令|\n|-w|如果make在执行过程中改变目录, 则打印当前目录名|\n\n## 采用for循环编译多个目标文件的Makefile写法\n\n...\n","source":"_posts/2019-03-25-gdb_make.md","raw":"---\nlayout: post\ntitle: GDB and Make\ndate: 2019-03-25 13:00:00\ntags: [C++, 技术]\n\n---\n\n\n* [MySQL]()\n* [Oracle]()\n* [poi]()\n* [epoll]()\n<!-- more -->\n* [redis]()\n* [log4cpp]()\n* [socket]()\n* [C/S模式]()\n* [C++, Java, Python]()\n* [STL]()\n* [Linux环境编程]()\n* [GDB](#gdb)\n* [Make](#make)\n* [多线程编程]()\n* [git,github]()\n\n\n# GDB\n* 1.编译时加上-g\n```\n$ g++ *.cpp -g\n```\n* 2.执行时\n```\n$ gdb a.out\n```\n或者分两步\n```\n$ gdb\n(gdb)file a.out\n```\n* 命令\n\n|命令|含义|对应windows|\n|-|-|-|\n|l|显示代码||\n|r|开始运行|F9|\n|b 4|在第四行设置断点|F5|\n|info b|查看所有断点||\n|delete [断点号]|查看所有断点||\n|n|下一步,不进入函数|F10|\n|s|表示单步进入函数|F11|\n|p i|打印变量i||\n|c|继续运行,直到函数结束或遇到新的断点||\n|q|退出||\n\n\n# Make\n\n格式：\n\n```\ntarget: dependency_files\n< tab > command\n```\n\n.PHONY是Makefile文件的关键字，表示它后面列表中的目标均为伪目标。伪目标通常用在清理文件、强制重新编译等情况下\n\n自定义文件名的话,比如makename执行时在后面加上-f makename\n\n```\nmake -f makename\n```\n\n**变量函数与规则**\n\n随着项目越来越大，源文件也越来越复杂，这个时候就要用到变量，写出通用性较强的makefile文件\n\n## 定义变量的两种方法\n\n* 1.变量名=变量值   递归变量展开（几个变量共享一个值） //不常用\n* 2.变量名:=变量值  简单变量展开（类似于C++的赋值）    //常用\n\n变量分为; 用户自定义变量，预定义变量（CFLAGS），自动变量，环境变量\n\n自动变量：指在使用的时候，自动用特定的值替换，常用的有: \n\n|变量|说明|\n|-|-|\n|$@|当前规则的目标文件（重点）|\n|$<|当前规则的第一个依赖文件|\n|$^|当前规则的所有依赖文件，以空格分隔（重点）|\n|$?|规则中日期新于目标文件的所有相关文件列表，逗号分隔|\n|$(@D)|目标文件的目录名部分|\n|$(@F)|目标文件的文件名部分|\n\n预定义变量：内部事先定义好的变量，但是它的值是固定的，并且有些的值是为空的。\n\n* AR: 库文件打包程序默认为ar\n* AS: 汇编程序，默认为as\n* CC: c编译器默认为cc\n* CPP: C预编译器，默认为$(CC) -E\n* CXX: C++编译器，默认为g++\n* RM: 删除，默认为rm -f\n* ARFLAGS: 库选项，无默认\n* ASFLAGS: 汇编选项，无默认\n* CFLAGS: c编译器选项，无默认\n* CPPFLAGS: c预编译器选项，无默认\n* CXXFLAGS: c++编译器选项\n\n## 函数\n\n* 1.wildcard : 搜索当前目录下的文件名，展开成一列所有符合由其参数描述的文件名，文件间以空格间隔。\n`SOURCES=$(wildcard *.cpp)`把当前目录下所有.cpp文件存入变量SOURCES里。\n\n* 2.字符串替换函数: $(patsubst要查找的子串，替换后的目标子串，源字符串)。将源字符串(以空格分隔)中的\n所有要查找的子串替换成目标子串。如OBJS=$(patsubst %.cpp,%.o,$(SOURCES))\n把SOURCES中的.cpp替换为.o\n\n* 3.$(addprefix 前缀，源字符串)函数把第二个参数列表的每一项前缀上第一个参数值???\n\n\n下面是一个较为通用的makefile:\n\n```makefile\nDIR      := ./debug\nEXE      := $(DIR)/main.exe\nCC       := g++\nLIBS     :=\nSRCS     := $(wildcard *.cpp) $(wildcard *.c) $(wildcard *.cc)\nOCPP     := $(patsubst %.cpp, $(DIR)/%.o, $(wildcard *.cpp))\nOC       := $(patsubst %.c, $(DIR)/%.co, $(wildcard *.c))\nOCC      := $(patsubst %.cc, $(DIR)/%.cco, $(wildcard *.cc))\nOCC      := $(OC) $(OCC) $(OCPP)\nRM       := rm -rf\nCXXFLAGS := -Wall -g\nstart : mkdebug $(EXE)\nmkdebug :\n    @if[! -d $(DIR)]; then mkdir $(DIR); fi;\n$(EXE) : $(OBJS)\n    $(CC) -o $@ $(OBJS) $(addprefix -l, $(LIBS))\n$(DIR)/%.o : %.cpp\n    $(CC) -c $(CXXFLAGS) $< -o $@\n$(DIR)/%.co : %.c\n    $(CC) -c $(CXXFLAGS) $< -o $@\n$(DIR)/%.cco : %.cc\n    $(CC) -c $(CXXFLAGS) $< -o $@\n\n.PHONY : clean rebuild\nclean :\n    @D$(RM) $(DIR)/*.exe $(DIR)/*.o $(DIR)/*.co $(DIR)/*.cco\nrebuild : clean start\n\n```\n\n## make的命令行选项\n\n|命令格式|含义|\n|-|-|\n|-C dir|读入指定目录下的makefile|\n|-f file|读入当前目录下的file文件作为makefile|\n|-i|忽略所有的命令行执行错误|\n|-I dir|指定被包含的makefile所在目录|\n|-n|只打印要执行的命令，但不执行这些命令|\n|-p|显示make变量数据库和隐含规则|\n|-s|在执行命令时不显示命令|\n|-w|如果make在执行过程中改变目录, 则打印当前目录名|\n\n## 采用for循环编译多个目标文件的Makefile写法\n\n...\n","slug":"gdb_make","published":1,"updated":"2019-04-10T00:59:26.936Z","comments":1,"photos":[],"link":"","_id":"cjutuhpf40011ifinu6cvck0q","content":"<ul>\n<li><a href>MySQL</a></li>\n<li><a href>Oracle</a></li>\n<li><a href>poi</a></li>\n<li><a href>epoll</a><a id=\"more\"></a></li>\n<li><a href>redis</a></li>\n<li><a href>log4cpp</a></li>\n<li><a href>socket</a></li>\n<li><a href>C/S模式</a></li>\n<li><a href>C++, Java, Python</a></li>\n<li><a href>STL</a></li>\n<li><a href>Linux环境编程</a></li>\n<li><a href=\"#gdb\">GDB</a></li>\n<li><a href=\"#make\">Make</a></li>\n<li><a href>多线程编程</a></li>\n<li><a href>git,github</a></li>\n</ul>\n<h1 id=\"GDB\"><a href=\"#GDB\" class=\"headerlink\" title=\"GDB\"></a>GDB</h1><ul>\n<li><p>1.编译时加上-g</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ *.cpp -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.执行时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gdb a.out</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者分两步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gdb</span><br><span class=\"line\">(gdb)file a.out</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n<th>对应windows</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>l</td>\n<td>显示代码</td>\n<td></td>\n</tr>\n<tr>\n<td>r</td>\n<td>开始运行</td>\n<td>F9</td>\n</tr>\n<tr>\n<td>b 4</td>\n<td>在第四行设置断点</td>\n<td>F5</td>\n</tr>\n<tr>\n<td>info b</td>\n<td>查看所有断点</td>\n<td></td>\n</tr>\n<tr>\n<td>delete [断点号]</td>\n<td>查看所有断点</td>\n<td></td>\n</tr>\n<tr>\n<td>n</td>\n<td>下一步,不进入函数</td>\n<td>F10</td>\n</tr>\n<tr>\n<td>s</td>\n<td>表示单步进入函数</td>\n<td>F11</td>\n</tr>\n<tr>\n<td>p i</td>\n<td>打印变量i</td>\n<td></td>\n</tr>\n<tr>\n<td>c</td>\n<td>继续运行,直到函数结束或遇到新的断点</td>\n<td></td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Make\"><a href=\"#Make\" class=\"headerlink\" title=\"Make\"></a>Make</h1><p>格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target: dependency_files</span><br><span class=\"line\">&lt; tab &gt; command</span><br></pre></td></tr></table></figure>\n<p>.PHONY是Makefile文件的关键字，表示它后面列表中的目标均为伪目标。伪目标通常用在清理文件、强制重新编译等情况下</p>\n<p>自定义文件名的话,比如makename执行时在后面加上-f makename</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -f makename</span><br></pre></td></tr></table></figure>\n<p><strong>变量函数与规则</strong></p>\n<p>随着项目越来越大，源文件也越来越复杂，这个时候就要用到变量，写出通用性较强的makefile文件</p>\n<h2 id=\"定义变量的两种方法\"><a href=\"#定义变量的两种方法\" class=\"headerlink\" title=\"定义变量的两种方法\"></a>定义变量的两种方法</h2><ul>\n<li>1.变量名=变量值   递归变量展开（几个变量共享一个值） //不常用</li>\n<li>2.变量名:=变量值  简单变量展开（类似于C++的赋值）    //常用</li>\n</ul>\n<p>变量分为; 用户自定义变量，预定义变量（CFLAGS），自动变量，环境变量</p>\n<p>自动变量：指在使用的时候，自动用特定的值替换，常用的有: </p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$@</td>\n<td>当前规则的目标文件（重点）</td>\n</tr>\n<tr>\n<td>$&lt;</td>\n<td>当前规则的第一个依赖文件</td>\n</tr>\n<tr>\n<td>$^</td>\n<td>当前规则的所有依赖文件，以空格分隔（重点）</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>规则中日期新于目标文件的所有相关文件列表，逗号分隔</td>\n</tr>\n<tr>\n<td>$(@D)</td>\n<td>目标文件的目录名部分</td>\n</tr>\n<tr>\n<td>$(@F)</td>\n<td>目标文件的文件名部分</td>\n</tr>\n</tbody>\n</table>\n<p>预定义变量：内部事先定义好的变量，但是它的值是固定的，并且有些的值是为空的。</p>\n<ul>\n<li>AR: 库文件打包程序默认为ar</li>\n<li>AS: 汇编程序，默认为as</li>\n<li>CC: c编译器默认为cc</li>\n<li>CPP: C预编译器，默认为$(CC) -E</li>\n<li>CXX: C++编译器，默认为g++</li>\n<li>RM: 删除，默认为rm -f</li>\n<li>ARFLAGS: 库选项，无默认</li>\n<li>ASFLAGS: 汇编选项，无默认</li>\n<li>CFLAGS: c编译器选项，无默认</li>\n<li>CPPFLAGS: c预编译器选项，无默认</li>\n<li>CXXFLAGS: c++编译器选项</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><p>1.wildcard : 搜索当前目录下的文件名，展开成一列所有符合由其参数描述的文件名，文件间以空格间隔。<br><code>SOURCES=$(wildcard *.cpp)</code>把当前目录下所有.cpp文件存入变量SOURCES里。</p>\n</li>\n<li><p>2.字符串替换函数: $(patsubst要查找的子串，替换后的目标子串，源字符串)。将源字符串(以空格分隔)中的<br>所有要查找的子串替换成目标子串。如OBJS=$(patsubst %.cpp,%.o,$(SOURCES))<br>把SOURCES中的.cpp替换为.o</p>\n</li>\n<li><p>3.$(addprefix 前缀，源字符串)函数把第二个参数列表的每一项前缀上第一个参数值???</p>\n</li>\n</ul>\n<p>下面是一个较为通用的makefile:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIR      := ./debug</span><br><span class=\"line\">EXE      := <span class=\"variable\">$(DIR)</span>/main.exe</span><br><span class=\"line\">CC       := g++</span><br><span class=\"line\">LIBS     :=</span><br><span class=\"line\">SRCS     := <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.cpp)</span> <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.c)</span> <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.cc)</span></span><br><span class=\"line\">OCPP     := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.cpp, <span class=\"variable\">$(DIR)</span>/%.o, $(<span class=\"built_in\">wildcard</span> *.cpp)</span>)</span><br><span class=\"line\">OC       := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.c, <span class=\"variable\">$(DIR)</span>/%.co, $(<span class=\"built_in\">wildcard</span> *.c)</span>)</span><br><span class=\"line\">OCC      := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.cc, <span class=\"variable\">$(DIR)</span>/%.cco, $(<span class=\"built_in\">wildcard</span> *.cc)</span>)</span><br><span class=\"line\">OCC      := <span class=\"variable\">$(OC)</span> <span class=\"variable\">$(OCC)</span> <span class=\"variable\">$(OCPP)</span></span><br><span class=\"line\">RM       := rm -rf</span><br><span class=\"line\">CXXFLAGS := -Wall -g</span><br><span class=\"line\">start : mkdebug <span class=\"variable\">$(EXE)</span></span><br><span class=\"line\">mkdebug :</span><br><span class=\"line\">    @if[! -d <span class=\"variable\">$(DIR)</span>]; then mkdir <span class=\"variable\">$(DIR)</span>; fi;</span><br><span class=\"line\"><span class=\"variable\">$(EXE)</span> : <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -o <span class=\"variable\">$@</span> <span class=\"variable\">$(OBJS)</span> <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> -l, <span class=\"variable\">$(LIBS)</span>)</span></span><br><span class=\"line\"><span class=\"variable\">$(DIR)</span>/%.o : %.cpp</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"variable\">$(DIR)</span>/%.co : %.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"variable\">$(DIR)</span>/%.cco : %.cc</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY : clean rebuild</span><br><span class=\"line\">clean :</span><br><span class=\"line\">    @D<span class=\"variable\">$(RM)</span> <span class=\"variable\">$(DIR)</span>/*.exe <span class=\"variable\">$(DIR)</span>/*.o <span class=\"variable\">$(DIR)</span>/*.co <span class=\"variable\">$(DIR)</span>/*.cco</span><br><span class=\"line\">rebuild : clean start</span><br></pre></td></tr></table></figure>\n<h2 id=\"make的命令行选项\"><a href=\"#make的命令行选项\" class=\"headerlink\" title=\"make的命令行选项\"></a>make的命令行选项</h2><table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-C dir</td>\n<td>读入指定目录下的makefile</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>读入当前目录下的file文件作为makefile</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>忽略所有的命令行执行错误</td>\n</tr>\n<tr>\n<td>-I dir</td>\n<td>指定被包含的makefile所在目录</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>只打印要执行的命令，但不执行这些命令</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>显示make变量数据库和隐含规则</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>在执行命令时不显示命令</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>如果make在执行过程中改变目录, 则打印当前目录名</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"采用for循环编译多个目标文件的Makefile写法\"><a href=\"#采用for循环编译多个目标文件的Makefile写法\" class=\"headerlink\" title=\"采用for循环编译多个目标文件的Makefile写法\"></a>采用for循环编译多个目标文件的Makefile写法</h2><p>…</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><a href>MySQL</a></li>\n<li><a href>Oracle</a></li>\n<li><a href>poi</a></li>\n<li><a href>epoll</a>","more":"</li>\n<li><a href>redis</a></li>\n<li><a href>log4cpp</a></li>\n<li><a href>socket</a></li>\n<li><a href>C/S模式</a></li>\n<li><a href>C++, Java, Python</a></li>\n<li><a href>STL</a></li>\n<li><a href>Linux环境编程</a></li>\n<li><a href=\"#gdb\">GDB</a></li>\n<li><a href=\"#make\">Make</a></li>\n<li><a href>多线程编程</a></li>\n<li><a href>git,github</a></li>\n</ul>\n<h1 id=\"GDB\"><a href=\"#GDB\" class=\"headerlink\" title=\"GDB\"></a>GDB</h1><ul>\n<li><p>1.编译时加上-g</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ *.cpp -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.执行时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gdb a.out</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者分两步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gdb</span><br><span class=\"line\">(gdb)file a.out</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n<th>对应windows</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>l</td>\n<td>显示代码</td>\n<td></td>\n</tr>\n<tr>\n<td>r</td>\n<td>开始运行</td>\n<td>F9</td>\n</tr>\n<tr>\n<td>b 4</td>\n<td>在第四行设置断点</td>\n<td>F5</td>\n</tr>\n<tr>\n<td>info b</td>\n<td>查看所有断点</td>\n<td></td>\n</tr>\n<tr>\n<td>delete [断点号]</td>\n<td>查看所有断点</td>\n<td></td>\n</tr>\n<tr>\n<td>n</td>\n<td>下一步,不进入函数</td>\n<td>F10</td>\n</tr>\n<tr>\n<td>s</td>\n<td>表示单步进入函数</td>\n<td>F11</td>\n</tr>\n<tr>\n<td>p i</td>\n<td>打印变量i</td>\n<td></td>\n</tr>\n<tr>\n<td>c</td>\n<td>继续运行,直到函数结束或遇到新的断点</td>\n<td></td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Make\"><a href=\"#Make\" class=\"headerlink\" title=\"Make\"></a>Make</h1><p>格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target: dependency_files</span><br><span class=\"line\">&lt; tab &gt; command</span><br></pre></td></tr></table></figure>\n<p>.PHONY是Makefile文件的关键字，表示它后面列表中的目标均为伪目标。伪目标通常用在清理文件、强制重新编译等情况下</p>\n<p>自定义文件名的话,比如makename执行时在后面加上-f makename</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -f makename</span><br></pre></td></tr></table></figure>\n<p><strong>变量函数与规则</strong></p>\n<p>随着项目越来越大，源文件也越来越复杂，这个时候就要用到变量，写出通用性较强的makefile文件</p>\n<h2 id=\"定义变量的两种方法\"><a href=\"#定义变量的两种方法\" class=\"headerlink\" title=\"定义变量的两种方法\"></a>定义变量的两种方法</h2><ul>\n<li>1.变量名=变量值   递归变量展开（几个变量共享一个值） //不常用</li>\n<li>2.变量名:=变量值  简单变量展开（类似于C++的赋值）    //常用</li>\n</ul>\n<p>变量分为; 用户自定义变量，预定义变量（CFLAGS），自动变量，环境变量</p>\n<p>自动变量：指在使用的时候，自动用特定的值替换，常用的有: </p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$@</td>\n<td>当前规则的目标文件（重点）</td>\n</tr>\n<tr>\n<td>$&lt;</td>\n<td>当前规则的第一个依赖文件</td>\n</tr>\n<tr>\n<td>$^</td>\n<td>当前规则的所有依赖文件，以空格分隔（重点）</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>规则中日期新于目标文件的所有相关文件列表，逗号分隔</td>\n</tr>\n<tr>\n<td>$(@D)</td>\n<td>目标文件的目录名部分</td>\n</tr>\n<tr>\n<td>$(@F)</td>\n<td>目标文件的文件名部分</td>\n</tr>\n</tbody>\n</table>\n<p>预定义变量：内部事先定义好的变量，但是它的值是固定的，并且有些的值是为空的。</p>\n<ul>\n<li>AR: 库文件打包程序默认为ar</li>\n<li>AS: 汇编程序，默认为as</li>\n<li>CC: c编译器默认为cc</li>\n<li>CPP: C预编译器，默认为$(CC) -E</li>\n<li>CXX: C++编译器，默认为g++</li>\n<li>RM: 删除，默认为rm -f</li>\n<li>ARFLAGS: 库选项，无默认</li>\n<li>ASFLAGS: 汇编选项，无默认</li>\n<li>CFLAGS: c编译器选项，无默认</li>\n<li>CPPFLAGS: c预编译器选项，无默认</li>\n<li>CXXFLAGS: c++编译器选项</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><p>1.wildcard : 搜索当前目录下的文件名，展开成一列所有符合由其参数描述的文件名，文件间以空格间隔。<br><code>SOURCES=$(wildcard *.cpp)</code>把当前目录下所有.cpp文件存入变量SOURCES里。</p>\n</li>\n<li><p>2.字符串替换函数: $(patsubst要查找的子串，替换后的目标子串，源字符串)。将源字符串(以空格分隔)中的<br>所有要查找的子串替换成目标子串。如OBJS=$(patsubst %.cpp,%.o,$(SOURCES))<br>把SOURCES中的.cpp替换为.o</p>\n</li>\n<li><p>3.$(addprefix 前缀，源字符串)函数把第二个参数列表的每一项前缀上第一个参数值???</p>\n</li>\n</ul>\n<p>下面是一个较为通用的makefile:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIR      := ./debug</span><br><span class=\"line\">EXE      := <span class=\"variable\">$(DIR)</span>/main.exe</span><br><span class=\"line\">CC       := g++</span><br><span class=\"line\">LIBS     :=</span><br><span class=\"line\">SRCS     := <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.cpp)</span> <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.c)</span> <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.cc)</span></span><br><span class=\"line\">OCPP     := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.cpp, <span class=\"variable\">$(DIR)</span>/%.o, $(<span class=\"built_in\">wildcard</span> *.cpp)</span>)</span><br><span class=\"line\">OC       := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.c, <span class=\"variable\">$(DIR)</span>/%.co, $(<span class=\"built_in\">wildcard</span> *.c)</span>)</span><br><span class=\"line\">OCC      := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.cc, <span class=\"variable\">$(DIR)</span>/%.cco, $(<span class=\"built_in\">wildcard</span> *.cc)</span>)</span><br><span class=\"line\">OCC      := <span class=\"variable\">$(OC)</span> <span class=\"variable\">$(OCC)</span> <span class=\"variable\">$(OCPP)</span></span><br><span class=\"line\">RM       := rm -rf</span><br><span class=\"line\">CXXFLAGS := -Wall -g</span><br><span class=\"line\">start : mkdebug <span class=\"variable\">$(EXE)</span></span><br><span class=\"line\">mkdebug :</span><br><span class=\"line\">    @if[! -d <span class=\"variable\">$(DIR)</span>]; then mkdir <span class=\"variable\">$(DIR)</span>; fi;</span><br><span class=\"line\"><span class=\"variable\">$(EXE)</span> : <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -o <span class=\"variable\">$@</span> <span class=\"variable\">$(OBJS)</span> <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> -l, <span class=\"variable\">$(LIBS)</span>)</span></span><br><span class=\"line\"><span class=\"variable\">$(DIR)</span>/%.o : %.cpp</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"variable\">$(DIR)</span>/%.co : %.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"variable\">$(DIR)</span>/%.cco : %.cc</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY : clean rebuild</span><br><span class=\"line\">clean :</span><br><span class=\"line\">    @D<span class=\"variable\">$(RM)</span> <span class=\"variable\">$(DIR)</span>/*.exe <span class=\"variable\">$(DIR)</span>/*.o <span class=\"variable\">$(DIR)</span>/*.co <span class=\"variable\">$(DIR)</span>/*.cco</span><br><span class=\"line\">rebuild : clean start</span><br></pre></td></tr></table></figure>\n<h2 id=\"make的命令行选项\"><a href=\"#make的命令行选项\" class=\"headerlink\" title=\"make的命令行选项\"></a>make的命令行选项</h2><table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-C dir</td>\n<td>读入指定目录下的makefile</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>读入当前目录下的file文件作为makefile</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>忽略所有的命令行执行错误</td>\n</tr>\n<tr>\n<td>-I dir</td>\n<td>指定被包含的makefile所在目录</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>只打印要执行的命令，但不执行这些命令</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>显示make变量数据库和隐含规则</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>在执行命令时不显示命令</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>如果make在执行过程中改变目录, 则打印当前目录名</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"采用for循环编译多个目标文件的Makefile写法\"><a href=\"#采用for循环编译多个目标文件的Makefile写法\" class=\"headerlink\" title=\"采用for循环编译多个目标文件的Makefile写法\"></a>采用for循环编译多个目标文件的Makefile写法</h2><p>…</p>"},{"title":"博客迁移到Hexo","date":"2019-03-29T06:49:54.000Z","_content":"\n![img](/images/path.jpg)\n\n把博客迁移到[hexo](https://github.com/hexojs/hexo)了，主题是[yilia](https://github.com/litten/hexo-theme-yilia), \n比原来的好看，也好用。不过这个主题的作者好像不更新了，以后可以换别的主题试试。\n其实之前就想试试Hexo，当时安装Node.js出了点问题，就放弃了。这次也碰到问题了，不过参考网上的方法很快解决了，\n[这里是方法链接](https://www.jianshu.com/p/31744aa44824)。\n\n<!-- more -->\n然后，简单了解了一下Hexo的命令，就可以开始使用Hexo啦。原来需要`git add/commit/push`几条命令才能发布，\n现在只需要一条命令(`hexo g -d`)就可以了。\n\n下面简单说一下步骤。\n* 安装Node.js, Git\n* 安装Hexo : `npm install hexo-cli -g`\n* Setup your blog : `hexo init blog` \n* 进入blog`cd blog`并下载主题 : `git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia`\n* 选择主题`theme: yilia`\n* 配置`/blog/_config.yml`\n    * `new_post_name: year-:month-:day:title.md`\n    * `deploy:`\n        ```\n        type: git\n        repository: git@github.com:yourname/yourname.github.io.git\n        branch: master\n        ```\n* 常用Hexo命令\n    * 新建博客：`hexo new title`\n    * 发布：`hexo g -d`\n","source":"_posts/2019-03-29-blog-transfer-to-Hexo.md","raw":"---\ntitle: 博客迁移到Hexo\ndate: 2019-03-29 14:49:54\ntags: 笔记\n\n---\n\n![img](/images/path.jpg)\n\n把博客迁移到[hexo](https://github.com/hexojs/hexo)了，主题是[yilia](https://github.com/litten/hexo-theme-yilia), \n比原来的好看，也好用。不过这个主题的作者好像不更新了，以后可以换别的主题试试。\n其实之前就想试试Hexo，当时安装Node.js出了点问题，就放弃了。这次也碰到问题了，不过参考网上的方法很快解决了，\n[这里是方法链接](https://www.jianshu.com/p/31744aa44824)。\n\n<!-- more -->\n然后，简单了解了一下Hexo的命令，就可以开始使用Hexo啦。原来需要`git add/commit/push`几条命令才能发布，\n现在只需要一条命令(`hexo g -d`)就可以了。\n\n下面简单说一下步骤。\n* 安装Node.js, Git\n* 安装Hexo : `npm install hexo-cli -g`\n* Setup your blog : `hexo init blog` \n* 进入blog`cd blog`并下载主题 : `git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia`\n* 选择主题`theme: yilia`\n* 配置`/blog/_config.yml`\n    * `new_post_name: year-:month-:day:title.md`\n    * `deploy:`\n        ```\n        type: git\n        repository: git@github.com:yourname/yourname.github.io.git\n        branch: master\n        ```\n* 常用Hexo命令\n    * 新建博客：`hexo new title`\n    * 发布：`hexo g -d`\n","slug":"blog-transfer-to-Hexo","published":1,"updated":"2019-03-30T09:54:00.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutuhpf60013ifinmgpxfkcx","content":"<p><img src=\"/images/path.jpg\" alt=\"img\"></p>\n<p>把博客迁移到<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo</a>了，主题是<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia</a>,<br>比原来的好看，也好用。不过这个主题的作者好像不更新了，以后可以换别的主题试试。<br>其实之前就想试试Hexo，当时安装Node.js出了点问题，就放弃了。这次也碰到问题了，不过参考网上的方法很快解决了，<br><a href=\"https://www.jianshu.com/p/31744aa44824\" target=\"_blank\" rel=\"noopener\">这里是方法链接</a>。</p>\n<a id=\"more\"></a>\n<p>然后，简单了解了一下Hexo的命令，就可以开始使用Hexo啦。原来需要<code>git add/commit/push</code>几条命令才能发布，<br>现在只需要一条命令(<code>hexo g -d</code>)就可以了。</p>\n<p>下面简单说一下步骤。</p>\n<ul>\n<li>安装Node.js, Git</li>\n<li>安装Hexo : <code>npm install hexo-cli -g</code></li>\n<li>Setup your blog : <code>hexo init blog</code> </li>\n<li>进入blog<code>cd blog</code>并下载主题 : <code>git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</code></li>\n<li>选择主题<code>theme: yilia</code></li>\n<li><p>配置<code>/blog/_config.yml</code></p>\n<ul>\n<li><code>new_post_name: year-:month-:day:title.md</code></li>\n<li><code>deploy:</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">repository: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>常用Hexo命令</p>\n<ul>\n<li>新建博客：<code>hexo new title</code></li>\n<li>发布：<code>hexo g -d</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/path.jpg\" alt=\"img\"></p>\n<p>把博客迁移到<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo</a>了，主题是<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia</a>,<br>比原来的好看，也好用。不过这个主题的作者好像不更新了，以后可以换别的主题试试。<br>其实之前就想试试Hexo，当时安装Node.js出了点问题，就放弃了。这次也碰到问题了，不过参考网上的方法很快解决了，<br><a href=\"https://www.jianshu.com/p/31744aa44824\" target=\"_blank\" rel=\"noopener\">这里是方法链接</a>。</p>","more":"<p>然后，简单了解了一下Hexo的命令，就可以开始使用Hexo啦。原来需要<code>git add/commit/push</code>几条命令才能发布，<br>现在只需要一条命令(<code>hexo g -d</code>)就可以了。</p>\n<p>下面简单说一下步骤。</p>\n<ul>\n<li>安装Node.js, Git</li>\n<li>安装Hexo : <code>npm install hexo-cli -g</code></li>\n<li>Setup your blog : <code>hexo init blog</code> </li>\n<li>进入blog<code>cd blog</code>并下载主题 : <code>git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</code></li>\n<li>选择主题<code>theme: yilia</code></li>\n<li><p>配置<code>/blog/_config.yml</code></p>\n<ul>\n<li><code>new_post_name: year-:month-:day:title.md</code></li>\n<li><code>deploy:</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">repository: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>常用Hexo命令</p>\n<ul>\n<li>新建博客：<code>hexo new title</code></li>\n<li>发布：<code>hexo g -d</code></li>\n</ul>\n</li>\n</ul>"},{"title":"旧照片","date":"2019-03-30T14:03:30.000Z","_content":"\n一些照片\n====\n\n<!-- more -->\n\n![](/myPhoto/20140930_115321.jpg)\n![](/myPhoto/DSC00483.JPG)\n![](/myPhoto/DSC00484.JPG)\n![](/myPhoto/DSC00485.JPG)\n![](/myPhoto/DSC00486.JPG)\n![](/myPhoto/DSC00487.JPG)\n![](/myPhoto/DSC_0134.JPG)\n![](/myPhoto/DSC_0240.JPG)\n![](/myPhoto/DSC_0248.JPG)\n![](/myPhoto/DSC_0254.JPG)\n![](/myPhoto/DSC_0255.JPG)\n![](/myPhoto/DSC_0274.JPG)\n![](/myPhoto/IMG20150626016.jpg)\n![](/myPhoto/1岁.jpg)\n","source":"_posts/2019-03-30-oldPhotos.md","raw":"---\ntitle: 旧照片\ndate: 2019-03-30 22:03:30\ntags: 照片\n\n---\n\n一些照片\n====\n\n<!-- more -->\n\n![](/myPhoto/20140930_115321.jpg)\n![](/myPhoto/DSC00483.JPG)\n![](/myPhoto/DSC00484.JPG)\n![](/myPhoto/DSC00485.JPG)\n![](/myPhoto/DSC00486.JPG)\n![](/myPhoto/DSC00487.JPG)\n![](/myPhoto/DSC_0134.JPG)\n![](/myPhoto/DSC_0240.JPG)\n![](/myPhoto/DSC_0248.JPG)\n![](/myPhoto/DSC_0254.JPG)\n![](/myPhoto/DSC_0255.JPG)\n![](/myPhoto/DSC_0274.JPG)\n![](/myPhoto/IMG20150626016.jpg)\n![](/myPhoto/1岁.jpg)\n","slug":"oldPhotos","published":1,"updated":"2019-03-31T01:31:48.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutuhpf80015ifinx08r51p2","content":"<h1 id=\"一些照片\"><a href=\"#一些照片\" class=\"headerlink\" title=\"一些照片\"></a>一些照片</h1><a id=\"more\"></a>\n<p><img src=\"/myPhoto/20140930_115321.jpg\" alt><br><img src=\"/myPhoto/DSC00483.JPG\" alt><br><img src=\"/myPhoto/DSC00484.JPG\" alt><br><img src=\"/myPhoto/DSC00485.JPG\" alt><br><img src=\"/myPhoto/DSC00486.JPG\" alt><br><img src=\"/myPhoto/DSC00487.JPG\" alt><br><img src=\"/myPhoto/DSC_0134.JPG\" alt><br><img src=\"/myPhoto/DSC_0240.JPG\" alt><br><img src=\"/myPhoto/DSC_0248.JPG\" alt><br><img src=\"/myPhoto/DSC_0254.JPG\" alt><br><img src=\"/myPhoto/DSC_0255.JPG\" alt><br><img src=\"/myPhoto/DSC_0274.JPG\" alt><br><img src=\"/myPhoto/IMG20150626016.jpg\" alt><br><img src=\"/myPhoto/1岁.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一些照片\"><a href=\"#一些照片\" class=\"headerlink\" title=\"一些照片\"></a>一些照片</h1>","more":"<p><img src=\"/myPhoto/20140930_115321.jpg\" alt><br><img src=\"/myPhoto/DSC00483.JPG\" alt><br><img src=\"/myPhoto/DSC00484.JPG\" alt><br><img src=\"/myPhoto/DSC00485.JPG\" alt><br><img src=\"/myPhoto/DSC00486.JPG\" alt><br><img src=\"/myPhoto/DSC00487.JPG\" alt><br><img src=\"/myPhoto/DSC_0134.JPG\" alt><br><img src=\"/myPhoto/DSC_0240.JPG\" alt><br><img src=\"/myPhoto/DSC_0248.JPG\" alt><br><img src=\"/myPhoto/DSC_0254.JPG\" alt><br><img src=\"/myPhoto/DSC_0255.JPG\" alt><br><img src=\"/myPhoto/DSC_0274.JPG\" alt><br><img src=\"/myPhoto/IMG20150626016.jpg\" alt><br><img src=\"/myPhoto/1岁.jpg\" alt></p>"},{"title":"Reading","date":"2019-03-30T13:16:37.000Z","_content":"\n![pic](/myPhoto/DSC_0274.JPG)\n\n##### 读书笔记 C++ Primer\n\n这本800多页的大块头，我已经翻了很久了。才看一半左右。刚开始的看的很快，一天近百页，两三天后就啃不动了。\n越到后面新知识越多，也越来越难理解，因为前面几章是基础，后面是各种复杂的东西，容器、动态内存、拷贝控制什么的。\n不过还是要尽快看。前几天因为实验室还有论文的事情耽误了些时间，后面几天应该没啥事了。专心看书，啃书。看完这本，还有三本……\n其实不止……比如STL剖析、Linux内核与实现、csapp、EffectiveC++、Redis、MySQL等等。真的是太多书需要看了。\n\n<!-- more -->\n\n##### 摄影\n\n相机一直在睡觉。\n\n我的所谓爱好摄影何止是一句空话，简直是真空的。不过今天翻了翻相册，以前拍的照片，质量还不错的（比如文首所示），\n它们也一直在睡觉。自从拍完回来，从手机或相机的存储卡里拷贝到电脑里，就再也没“惠顾”过他们！\n\n其实有时间可以多出门拍拍照片，把这个爱好给坐实了！比如上次文学院的同学邀请，就可以去啊，虽然认识的方式略尴尬，但也无伤大雅。\n也不是以找对象为纯粹目的的啊，做个朋友总是可以的。嗯，有时间问一下。\n\n##### 找实习\n\n参加了不少笔试，面试不多，面了的也一个都没过。现状是基础不牢、项目不精，要啥啥不行。还是补基础先。\n\n##### 其他\n\n兰大双选会其实就是个大型招聘会，是挺不错的，不过跟我们专业关系不太大。\n\n作息方面，基本上达到要求了，还需要长期坚持。尽量做到不玩手机，虽然现在已经玩的很少了，但还没有完全杜绝。\n\n个人形象方面，既然丑的事实已经无法改变，那就只能接受，并在其他方面做出补充。比如健身，发型，衣着等等。\n说到底，我还是一个在意外表的人。以前嘛，不修边幅，对长相还自信，所以也没啥。现在呢，要啥没啥了，天天跟裸奔一样，很不自在。\n这一点亟待改善。\n\n\n就说这么多吧，兰州最近的昼夜温差挺大的，不穿秋裤晚上还挺冷的！\n\n\n2019,03,30 二月廿四 星期六\n\n于兰州\n","source":"_posts/2019-03-30-reading.md","raw":"---\ntitle: reading\ndate: 2019-03-30 21:16:37\ntags: 随笔\n\n---\n\n![pic](/myPhoto/DSC_0274.JPG)\n\n##### 读书笔记 C++ Primer\n\n这本800多页的大块头，我已经翻了很久了。才看一半左右。刚开始的看的很快，一天近百页，两三天后就啃不动了。\n越到后面新知识越多，也越来越难理解，因为前面几章是基础，后面是各种复杂的东西，容器、动态内存、拷贝控制什么的。\n不过还是要尽快看。前几天因为实验室还有论文的事情耽误了些时间，后面几天应该没啥事了。专心看书，啃书。看完这本，还有三本……\n其实不止……比如STL剖析、Linux内核与实现、csapp、EffectiveC++、Redis、MySQL等等。真的是太多书需要看了。\n\n<!-- more -->\n\n##### 摄影\n\n相机一直在睡觉。\n\n我的所谓爱好摄影何止是一句空话，简直是真空的。不过今天翻了翻相册，以前拍的照片，质量还不错的（比如文首所示），\n它们也一直在睡觉。自从拍完回来，从手机或相机的存储卡里拷贝到电脑里，就再也没“惠顾”过他们！\n\n其实有时间可以多出门拍拍照片，把这个爱好给坐实了！比如上次文学院的同学邀请，就可以去啊，虽然认识的方式略尴尬，但也无伤大雅。\n也不是以找对象为纯粹目的的啊，做个朋友总是可以的。嗯，有时间问一下。\n\n##### 找实习\n\n参加了不少笔试，面试不多，面了的也一个都没过。现状是基础不牢、项目不精，要啥啥不行。还是补基础先。\n\n##### 其他\n\n兰大双选会其实就是个大型招聘会，是挺不错的，不过跟我们专业关系不太大。\n\n作息方面，基本上达到要求了，还需要长期坚持。尽量做到不玩手机，虽然现在已经玩的很少了，但还没有完全杜绝。\n\n个人形象方面，既然丑的事实已经无法改变，那就只能接受，并在其他方面做出补充。比如健身，发型，衣着等等。\n说到底，我还是一个在意外表的人。以前嘛，不修边幅，对长相还自信，所以也没啥。现在呢，要啥没啥了，天天跟裸奔一样，很不自在。\n这一点亟待改善。\n\n\n就说这么多吧，兰州最近的昼夜温差挺大的，不穿秋裤晚上还挺冷的！\n\n\n2019,03,30 二月廿四 星期六\n\n于兰州\n","slug":"reading","published":1,"updated":"2019-03-30T14:18:07.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutuhpfa0017ifinhbbqckwr","content":"<p><img src=\"/myPhoto/DSC_0274.JPG\" alt=\"pic\"></p>\n<h5 id=\"读书笔记-C-Primer\"><a href=\"#读书笔记-C-Primer\" class=\"headerlink\" title=\"读书笔记 C++ Primer\"></a>读书笔记 C++ Primer</h5><p>这本800多页的大块头，我已经翻了很久了。才看一半左右。刚开始的看的很快，一天近百页，两三天后就啃不动了。<br>越到后面新知识越多，也越来越难理解，因为前面几章是基础，后面是各种复杂的东西，容器、动态内存、拷贝控制什么的。<br>不过还是要尽快看。前几天因为实验室还有论文的事情耽误了些时间，后面几天应该没啥事了。专心看书，啃书。看完这本，还有三本……<br>其实不止……比如STL剖析、Linux内核与实现、csapp、EffectiveC++、Redis、MySQL等等。真的是太多书需要看了。</p>\n<a id=\"more\"></a>\n<h5 id=\"摄影\"><a href=\"#摄影\" class=\"headerlink\" title=\"摄影\"></a>摄影</h5><p>相机一直在睡觉。</p>\n<p>我的所谓爱好摄影何止是一句空话，简直是真空的。不过今天翻了翻相册，以前拍的照片，质量还不错的（比如文首所示），<br>它们也一直在睡觉。自从拍完回来，从手机或相机的存储卡里拷贝到电脑里，就再也没“惠顾”过他们！</p>\n<p>其实有时间可以多出门拍拍照片，把这个爱好给坐实了！比如上次文学院的同学邀请，就可以去啊，虽然认识的方式略尴尬，但也无伤大雅。<br>也不是以找对象为纯粹目的的啊，做个朋友总是可以的。嗯，有时间问一下。</p>\n<h5 id=\"找实习\"><a href=\"#找实习\" class=\"headerlink\" title=\"找实习\"></a>找实习</h5><p>参加了不少笔试，面试不多，面了的也一个都没过。现状是基础不牢、项目不精，要啥啥不行。还是补基础先。</p>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><p>兰大双选会其实就是个大型招聘会，是挺不错的，不过跟我们专业关系不太大。</p>\n<p>作息方面，基本上达到要求了，还需要长期坚持。尽量做到不玩手机，虽然现在已经玩的很少了，但还没有完全杜绝。</p>\n<p>个人形象方面，既然丑的事实已经无法改变，那就只能接受，并在其他方面做出补充。比如健身，发型，衣着等等。<br>说到底，我还是一个在意外表的人。以前嘛，不修边幅，对长相还自信，所以也没啥。现在呢，要啥没啥了，天天跟裸奔一样，很不自在。<br>这一点亟待改善。</p>\n<p>就说这么多吧，兰州最近的昼夜温差挺大的，不穿秋裤晚上还挺冷的！</p>\n<p>2019,03,30 二月廿四 星期六</p>\n<p>于兰州</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/myPhoto/DSC_0274.JPG\" alt=\"pic\"></p>\n<h5 id=\"读书笔记-C-Primer\"><a href=\"#读书笔记-C-Primer\" class=\"headerlink\" title=\"读书笔记 C++ Primer\"></a>读书笔记 C++ Primer</h5><p>这本800多页的大块头，我已经翻了很久了。才看一半左右。刚开始的看的很快，一天近百页，两三天后就啃不动了。<br>越到后面新知识越多，也越来越难理解，因为前面几章是基础，后面是各种复杂的东西，容器、动态内存、拷贝控制什么的。<br>不过还是要尽快看。前几天因为实验室还有论文的事情耽误了些时间，后面几天应该没啥事了。专心看书，啃书。看完这本，还有三本……<br>其实不止……比如STL剖析、Linux内核与实现、csapp、EffectiveC++、Redis、MySQL等等。真的是太多书需要看了。</p>","more":"<h5 id=\"摄影\"><a href=\"#摄影\" class=\"headerlink\" title=\"摄影\"></a>摄影</h5><p>相机一直在睡觉。</p>\n<p>我的所谓爱好摄影何止是一句空话，简直是真空的。不过今天翻了翻相册，以前拍的照片，质量还不错的（比如文首所示），<br>它们也一直在睡觉。自从拍完回来，从手机或相机的存储卡里拷贝到电脑里，就再也没“惠顾”过他们！</p>\n<p>其实有时间可以多出门拍拍照片，把这个爱好给坐实了！比如上次文学院的同学邀请，就可以去啊，虽然认识的方式略尴尬，但也无伤大雅。<br>也不是以找对象为纯粹目的的啊，做个朋友总是可以的。嗯，有时间问一下。</p>\n<h5 id=\"找实习\"><a href=\"#找实习\" class=\"headerlink\" title=\"找实习\"></a>找实习</h5><p>参加了不少笔试，面试不多，面了的也一个都没过。现状是基础不牢、项目不精，要啥啥不行。还是补基础先。</p>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><p>兰大双选会其实就是个大型招聘会，是挺不错的，不过跟我们专业关系不太大。</p>\n<p>作息方面，基本上达到要求了，还需要长期坚持。尽量做到不玩手机，虽然现在已经玩的很少了，但还没有完全杜绝。</p>\n<p>个人形象方面，既然丑的事实已经无法改变，那就只能接受，并在其他方面做出补充。比如健身，发型，衣着等等。<br>说到底，我还是一个在意外表的人。以前嘛，不修边幅，对长相还自信，所以也没啥。现在呢，要啥没啥了，天天跟裸奔一样，很不自在。<br>这一点亟待改善。</p>\n<p>就说这么多吧，兰州最近的昼夜温差挺大的，不穿秋裤晚上还挺冷的！</p>\n<p>2019,03,30 二月廿四 星期六</p>\n<p>于兰州</p>"},{"title":"命名空间Namespace数据成员重复定义问题","date":"2019-04-23T13:40:14.000Z","_content":"\nC++ Primer终于快看完了。\n真是越往后看的越慢，跳过了几章，今天直接看第18章命名空间部分，遇到了一个小问题。如下所示。\n文件：\n* np.h\n```c\n#ifndef __NP_H__ \n#define __NP_H__ \n\n#include <iostream>\n\nnamespace np{\n    class NpTest{\n    public:\n        void print();\n    private:\n        int val = 2;\n    };\n\n    void add(int &);\n    //int np_val;//这样不行，重复定义，用嵌套的匿名空间可以，如下所示(不太清楚为啥。。。)\n    namespace{\n        int np_val;\n    }\n}\n\n#endif\n```\n* np.cpp\n```c\n#include \"np.h\"\n#include <iostream>\nusing namespace np;\n\nnamespace np{\n    void NpTest::print(){\n        std::cout << \"val = \" << val << std::endl;\n    }\n\n    void add(int &a){\n        ++a;\n    }\n}\n```\n* main.cpp\n```c\n#include \"np.h\"\n#include <iostream>\nusing namespace std;\nusing namespace np;\n\nnamespace np1{\n    int np_val = 10;\n}\nnamespace np1{\n    void test(){\n        ++np_val;\n    }\n}\n\nint main(){\n    NpTest a;\n    a.print();\n    int x = 1;\n    add(x);\n    cout << x << endl;\n    np::np_val = 100;\n    cout << np::np_val << endl;\n    cout << np1::np_val << endl;\n    np1::test();\n    cout << np1::np_val << endl;\n\treturn 0;\n}\n```\nProblem: 其实就是注释的那一行，np_val存在重复定义问题。\n就是每当np.h被include一次，np_val就被定义一次。\n但是改成把np_val放到嵌套的匿名空间里就没有问题了。\n现在还不太理解原因，待后面再看看。\n","source":"_posts/2019-04-23-命名空间namespace数据成员重复定义问题.md","raw":"---\ntitle: 命名空间namespace数据成员重复定义问题\ndate: 2019-04-23 21:40:14\ntags: C++\n\n---\n\nC++ Primer终于快看完了。\n真是越往后看的越慢，跳过了几章，今天直接看第18章命名空间部分，遇到了一个小问题。如下所示。\n文件：\n* np.h\n```c\n#ifndef __NP_H__ \n#define __NP_H__ \n\n#include <iostream>\n\nnamespace np{\n    class NpTest{\n    public:\n        void print();\n    private:\n        int val = 2;\n    };\n\n    void add(int &);\n    //int np_val;//这样不行，重复定义，用嵌套的匿名空间可以，如下所示(不太清楚为啥。。。)\n    namespace{\n        int np_val;\n    }\n}\n\n#endif\n```\n* np.cpp\n```c\n#include \"np.h\"\n#include <iostream>\nusing namespace np;\n\nnamespace np{\n    void NpTest::print(){\n        std::cout << \"val = \" << val << std::endl;\n    }\n\n    void add(int &a){\n        ++a;\n    }\n}\n```\n* main.cpp\n```c\n#include \"np.h\"\n#include <iostream>\nusing namespace std;\nusing namespace np;\n\nnamespace np1{\n    int np_val = 10;\n}\nnamespace np1{\n    void test(){\n        ++np_val;\n    }\n}\n\nint main(){\n    NpTest a;\n    a.print();\n    int x = 1;\n    add(x);\n    cout << x << endl;\n    np::np_val = 100;\n    cout << np::np_val << endl;\n    cout << np1::np_val << endl;\n    np1::test();\n    cout << np1::np_val << endl;\n\treturn 0;\n}\n```\nProblem: 其实就是注释的那一行，np_val存在重复定义问题。\n就是每当np.h被include一次，np_val就被定义一次。\n但是改成把np_val放到嵌套的匿名空间里就没有问题了。\n现在还不太理解原因，待后面再看看。\n","slug":"命名空间namespace数据成员重复定义问题","published":1,"updated":"2019-04-23T13:48:30.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutuhpfe0019ifinfl0dh9j8","content":"<p>C++ Primer终于快看完了。<br>真是越往后看的越慢，跳过了几章，今天直接看第18章命名空间部分，遇到了一个小问题。如下所示。<br>文件：</p>\n<ul>\n<li><p>np.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __NP_H__ </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NP_H__ </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> np&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NpTest</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//int np_val;//这样不行，重复定义，用嵌套的匿名空间可以，如下所示(不太清楚为啥。。。)</span></span><br><span class=\"line\">    <span class=\"keyword\">namespace</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> np_val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>np.cpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"np.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> np;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> np&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> NpTest::print()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"val = \"</span> &lt;&lt; val &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a)</span></span>&#123;</span><br><span class=\"line\">        ++a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main.cpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"np.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> np;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> np1&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> np_val = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> np1&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ++np_val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    NpTest a;</span><br><span class=\"line\">    a.print();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    add(x);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    np::np_val = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; np::np_val &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; np1::np_val &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    np1::test();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; np1::np_val &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Problem: 其实就是注释的那一行，np_val存在重复定义问题。<br>就是每当np.h被include一次，np_val就被定义一次。<br>但是改成把np_val放到嵌套的匿名空间里就没有问题了。<br>现在还不太理解原因，待后面再看看。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>C++ Primer终于快看完了。<br>真是越往后看的越慢，跳过了几章，今天直接看第18章命名空间部分，遇到了一个小问题。如下所示。<br>文件：</p>\n<ul>\n<li><p>np.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __NP_H__ </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NP_H__ </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> np&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NpTest</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//int np_val;//这样不行，重复定义，用嵌套的匿名空间可以，如下所示(不太清楚为啥。。。)</span></span><br><span class=\"line\">    <span class=\"keyword\">namespace</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> np_val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>np.cpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"np.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> np;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> np&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> NpTest::print()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"val = \"</span> &lt;&lt; val &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a)</span></span>&#123;</span><br><span class=\"line\">        ++a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main.cpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"np.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> np;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> np1&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> np_val = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> np1&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ++np_val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    NpTest a;</span><br><span class=\"line\">    a.print();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    add(x);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    np::np_val = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; np::np_val &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; np1::np_val &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    np1::test();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; np1::np_val &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Problem: 其实就是注释的那一行，np_val存在重复定义问题。<br>就是每当np.h被include一次，np_val就被定义一次。<br>但是改成把np_val放到嵌套的匿名空间里就没有问题了。<br>现在还不太理解原因，待后面再看看。</p>\n"},{"title":"饮酒","date":"2019-03-31T13:49:40.000Z","_content":"\n饮酒\n====\n\n陶渊明\n\n结庐在人境，而无车马喧。\n问君何能尔？心远地自偏。\n采菊东篱下，悠然见南山。\n山气日夕佳，飞鸟相与还。\n此中有真意，欲辨已忘言。\n","source":"_posts/2019-03-31-drink.md","raw":"---\ntitle: 饮酒\ndate: 2019-03-31 21:49:40\ntags: 诗歌\n---\n\n饮酒\n====\n\n陶渊明\n\n结庐在人境，而无车马喧。\n问君何能尔？心远地自偏。\n采菊东篱下，悠然见南山。\n山气日夕佳，飞鸟相与还。\n此中有真意，欲辨已忘言。\n","slug":"drink","published":1,"updated":"2019-03-31T14:08:43.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutuhpfg001cifind4nrorj2","content":"<h1 id=\"饮酒\"><a href=\"#饮酒\" class=\"headerlink\" title=\"饮酒\"></a>饮酒</h1><p>陶渊明</p>\n<p>结庐在人境，而无车马喧。<br>问君何能尔？心远地自偏。<br>采菊东篱下，悠然见南山。<br>山气日夕佳，飞鸟相与还。<br>此中有真意，欲辨已忘言。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"饮酒\"><a href=\"#饮酒\" class=\"headerlink\" title=\"饮酒\"></a>饮酒</h1><p>陶渊明</p>\n<p>结庐在人境，而无车马喧。<br>问君何能尔？心远地自偏。<br>采菊东篱下，悠然见南山。<br>山气日夕佳，飞鸟相与还。<br>此中有真意，欲辨已忘言。</p>\n"},{"title":"木夕的诗","date":"2019-04-10T01:01:34.000Z","_content":"\n![sunset](/images/sunset.jpg)\n\n一些旧诗，陆续整理中...\n\n<!-- more -->\n\n###### 目录\n[夜思](#夜思)\n[]()\n[]()\n[]()\n\n\n###### 夜思\n2009.10.01 于海口\n黛入秋空忽夜半，窗台露水月如弓。\n风冲雾里花滴落，雨撞墙根草速生。\n语逸心烦德不事，情闲意乱道难清。\n方思铁血南疆撒，岂敢从心荡鼓钟。\n\n\n","source":"_posts/2019-04-10-mjpoet.md","raw":"---\ntitle: 木夕的诗\ndate: 2019-04-10 09:01:34\ntags: 诗歌\n\n---\n\n![sunset](/images/sunset.jpg)\n\n一些旧诗，陆续整理中...\n\n<!-- more -->\n\n###### 目录\n[夜思](#夜思)\n[]()\n[]()\n[]()\n\n\n###### 夜思\n2009.10.01 于海口\n黛入秋空忽夜半，窗台露水月如弓。\n风冲雾里花滴落，雨撞墙根草速生。\n语逸心烦德不事，情闲意乱道难清。\n方思铁血南疆撒，岂敢从心荡鼓钟。\n\n\n","slug":"mjpoet","published":1,"updated":"2019-04-10T02:19:59.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutuhpfi001eifingxhxnk0a","content":"<p><img src=\"/images/sunset.jpg\" alt=\"sunset\"></p>\n<p>一些旧诗，陆续整理中…</p>\n<a id=\"more\"></a>\n<h6 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h6><p><a href=\"#夜思\">夜思</a><br><a href></a><br><a href></a><br><a href></a></p>\n<h6 id=\"夜思\"><a href=\"#夜思\" class=\"headerlink\" title=\"夜思\"></a>夜思</h6><p>2009.10.01 于海口<br>黛入秋空忽夜半，窗台露水月如弓。<br>风冲雾里花滴落，雨撞墙根草速生。<br>语逸心烦德不事，情闲意乱道难清。<br>方思铁血南疆撒，岂敢从心荡鼓钟。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/sunset.jpg\" alt=\"sunset\"></p>\n<p>一些旧诗，陆续整理中…</p>","more":"<h6 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h6><p><a href=\"#夜思\">夜思</a><br><a href></a><br><a href></a><br><a href></a></p>\n<h6 id=\"夜思\"><a href=\"#夜思\" class=\"headerlink\" title=\"夜思\"></a>夜思</h6><p>2009.10.01 于海口<br>黛入秋空忽夜半，窗台露水月如弓。<br>风冲雾里花滴落，雨撞墙根草速生。<br>语逸心烦德不事，情闲意乱道难清。<br>方思铁血南疆撒，岂敢从心荡鼓钟。</p>"},{"layout":"post","title":"去掉Deepin登录界面的模糊效果","date":"2018-11-05T16:00:00.000Z","_content":"\n引自: [https://bbs.deepin.org/forum.php?mod=viewthread&tid=149463&extra=](https://bbs.deepin.org/forum.php?mod=viewthread&tid=149463&extra=)\n\n其实这个页面我收藏了，但今天想设置的时候网络不好页面打不开，所以自己复制一个吧。\n\ndeepin会将所有切换过的锁屏壁纸模糊效果保存到目录：/var/cache/image-blur/下\n<!-- more -->\n\n* 1.首先把这个文件夹下的所有文件都删除;\n* 2.锁屏;\n* 3.再次登录后，进到这个文件夹下，就可以看到只有一个文件(file.jpg);\n* 4.把需要用的图片替换掉这个文件即可。\n\t* `sudo cp 需要使用的图片.jpg /var/cache/image-blur/file.jpg`\n","source":"_posts/2018-11-06-deepin-lockscreen.md","raw":"---\nlayout: post\ntitle: 去掉deepin登录界面的模糊效果\ndate: 2018-11-06\ntags: Deepin\n\n---\n\n引自: [https://bbs.deepin.org/forum.php?mod=viewthread&tid=149463&extra=](https://bbs.deepin.org/forum.php?mod=viewthread&tid=149463&extra=)\n\n其实这个页面我收藏了，但今天想设置的时候网络不好页面打不开，所以自己复制一个吧。\n\ndeepin会将所有切换过的锁屏壁纸模糊效果保存到目录：/var/cache/image-blur/下\n<!-- more -->\n\n* 1.首先把这个文件夹下的所有文件都删除;\n* 2.锁屏;\n* 3.再次登录后，进到这个文件夹下，就可以看到只有一个文件(file.jpg);\n* 4.把需要用的图片替换掉这个文件即可。\n\t* `sudo cp 需要使用的图片.jpg /var/cache/image-blur/file.jpg`\n","slug":"deepin-lockscreen","published":1,"updated":"2019-03-29T07:59:52.798Z","comments":1,"photos":[],"link":"","_id":"cjutuhpfj001fifin7jr8jqf8","content":"<p>引自: <a href=\"https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=149463&amp;extra=\" target=\"_blank\" rel=\"noopener\">https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=149463&amp;extra=</a></p>\n<p>其实这个页面我收藏了，但今天想设置的时候网络不好页面打不开，所以自己复制一个吧。</p>\n<p>deepin会将所有切换过的锁屏壁纸模糊效果保存到目录：/var/cache/image-blur/下<br><a id=\"more\"></a></p>\n<ul>\n<li>1.首先把这个文件夹下的所有文件都删除;</li>\n<li>2.锁屏;</li>\n<li>3.再次登录后，进到这个文件夹下，就可以看到只有一个文件(file.jpg);</li>\n<li>4.把需要用的图片替换掉这个文件即可。<ul>\n<li><code>sudo cp 需要使用的图片.jpg /var/cache/image-blur/file.jpg</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>引自: <a href=\"https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=149463&amp;extra=\" target=\"_blank\" rel=\"noopener\">https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=149463&amp;extra=</a></p>\n<p>其实这个页面我收藏了，但今天想设置的时候网络不好页面打不开，所以自己复制一个吧。</p>\n<p>deepin会将所有切换过的锁屏壁纸模糊效果保存到目录：/var/cache/image-blur/下<br>","more":"</p>\n<ul>\n<li>1.首先把这个文件夹下的所有文件都删除;</li>\n<li>2.锁屏;</li>\n<li>3.再次登录后，进到这个文件夹下，就可以看到只有一个文件(file.jpg);</li>\n<li>4.把需要用的图片替换掉这个文件即可。<ul>\n<li><code>sudo cp 需要使用的图片.jpg /var/cache/image-blur/file.jpg</code></li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjutuhpdk0005ifin11dduon9","tag_id":"cjutuhpdz0008ifinkuan5ko9","_id":"cjutuhpel000hifina3m79b3l"},{"post_id":"cjutuhpdk0005ifin11dduon9","tag_id":"cjutuhped000cifinz0ghco0k","_id":"cjutuhpen000jifins8a29cms"},{"post_id":"cjutuhpeg000eifin7dsp0k7r","tag_id":"cjutuhpdz0008ifinkuan5ko9","_id":"cjutuhpeq000mifin3p1fjqz8"},{"post_id":"cjutuhpdu0007ifin4shxk4sm","tag_id":"cjutuhpei000fifin8mopfm70","_id":"cjutuhpeu000qifinvds2cwdb"},{"post_id":"cjutuhpdu0007ifin4shxk4sm","tag_id":"cjutuhpeo000kifincst526oh","_id":"cjutuhpew000sifinwaz4oynk"},{"post_id":"cjutuhpe20009ifinvbvkezpn","tag_id":"cjutuhpes000oifinhu4a2amu","_id":"cjutuhpey000vifinxc6rabm3"},{"post_id":"cjutuhpe7000aifin0bmsvi4n","tag_id":"cjutuhpey000uifinb6g0n5n2","_id":"cjutuhpf30010ifinmov5r96l"},{"post_id":"cjutuhpeb000bifinq41qh65p","tag_id":"cjutuhpf2000yifinw0x4l6k9","_id":"cjutuhpf80014ifindunrdbpc"},{"post_id":"cjutuhpef000difinzfedvrze","tag_id":"cjutuhpf50012ifin9usldia9","_id":"cjutuhpfd0018ifindazxe3mx"},{"post_id":"cjutuhpfa0017ifinhbbqckwr","tag_id":"cjutuhpes000oifinhu4a2amu","_id":"cjutuhpff001aifine40ghixm"},{"post_id":"cjutuhpek000gifinkc8sxcju","tag_id":"cjutuhpes000oifinhu4a2amu","_id":"cjutuhpfh001difinkicpv3hh"},{"post_id":"cjutuhpfj001fifin7jr8jqf8","tag_id":"cjutuhpdz0008ifinkuan5ko9","_id":"cjutuhpfm001hifin743cp5tb"},{"post_id":"cjutuhpem000iifin96hek95i","tag_id":"cjutuhpff001bifindv6mvxtr","_id":"cjutuhpfn001jifin4h7v8ibo"},{"post_id":"cjutuhpem000iifin96hek95i","tag_id":"cjutuhpeo000kifincst526oh","_id":"cjutuhpfn001kifin1ztfjoa6"},{"post_id":"cjutuhpeo000lifin6ltjcefa","tag_id":"cjutuhpfm001iifinh4iwasen","_id":"cjutuhpfo001mifinqgfy2p5n"},{"post_id":"cjutuhpeo000lifin6ltjcefa","tag_id":"cjutuhped000cifinz0ghco0k","_id":"cjutuhpfo001nifinl4blevwp"},{"post_id":"cjutuhper000nifinkk4m8wyo","tag_id":"cjutuhpf50012ifin9usldia9","_id":"cjutuhpfq001qifintf2mlpo3"},{"post_id":"cjutuhper000nifinkk4m8wyo","tag_id":"cjutuhpfo001oifin2jdvssf7","_id":"cjutuhpfq001rifinn81xkfot"},{"post_id":"cjutuhpet000pifinmv14w1fc","tag_id":"cjutuhpfp001pifinm8bann2k","_id":"cjutuhpfr001uifinlac2tw9h"},{"post_id":"cjutuhpet000pifinmv14w1fc","tag_id":"cjutuhpfq001sifin1zxjm57y","_id":"cjutuhpfr001vifinyhzhilnm"},{"post_id":"cjutuhpet000pifinmv14w1fc","tag_id":"cjutuhpeo000kifincst526oh","_id":"cjutuhpfs001xifintwz6eali"},{"post_id":"cjutuhpev000rifino589tndy","tag_id":"cjutuhpfr001tifinvy7m20u8","_id":"cjutuhpft001zifinwgobyoqm"},{"post_id":"cjutuhpev000rifino589tndy","tag_id":"cjutuhpfr001wifincwelo5l1","_id":"cjutuhpft0020ifinh63y0dew"},{"post_id":"cjutuhpex000tifinbrqmvhck","tag_id":"cjutuhpfr001tifinvy7m20u8","_id":"cjutuhpfv0023ifinakk8u4b6"},{"post_id":"cjutuhpex000tifinbrqmvhck","tag_id":"cjutuhpfr001wifincwelo5l1","_id":"cjutuhpfv0024ifinj9cpw26m"},{"post_id":"cjutuhpez000wifin7ykkpmik","tag_id":"cjutuhped000cifinz0ghco0k","_id":"cjutuhpfw0026ifinjecn8nku"},{"post_id":"cjutuhpez000wifin7ykkpmik","tag_id":"cjutuhpfu0022ifinezrpnoa0","_id":"cjutuhpfw0027ifinw4rlmsgc"},{"post_id":"cjutuhpez000wifin7ykkpmik","tag_id":"cjutuhpeo000kifincst526oh","_id":"cjutuhpfw0029ifiny05m4chf"},{"post_id":"cjutuhpf0000xifin7z4uo4y0","tag_id":"cjutuhpfv0025ifinpw0xj9h4","_id":"cjutuhpfx002bifinmhdzi1aa"},{"post_id":"cjutuhpf0000xifin7z4uo4y0","tag_id":"cjutuhpfw0028ifin1zdj5182","_id":"cjutuhpfx002cifingfifh931"},{"post_id":"cjutuhpf0000xifin7z4uo4y0","tag_id":"cjutuhpey000uifinb6g0n5n2","_id":"cjutuhpfy002eifink443mtni"},{"post_id":"cjutuhpf2000zifinzs2cpkbc","tag_id":"cjutuhpey000uifinb6g0n5n2","_id":"cjutuhpfy002fifinb5nlqnam"},{"post_id":"cjutuhpf2000zifinzs2cpkbc","tag_id":"cjutuhpfw0028ifin1zdj5182","_id":"cjutuhpfz002hifina7aahut2"},{"post_id":"cjutuhpf40011ifinu6cvck0q","tag_id":"cjutuhpfp001pifinm8bann2k","_id":"cjutuhpfz002iifin0qptqols"},{"post_id":"cjutuhpf40011ifinu6cvck0q","tag_id":"cjutuhpeo000kifincst526oh","_id":"cjutuhpg0002kifinhes38lc4"},{"post_id":"cjutuhpf60013ifinmgpxfkcx","tag_id":"cjutuhpfy002gifinjg03qbl8","_id":"cjutuhpg0002lifinubuxl1c6"},{"post_id":"cjutuhpf80015ifinx08r51p2","tag_id":"cjutuhpfz002jifinl1rpt8ep","_id":"cjutuhpg1002nifin930tebt5"},{"post_id":"cjutuhpfe0019ifinfl0dh9j8","tag_id":"cjutuhpfp001pifinm8bann2k","_id":"cjutuhpg2002pifinndioj05p"},{"post_id":"cjutuhpfg001cifind4nrorj2","tag_id":"cjutuhpg2002oifinhepyup9e","_id":"cjutuhpg3002rifinivij9ggc"},{"post_id":"cjutuhpfi001eifingxhxnk0a","tag_id":"cjutuhpg2002oifinhepyup9e","_id":"cjutuhpg3002sifinmist90fg"}],"Tag":[{"name":"Deepin","_id":"cjutuhpdz0008ifinkuan5ko9"},{"name":"Linux","_id":"cjutuhped000cifinz0ghco0k"},{"name":"爬虫","_id":"cjutuhpei000fifin8mopfm70"},{"name":"技术","_id":"cjutuhpeo000kifincst526oh"},{"name":"随笔","_id":"cjutuhpes000oifinhu4a2amu"},{"name":"shell","_id":"cjutuhpey000uifinb6g0n5n2"},{"name":"windows","_id":"cjutuhpf2000yifinw0x4l6k9"},{"name":"复杂网络","_id":"cjutuhpf50012ifin9usldia9"},{"name":"mysql","_id":"cjutuhpff001bifindv6mvxtr"},{"name":"vim","_id":"cjutuhpfm001iifinh4iwasen"},{"name":"LPA","_id":"cjutuhpfo001oifin2jdvssf7"},{"name":"C++","_id":"cjutuhpfp001pifinm8bann2k"},{"name":"斐波那契","_id":"cjutuhpfq001sifin1zxjm57y"},{"name":"LeetCode","_id":"cjutuhpfr001tifinvy7m20u8"},{"name":"刷题","_id":"cjutuhpfr001wifincwelo5l1"},{"name":"Socket","_id":"cjutuhpfu0022ifinezrpnoa0"},{"name":"c","_id":"cjutuhpfv0025ifinpw0xj9h4"},{"name":"linux","_id":"cjutuhpfw0028ifin1zdj5182"},{"name":"笔记","_id":"cjutuhpfy002gifinjg03qbl8"},{"name":"照片","_id":"cjutuhpfz002jifinl1rpt8ep"},{"name":"诗歌","_id":"cjutuhpg2002oifinhepyup9e"}]}}